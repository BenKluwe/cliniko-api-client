// Package cliniko provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package cliniko

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListAppointmentTypesGet request
	ListAppointmentTypesGet(ctx context.Context, params *ListAppointmentTypesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAppointmentTypePostWithBody request with any body
	CreateAppointmentTypePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAppointmentTypePost(ctx context.Context, body CreateAppointmentTypePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPractitionersForAppointmentTypeGet request
	ListPractitionersForAppointmentTypeGet(ctx context.Context, appointmentTypeId string, params *ListPractitionersForAppointmentTypeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListInactivePractitionersForAppointmentTypeGet request
	ListInactivePractitionersForAppointmentTypeGet(ctx context.Context, appointmentTypeId string, params *ListInactivePractitionersForAppointmentTypeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAppointmentTypeDelete request
	DeleteAppointmentTypeDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAppointmentTypeGet request
	GetAppointmentTypeGet(ctx context.Context, id string, params *GetAppointmentTypeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAppointmentTypePatchWithBody request with any body
	UpdateAppointmentTypePatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAppointmentTypePatch(ctx context.Context, id string, body UpdateAppointmentTypePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveAppointmentTypePost request
	ArchiveAppointmentTypePost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListInvoicesForAppointmentGet request
	ListInvoicesForAppointmentGet(ctx context.Context, appointmentId string, params *ListInvoicesForAppointmentGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAttendeesGet request
	ListAttendeesGet(ctx context.Context, params *ListAttendeesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAttendeePostWithBody request with any body
	CreateAttendeePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAttendeePost(ctx context.Context, body CreateAttendeePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListInvoicesForAttendeeGet request
	ListInvoicesForAttendeeGet(ctx context.Context, attendeeId string, params *ListInvoicesForAttendeeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPatientFormsForAttendeeGet request
	ListPatientFormsForAttendeeGet(ctx context.Context, attendeeId string, params *ListPatientFormsForAttendeeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAttendeeDelete request
	DeleteAttendeeDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAttendeeGet request
	GetAttendeeGet(ctx context.Context, id string, params *GetAttendeeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAttendeePatchWithBody request with any body
	UpdateAttendeePatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAttendeePatch(ctx context.Context, id string, body UpdateAttendeePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveAttendeePost request
	ArchiveAttendeePost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelAttendeePatchWithBody request with any body
	CancelAttendeePatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelAttendeePatch(ctx context.Context, id string, body CancelAttendeePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAvailabilityBlocksGet request
	ListAvailabilityBlocksGet(ctx context.Context, params *ListAvailabilityBlocksGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAvailabilityBlockPostWithBody request with any body
	CreateAvailabilityBlockPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAvailabilityBlockPost(ctx context.Context, body CreateAvailabilityBlockPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAvailabilityBlockGet request
	GetAvailabilityBlockGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListBillableItemsGet request
	ListBillableItemsGet(ctx context.Context, params *ListBillableItemsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBillableItemPostWithBody request with any body
	CreateBillableItemPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBillableItemPost(ctx context.Context, body CreateBillableItemPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBillableItemDelete request
	DeleteBillableItemDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBillableItemGet request
	GetBillableItemGet(ctx context.Context, id string, params *GetBillableItemGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateBillableItemPatchWithBody request with any body
	UpdateBillableItemPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateBillableItemPatch(ctx context.Context, id string, body UpdateBillableItemPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveBillableItemPost request
	ArchiveBillableItemPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListBookingsGet request
	ListBookingsGet(ctx context.Context, params *ListBookingsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBookingGet request
	GetBookingGet(ctx context.Context, id string, params *GetBookingGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListBusinessesGet request
	ListBusinessesGet(ctx context.Context, params *ListBusinessesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBusinessPostWithBody request with any body
	CreateBusinessPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBusinessPost(ctx context.Context, body CreateBusinessPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDailyAvailabilitiesForBusinessGet request
	ListDailyAvailabilitiesForBusinessGet(ctx context.Context, businessId string, params *ListDailyAvailabilitiesForBusinessGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPractitionersForBusinessGet request
	ListPractitionersForBusinessGet(ctx context.Context, businessId string, params *ListPractitionersForBusinessGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListInactivePractitionersForBusinessGet request
	ListInactivePractitionersForBusinessGet(ctx context.Context, businessId string, params *ListInactivePractitionersForBusinessGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllAvailableTimesGet request
	GetAllAvailableTimesGet(ctx context.Context, businessId string, practitionerId string, appointmentTypeId string, params *GetAllAvailableTimesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNextAvailableTimeGet request
	GetNextAvailableTimeGet(ctx context.Context, businessId string, practitionerId string, appointmentTypeId string, params *GetNextAvailableTimeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServicesForBusinessGet request
	ListServicesForBusinessGet(ctx context.Context, businessId string, params *ListServicesForBusinessGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBusinessDelete request
	DeleteBusinessDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBusinessGet request
	GetBusinessGet(ctx context.Context, id string, params *GetBusinessGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateBusinessPatchWithBody request with any body
	UpdateBusinessPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateBusinessPatch(ctx context.Context, id string, body UpdateBusinessPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveBusinessPost request
	ArchiveBusinessPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnarchiveBusinessPost request
	UnarchiveBusinessPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCommunicationsGet request
	ListCommunicationsGet(ctx context.Context, params *ListCommunicationsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMemoCommunicationPostWithBody request with any body
	CreateMemoCommunicationPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMemoCommunicationPost(ctx context.Context, body CreateMemoCommunicationPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCommunicationGet request
	GetCommunicationGet(ctx context.Context, id string, params *GetCommunicationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMemoCommunicationPatchWithBody request with any body
	UpdateMemoCommunicationPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMemoCommunicationPatch(ctx context.Context, id string, body UpdateMemoCommunicationPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveMemoCommunicationPost request
	ArchiveMemoCommunicationPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListConcessionPricesGet request
	ListConcessionPricesGet(ctx context.Context, params *ListConcessionPricesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConcessionPriceGet request
	GetConcessionPriceGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListConcessionTypesGet request
	ListConcessionTypesGet(ctx context.Context, params *ListConcessionTypesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateConcessionTypePostWithBody request with any body
	CreateConcessionTypePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateConcessionTypePost(ctx context.Context, body CreateConcessionTypePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConcessionTypeGet request
	GetConcessionTypeGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateConcessionTypePatchWithBody request with any body
	UpdateConcessionTypePatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateConcessionTypePatch(ctx context.Context, id string, body UpdateConcessionTypePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListContactsGet request
	ListContactsGet(ctx context.Context, params *ListContactsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateContactPostWithBody request with any body
	CreateContactPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateContactPost(ctx context.Context, body CreateContactPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContactDelete request
	DeleteContactDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactGet request
	GetContactGet(ctx context.Context, id string, params *GetContactGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateContactPatchWithBody request with any body
	UpdateContactPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateContactPatch(ctx context.Context, id string, body UpdateContactPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveContactPost request
	ArchiveContactPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDailyAvailabilitiesGet request
	ListDailyAvailabilitiesGet(ctx context.Context, params *ListDailyAvailabilitiesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDailyAvailabilityGet request
	GetDailyAvailabilityGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListGroupAppointmentsGet request
	ListGroupAppointmentsGet(ctx context.Context, params *ListGroupAppointmentsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGroupAppointmentPostWithBody request with any body
	CreateGroupAppointmentPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateGroupAppointmentPost(ctx context.Context, body CreateGroupAppointmentPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAttendeesForGroupAppointmentGet request
	ListAttendeesForGroupAppointmentGet(ctx context.Context, groupAppointmentId string, params *ListAttendeesForGroupAppointmentGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGroupAppointmentDelete request
	DeleteGroupAppointmentDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupAppointmentGet request
	GetGroupAppointmentGet(ctx context.Context, id string, params *GetGroupAppointmentGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateGroupAppointmentPatchWithBody request with any body
	UpdateGroupAppointmentPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateGroupAppointmentPatch(ctx context.Context, id string, body UpdateGroupAppointmentPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveGroupAppointmentPost request
	ArchiveGroupAppointmentPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupAppointmentConflictsGet request
	GetGroupAppointmentConflictsGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIndividualAppointmentsGet request
	ListIndividualAppointmentsGet(ctx context.Context, params *ListIndividualAppointmentsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIndividualAppointmentPostWithBody request with any body
	CreateIndividualAppointmentPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIndividualAppointmentPost(ctx context.Context, body CreateIndividualAppointmentPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualAppointmentDelete request
	DeleteIndividualAppointmentDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndividualAppointmentGet request
	GetIndividualAppointmentGet(ctx context.Context, id string, params *GetIndividualAppointmentGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIndividualAppointmentPatchWithBody request with any body
	UpdateIndividualAppointmentPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIndividualAppointmentPatch(ctx context.Context, id string, body UpdateIndividualAppointmentPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveIndividualAppointmentPost request
	ArchiveIndividualAppointmentPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelIndividualAppointmentPatchWithBody request with any body
	CancelIndividualAppointmentPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelIndividualAppointmentPatch(ctx context.Context, id string, body CancelIndividualAppointmentPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndividualAppointmentConflictsGet request
	GetIndividualAppointmentConflictsGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAttendeesForIndividualAppointmentGet request
	ListAttendeesForIndividualAppointmentGet(ctx context.Context, individualAppointmentId string, params *ListAttendeesForIndividualAppointmentGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListInvoiceItemsGet request
	ListInvoiceItemsGet(ctx context.Context, params *ListInvoiceItemsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvoiceItemGet request
	GetInvoiceItemGet(ctx context.Context, id string, params *GetInvoiceItemGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListInvoicesGet request
	ListInvoicesGet(ctx context.Context, params *ListInvoicesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvoiceGet request
	GetInvoiceGet(ctx context.Context, id string, params *GetInvoiceGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListInvoiceItemsForInvoiceGet request
	ListInvoiceItemsForInvoiceGet(ctx context.Context, invoiceId string, params *ListInvoiceItemsForInvoiceGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMedicalAlertsGet request
	ListMedicalAlertsGet(ctx context.Context, params *ListMedicalAlertsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMedicalAlertPostWithBody request with any body
	CreateMedicalAlertPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMedicalAlertPost(ctx context.Context, body CreateMedicalAlertPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMedicalAlertDelete request
	DeleteMedicalAlertDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMedicalAlertGet request
	GetMedicalAlertGet(ctx context.Context, id string, params *GetMedicalAlertGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMedicalAlertPatchWithBody request with any body
	UpdateMedicalAlertPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMedicalAlertPatch(ctx context.Context, id string, body UpdateMedicalAlertPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveMedicalAlertPost request
	ArchiveMedicalAlertPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPatientAttachmentsGet request
	ListPatientAttachmentsGet(ctx context.Context, params *ListPatientAttachmentsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUploadedPatientAttachmentPostWithBody request with any body
	CreateUploadedPatientAttachmentPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUploadedPatientAttachmentPost(ctx context.Context, body CreateUploadedPatientAttachmentPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePatientAttachmentDelete request
	DeletePatientAttachmentDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPatientAttachmentGet request
	GetPatientAttachmentGet(ctx context.Context, id string, params *GetPatientAttachmentGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchivePatientAttachmentPost request
	ArchivePatientAttachmentPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPatientCasesGet request
	ListPatientCasesGet(ctx context.Context, params *ListPatientCasesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePatientCasePostWithBody request with any body
	CreatePatientCasePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePatientCasePost(ctx context.Context, body CreatePatientCasePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListActivePatientCasesGet request
	ListActivePatientCasesGet(ctx context.Context, params *ListActivePatientCasesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPatientCaseGet request
	GetPatientCaseGet(ctx context.Context, id string, params *GetPatientCaseGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePatientCasePatchWithBody request with any body
	UpdatePatientCasePatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePatientCasePatch(ctx context.Context, id string, body UpdatePatientCasePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchivePatientCasePost request
	ArchivePatientCasePost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAttendeesForPatientCaseGet request
	ListAttendeesForPatientCaseGet(ctx context.Context, patientCaseId string, params *ListAttendeesForPatientCaseGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListBookingsForPatientCaseGet request
	ListBookingsForPatientCaseGet(ctx context.Context, patientCaseId string, params *ListBookingsForPatientCaseGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListInvoicesForPatientCaseGet request
	ListInvoicesForPatientCaseGet(ctx context.Context, patientCaseId string, params *ListInvoicesForPatientCaseGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPatientAttachmentsForPatientCaseGet request
	ListPatientAttachmentsForPatientCaseGet(ctx context.Context, patientCaseId string, params *ListPatientAttachmentsForPatientCaseGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPatientFormTemplatesGet request
	ListPatientFormTemplatesGet(ctx context.Context, params *ListPatientFormTemplatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePatientFormTemplatePostWithBody request with any body
	CreatePatientFormTemplatePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePatientFormTemplatePost(ctx context.Context, body CreatePatientFormTemplatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPatientFormTemplateGet request
	GetPatientFormTemplateGet(ctx context.Context, id string, params *GetPatientFormTemplateGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePatientFormTemplatePatchWithBody request with any body
	UpdatePatientFormTemplatePatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePatientFormTemplatePatch(ctx context.Context, id string, body UpdatePatientFormTemplatePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchivePatientFormTemplatePost request
	ArchivePatientFormTemplatePost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPatientFormsGet request
	ListPatientFormsGet(ctx context.Context, params *ListPatientFormsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePatientFormPostWithBody request with any body
	CreatePatientFormPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePatientFormPost(ctx context.Context, body CreatePatientFormPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPatientFormGet request
	GetPatientFormGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePatientFormPatchWithBody request with any body
	UpdatePatientFormPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePatientFormPatch(ctx context.Context, id string, body UpdatePatientFormPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchivePatientFormPost request
	ArchivePatientFormPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSignatureGet request
	GetSignatureGet(ctx context.Context, patientFormId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPatientsGet request
	ListPatientsGet(ctx context.Context, params *ListPatientsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePatientPostWithBody request with any body
	CreatePatientPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePatientPost(ctx context.Context, body CreatePatientPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchivePatientDelete request
	ArchivePatientDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPatientGet request
	GetPatientGet(ctx context.Context, id string, params *GetPatientGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePatientPatchWithBody request with any body
	UpdatePatientPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePatientPatch(ctx context.Context, id string, body UpdatePatientPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchivePatientPost request
	ArchivePatientPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnarchivePatientPost request
	UnarchivePatientPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PresignedPostGet request
	PresignedPostGet(ctx context.Context, patientId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListInvoicesForPatientGet request
	ListInvoicesForPatientGet(ctx context.Context, patientId string, params *ListInvoicesForPatientGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMedicalAlertsForPatientGet request
	ListMedicalAlertsForPatientGet(ctx context.Context, patientId string, params *ListMedicalAlertsForPatientGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPatientAttachmentsForPatientGet request
	ListPatientAttachmentsForPatientGet(ctx context.Context, patientId string, params *ListPatientAttachmentsForPatientGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReferralSourceGet request
	GetReferralSourceGet(ctx context.Context, patientId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateReferralSourcePatchWithBody request with any body
	UpdateReferralSourcePatchWithBody(ctx context.Context, patientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateReferralSourcePatch(ctx context.Context, patientId string, body UpdateReferralSourcePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTreatmentNotesForPatientGet request
	ListTreatmentNotesForPatientGet(ctx context.Context, patientId string, params *ListTreatmentNotesForPatientGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPractitionerReferenceNumbersGet request
	ListPractitionerReferenceNumbersGet(ctx context.Context, params *ListPractitionerReferenceNumbersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePractitionerReferenceNumberPostWithBody request with any body
	CreatePractitionerReferenceNumberPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePractitionerReferenceNumberPost(ctx context.Context, body CreatePractitionerReferenceNumberPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePractitionerReferenceNumberDelete request
	DeletePractitionerReferenceNumberDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPractitionerReferenceNumberGet request
	GetPractitionerReferenceNumberGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePractitionerReferenceNumberPatchWithBody request with any body
	UpdatePractitionerReferenceNumberPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePractitionerReferenceNumberPatch(ctx context.Context, id string, body UpdatePractitionerReferenceNumberPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPractitionersGet request
	ListPractitionersGet(ctx context.Context, params *ListPractitionersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListInactivePractitionersGet request
	ListInactivePractitionersGet(ctx context.Context, params *ListInactivePractitionersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPractitionerGet request
	GetPractitionerGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAppointmentTypesForPractitionerGet request
	ListAppointmentTypesForPractitionerGet(ctx context.Context, practitionerId string, params *ListAppointmentTypesForPractitionerGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDailyAvailabilitiesForPractitionerGet request
	ListDailyAvailabilitiesForPractitionerGet(ctx context.Context, practitionerId string, params *ListDailyAvailabilitiesForPractitionerGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListInvoicesForPractitionerGet request
	ListInvoicesForPractitionerGet(ctx context.Context, practitionerId string, params *ListInvoicesForPractitionerGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPractitionerReferenceNumbersForPractitionerGet request
	ListPractitionerReferenceNumbersForPractitionerGet(ctx context.Context, practitionerId string, params *ListPractitionerReferenceNumbersForPractitionerGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListProductSuppliersGet request
	ListProductSuppliersGet(ctx context.Context, params *ListProductSuppliersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProductSupplierPostWithBody request with any body
	CreateProductSupplierPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProductSupplierPost(ctx context.Context, body CreateProductSupplierPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProductSupplierDelete request
	DeleteProductSupplierDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductSupplierGet request
	GetProductSupplierGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProductSupplierPatchWithBody request with any body
	UpdateProductSupplierPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProductSupplierPatch(ctx context.Context, id string, body UpdateProductSupplierPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveProductSupplierPost request
	ArchiveProductSupplierPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListProductsGet request
	ListProductsGet(ctx context.Context, params *ListProductsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProductPostWithBody request with any body
	CreateProductPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProductPost(ctx context.Context, body CreateProductPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProductDelete request
	DeleteProductDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductGet request
	GetProductGet(ctx context.Context, id string, params *GetProductGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProductPatchWithBody request with any body
	UpdateProductPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProductPatch(ctx context.Context, id string, body UpdateProductPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveProductPost request
	ArchiveProductPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListReferralSourceTypesGet request
	ListReferralSourceTypesGet(ctx context.Context, params *ListReferralSourceTypesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReferralSourceTypeGet request
	GetReferralSourceTypeGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListReferralSourcesGet request
	ListReferralSourcesGet(ctx context.Context, params *ListReferralSourcesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServicesGet request
	ListServicesGet(ctx context.Context, params *ListServicesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsGet request
	GetSettingsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicSettingsGet request
	GetPublicSettingsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListStockAdjustmentsGet request
	ListStockAdjustmentsGet(ctx context.Context, params *ListStockAdjustmentsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStockAdjustmentPostWithBody request with any body
	CreateStockAdjustmentPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateStockAdjustmentPost(ctx context.Context, body CreateStockAdjustmentPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStockAdjustmentGet request
	GetStockAdjustmentGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTaxesGet request
	ListTaxesGet(ctx context.Context, params *ListTaxesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTaxPostWithBody request with any body
	CreateTaxPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTaxPost(ctx context.Context, body CreateTaxPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTaxDelete request
	DeleteTaxDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxGet request
	GetTaxGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTaxPatchWithBody request with any body
	UpdateTaxPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTaxPatch(ctx context.Context, id string, body UpdateTaxPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTreatmentNoteTemplatesGet request
	ListTreatmentNoteTemplatesGet(ctx context.Context, params *ListTreatmentNoteTemplatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTreatmentNoteTemplatePostWithBody request with any body
	CreateTreatmentNoteTemplatePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTreatmentNoteTemplatePost(ctx context.Context, body CreateTreatmentNoteTemplatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTreatmentNoteTemplateDelete request
	DeleteTreatmentNoteTemplateDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTreatmentNoteTemplateGet request
	GetTreatmentNoteTemplateGet(ctx context.Context, id string, params *GetTreatmentNoteTemplateGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTreatmentNoteTemplatePatchWithBody request with any body
	UpdateTreatmentNoteTemplatePatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTreatmentNoteTemplatePatch(ctx context.Context, id string, body UpdateTreatmentNoteTemplatePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveTreatmentNoteTemplatePost request
	ArchiveTreatmentNoteTemplatePost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTreatmentNotesGet request
	ListTreatmentNotesGet(ctx context.Context, params *ListTreatmentNotesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTreatmentNotePostWithBody request with any body
	CreateTreatmentNotePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTreatmentNotePost(ctx context.Context, body CreateTreatmentNotePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTreatmentNoteDelete request
	DeleteTreatmentNoteDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTreatmentNoteGet request
	GetTreatmentNoteGet(ctx context.Context, id string, params *GetTreatmentNoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTreatmentNotePatchWithBody request with any body
	UpdateTreatmentNotePatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTreatmentNotePatch(ctx context.Context, id string, body UpdateTreatmentNotePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveTreatmentNotePost request
	ArchiveTreatmentNotePost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUnavailableBlocksGet request
	ListUnavailableBlocksGet(ctx context.Context, params *ListUnavailableBlocksGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUnavailableBlockPostWithBody request with any body
	CreateUnavailableBlockPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUnavailableBlockPost(ctx context.Context, body CreateUnavailableBlockPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUnavailableBlockDelete request
	DeleteUnavailableBlockDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUnavailableBlockGet request
	GetUnavailableBlockGet(ctx context.Context, id string, params *GetUnavailableBlockGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUnavailableBlockPatchWithBody request with any body
	UpdateUnavailableBlockPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUnavailableBlockPatch(ctx context.Context, id string, body UpdateUnavailableBlockPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveUnavailableBlockPost request
	ArchiveUnavailableBlockPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUnavailableBlockConflictsGet request
	GetUnavailableBlockConflictsGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthenticatedUserGet request
	GetAuthenticatedUserGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsersGet request
	ListUsersGet(ctx context.Context, params *ListUsersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserGet request
	GetUserGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListAppointmentTypesGet(ctx context.Context, params *ListAppointmentTypesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAppointmentTypesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAppointmentTypePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAppointmentTypePostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAppointmentTypePost(ctx context.Context, body CreateAppointmentTypePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAppointmentTypePostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPractitionersForAppointmentTypeGet(ctx context.Context, appointmentTypeId string, params *ListPractitionersForAppointmentTypeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPractitionersForAppointmentTypeGetRequest(c.Server, appointmentTypeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListInactivePractitionersForAppointmentTypeGet(ctx context.Context, appointmentTypeId string, params *ListInactivePractitionersForAppointmentTypeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInactivePractitionersForAppointmentTypeGetRequest(c.Server, appointmentTypeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAppointmentTypeDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAppointmentTypeDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAppointmentTypeGet(ctx context.Context, id string, params *GetAppointmentTypeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppointmentTypeGetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAppointmentTypePatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAppointmentTypePatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAppointmentTypePatch(ctx context.Context, id string, body UpdateAppointmentTypePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAppointmentTypePatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveAppointmentTypePost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveAppointmentTypePostRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListInvoicesForAppointmentGet(ctx context.Context, appointmentId string, params *ListInvoicesForAppointmentGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInvoicesForAppointmentGetRequest(c.Server, appointmentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAttendeesGet(ctx context.Context, params *ListAttendeesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAttendeesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAttendeePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAttendeePostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAttendeePost(ctx context.Context, body CreateAttendeePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAttendeePostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListInvoicesForAttendeeGet(ctx context.Context, attendeeId string, params *ListInvoicesForAttendeeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInvoicesForAttendeeGetRequest(c.Server, attendeeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPatientFormsForAttendeeGet(ctx context.Context, attendeeId string, params *ListPatientFormsForAttendeeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPatientFormsForAttendeeGetRequest(c.Server, attendeeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAttendeeDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAttendeeDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAttendeeGet(ctx context.Context, id string, params *GetAttendeeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAttendeeGetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAttendeePatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAttendeePatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAttendeePatch(ctx context.Context, id string, body UpdateAttendeePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAttendeePatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveAttendeePost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveAttendeePostRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelAttendeePatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelAttendeePatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelAttendeePatch(ctx context.Context, id string, body CancelAttendeePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelAttendeePatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAvailabilityBlocksGet(ctx context.Context, params *ListAvailabilityBlocksGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAvailabilityBlocksGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAvailabilityBlockPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAvailabilityBlockPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAvailabilityBlockPost(ctx context.Context, body CreateAvailabilityBlockPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAvailabilityBlockPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAvailabilityBlockGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAvailabilityBlockGetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListBillableItemsGet(ctx context.Context, params *ListBillableItemsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBillableItemsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBillableItemPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBillableItemPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBillableItemPost(ctx context.Context, body CreateBillableItemPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBillableItemPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBillableItemDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBillableItemDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBillableItemGet(ctx context.Context, id string, params *GetBillableItemGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBillableItemGetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBillableItemPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBillableItemPatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBillableItemPatch(ctx context.Context, id string, body UpdateBillableItemPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBillableItemPatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveBillableItemPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveBillableItemPostRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListBookingsGet(ctx context.Context, params *ListBookingsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBookingsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBookingGet(ctx context.Context, id string, params *GetBookingGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBookingGetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListBusinessesGet(ctx context.Context, params *ListBusinessesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBusinessesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBusinessPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBusinessPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBusinessPost(ctx context.Context, body CreateBusinessPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBusinessPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDailyAvailabilitiesForBusinessGet(ctx context.Context, businessId string, params *ListDailyAvailabilitiesForBusinessGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDailyAvailabilitiesForBusinessGetRequest(c.Server, businessId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPractitionersForBusinessGet(ctx context.Context, businessId string, params *ListPractitionersForBusinessGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPractitionersForBusinessGetRequest(c.Server, businessId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListInactivePractitionersForBusinessGet(ctx context.Context, businessId string, params *ListInactivePractitionersForBusinessGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInactivePractitionersForBusinessGetRequest(c.Server, businessId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllAvailableTimesGet(ctx context.Context, businessId string, practitionerId string, appointmentTypeId string, params *GetAllAvailableTimesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllAvailableTimesGetRequest(c.Server, businessId, practitionerId, appointmentTypeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNextAvailableTimeGet(ctx context.Context, businessId string, practitionerId string, appointmentTypeId string, params *GetNextAvailableTimeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNextAvailableTimeGetRequest(c.Server, businessId, practitionerId, appointmentTypeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServicesForBusinessGet(ctx context.Context, businessId string, params *ListServicesForBusinessGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServicesForBusinessGetRequest(c.Server, businessId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBusinessDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBusinessDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBusinessGet(ctx context.Context, id string, params *GetBusinessGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBusinessGetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBusinessPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBusinessPatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBusinessPatch(ctx context.Context, id string, body UpdateBusinessPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBusinessPatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveBusinessPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveBusinessPostRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnarchiveBusinessPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnarchiveBusinessPostRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCommunicationsGet(ctx context.Context, params *ListCommunicationsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCommunicationsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMemoCommunicationPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMemoCommunicationPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMemoCommunicationPost(ctx context.Context, body CreateMemoCommunicationPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMemoCommunicationPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCommunicationGet(ctx context.Context, id string, params *GetCommunicationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCommunicationGetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMemoCommunicationPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMemoCommunicationPatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMemoCommunicationPatch(ctx context.Context, id string, body UpdateMemoCommunicationPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMemoCommunicationPatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveMemoCommunicationPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveMemoCommunicationPostRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListConcessionPricesGet(ctx context.Context, params *ListConcessionPricesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListConcessionPricesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConcessionPriceGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConcessionPriceGetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListConcessionTypesGet(ctx context.Context, params *ListConcessionTypesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListConcessionTypesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConcessionTypePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConcessionTypePostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConcessionTypePost(ctx context.Context, body CreateConcessionTypePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConcessionTypePostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConcessionTypeGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConcessionTypeGetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConcessionTypePatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConcessionTypePatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConcessionTypePatch(ctx context.Context, id string, body UpdateConcessionTypePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConcessionTypePatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListContactsGet(ctx context.Context, params *ListContactsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListContactsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContactPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContactPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContactPost(ctx context.Context, body CreateContactPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContactPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContactDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContactDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactGet(ctx context.Context, id string, params *GetContactGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactGetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContactPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContactPatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContactPatch(ctx context.Context, id string, body UpdateContactPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContactPatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveContactPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveContactPostRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDailyAvailabilitiesGet(ctx context.Context, params *ListDailyAvailabilitiesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDailyAvailabilitiesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDailyAvailabilityGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDailyAvailabilityGetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListGroupAppointmentsGet(ctx context.Context, params *ListGroupAppointmentsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListGroupAppointmentsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGroupAppointmentPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGroupAppointmentPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGroupAppointmentPost(ctx context.Context, body CreateGroupAppointmentPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGroupAppointmentPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAttendeesForGroupAppointmentGet(ctx context.Context, groupAppointmentId string, params *ListAttendeesForGroupAppointmentGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAttendeesForGroupAppointmentGetRequest(c.Server, groupAppointmentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroupAppointmentDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupAppointmentDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupAppointmentGet(ctx context.Context, id string, params *GetGroupAppointmentGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupAppointmentGetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGroupAppointmentPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGroupAppointmentPatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGroupAppointmentPatch(ctx context.Context, id string, body UpdateGroupAppointmentPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGroupAppointmentPatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveGroupAppointmentPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveGroupAppointmentPostRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupAppointmentConflictsGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupAppointmentConflictsGetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIndividualAppointmentsGet(ctx context.Context, params *ListIndividualAppointmentsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIndividualAppointmentsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualAppointmentPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualAppointmentPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualAppointmentPost(ctx context.Context, body CreateIndividualAppointmentPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualAppointmentPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualAppointmentDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualAppointmentDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndividualAppointmentGet(ctx context.Context, id string, params *GetIndividualAppointmentGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndividualAppointmentGetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIndividualAppointmentPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIndividualAppointmentPatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIndividualAppointmentPatch(ctx context.Context, id string, body UpdateIndividualAppointmentPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIndividualAppointmentPatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveIndividualAppointmentPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveIndividualAppointmentPostRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelIndividualAppointmentPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelIndividualAppointmentPatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelIndividualAppointmentPatch(ctx context.Context, id string, body CancelIndividualAppointmentPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelIndividualAppointmentPatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndividualAppointmentConflictsGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndividualAppointmentConflictsGetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAttendeesForIndividualAppointmentGet(ctx context.Context, individualAppointmentId string, params *ListAttendeesForIndividualAppointmentGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAttendeesForIndividualAppointmentGetRequest(c.Server, individualAppointmentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListInvoiceItemsGet(ctx context.Context, params *ListInvoiceItemsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInvoiceItemsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoiceItemGet(ctx context.Context, id string, params *GetInvoiceItemGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvoiceItemGetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListInvoicesGet(ctx context.Context, params *ListInvoicesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInvoicesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoiceGet(ctx context.Context, id string, params *GetInvoiceGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvoiceGetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListInvoiceItemsForInvoiceGet(ctx context.Context, invoiceId string, params *ListInvoiceItemsForInvoiceGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInvoiceItemsForInvoiceGetRequest(c.Server, invoiceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMedicalAlertsGet(ctx context.Context, params *ListMedicalAlertsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMedicalAlertsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMedicalAlertPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMedicalAlertPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMedicalAlertPost(ctx context.Context, body CreateMedicalAlertPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMedicalAlertPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMedicalAlertDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMedicalAlertDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMedicalAlertGet(ctx context.Context, id string, params *GetMedicalAlertGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMedicalAlertGetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMedicalAlertPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMedicalAlertPatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMedicalAlertPatch(ctx context.Context, id string, body UpdateMedicalAlertPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMedicalAlertPatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveMedicalAlertPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveMedicalAlertPostRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPatientAttachmentsGet(ctx context.Context, params *ListPatientAttachmentsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPatientAttachmentsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUploadedPatientAttachmentPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUploadedPatientAttachmentPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUploadedPatientAttachmentPost(ctx context.Context, body CreateUploadedPatientAttachmentPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUploadedPatientAttachmentPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePatientAttachmentDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePatientAttachmentDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPatientAttachmentGet(ctx context.Context, id string, params *GetPatientAttachmentGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatientAttachmentGetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchivePatientAttachmentPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchivePatientAttachmentPostRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPatientCasesGet(ctx context.Context, params *ListPatientCasesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPatientCasesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePatientCasePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePatientCasePostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePatientCasePost(ctx context.Context, body CreatePatientCasePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePatientCasePostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListActivePatientCasesGet(ctx context.Context, params *ListActivePatientCasesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListActivePatientCasesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPatientCaseGet(ctx context.Context, id string, params *GetPatientCaseGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatientCaseGetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePatientCasePatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePatientCasePatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePatientCasePatch(ctx context.Context, id string, body UpdatePatientCasePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePatientCasePatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchivePatientCasePost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchivePatientCasePostRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAttendeesForPatientCaseGet(ctx context.Context, patientCaseId string, params *ListAttendeesForPatientCaseGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAttendeesForPatientCaseGetRequest(c.Server, patientCaseId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListBookingsForPatientCaseGet(ctx context.Context, patientCaseId string, params *ListBookingsForPatientCaseGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBookingsForPatientCaseGetRequest(c.Server, patientCaseId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListInvoicesForPatientCaseGet(ctx context.Context, patientCaseId string, params *ListInvoicesForPatientCaseGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInvoicesForPatientCaseGetRequest(c.Server, patientCaseId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPatientAttachmentsForPatientCaseGet(ctx context.Context, patientCaseId string, params *ListPatientAttachmentsForPatientCaseGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPatientAttachmentsForPatientCaseGetRequest(c.Server, patientCaseId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPatientFormTemplatesGet(ctx context.Context, params *ListPatientFormTemplatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPatientFormTemplatesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePatientFormTemplatePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePatientFormTemplatePostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePatientFormTemplatePost(ctx context.Context, body CreatePatientFormTemplatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePatientFormTemplatePostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPatientFormTemplateGet(ctx context.Context, id string, params *GetPatientFormTemplateGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatientFormTemplateGetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePatientFormTemplatePatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePatientFormTemplatePatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePatientFormTemplatePatch(ctx context.Context, id string, body UpdatePatientFormTemplatePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePatientFormTemplatePatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchivePatientFormTemplatePost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchivePatientFormTemplatePostRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPatientFormsGet(ctx context.Context, params *ListPatientFormsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPatientFormsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePatientFormPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePatientFormPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePatientFormPost(ctx context.Context, body CreatePatientFormPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePatientFormPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPatientFormGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatientFormGetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePatientFormPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePatientFormPatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePatientFormPatch(ctx context.Context, id string, body UpdatePatientFormPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePatientFormPatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchivePatientFormPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchivePatientFormPostRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSignatureGet(ctx context.Context, patientFormId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSignatureGetRequest(c.Server, patientFormId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPatientsGet(ctx context.Context, params *ListPatientsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPatientsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePatientPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePatientPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePatientPost(ctx context.Context, body CreatePatientPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePatientPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchivePatientDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchivePatientDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPatientGet(ctx context.Context, id string, params *GetPatientGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatientGetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePatientPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePatientPatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePatientPatch(ctx context.Context, id string, body UpdatePatientPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePatientPatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchivePatientPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchivePatientPostRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnarchivePatientPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnarchivePatientPostRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PresignedPostGet(ctx context.Context, patientId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPresignedPostGetRequest(c.Server, patientId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListInvoicesForPatientGet(ctx context.Context, patientId string, params *ListInvoicesForPatientGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInvoicesForPatientGetRequest(c.Server, patientId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMedicalAlertsForPatientGet(ctx context.Context, patientId string, params *ListMedicalAlertsForPatientGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMedicalAlertsForPatientGetRequest(c.Server, patientId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPatientAttachmentsForPatientGet(ctx context.Context, patientId string, params *ListPatientAttachmentsForPatientGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPatientAttachmentsForPatientGetRequest(c.Server, patientId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReferralSourceGet(ctx context.Context, patientId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReferralSourceGetRequest(c.Server, patientId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateReferralSourcePatchWithBody(ctx context.Context, patientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateReferralSourcePatchRequestWithBody(c.Server, patientId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateReferralSourcePatch(ctx context.Context, patientId string, body UpdateReferralSourcePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateReferralSourcePatchRequest(c.Server, patientId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTreatmentNotesForPatientGet(ctx context.Context, patientId string, params *ListTreatmentNotesForPatientGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTreatmentNotesForPatientGetRequest(c.Server, patientId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPractitionerReferenceNumbersGet(ctx context.Context, params *ListPractitionerReferenceNumbersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPractitionerReferenceNumbersGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePractitionerReferenceNumberPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePractitionerReferenceNumberPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePractitionerReferenceNumberPost(ctx context.Context, body CreatePractitionerReferenceNumberPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePractitionerReferenceNumberPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePractitionerReferenceNumberDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePractitionerReferenceNumberDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPractitionerReferenceNumberGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPractitionerReferenceNumberGetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePractitionerReferenceNumberPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePractitionerReferenceNumberPatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePractitionerReferenceNumberPatch(ctx context.Context, id string, body UpdatePractitionerReferenceNumberPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePractitionerReferenceNumberPatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPractitionersGet(ctx context.Context, params *ListPractitionersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPractitionersGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListInactivePractitionersGet(ctx context.Context, params *ListInactivePractitionersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInactivePractitionersGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPractitionerGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPractitionerGetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAppointmentTypesForPractitionerGet(ctx context.Context, practitionerId string, params *ListAppointmentTypesForPractitionerGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAppointmentTypesForPractitionerGetRequest(c.Server, practitionerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDailyAvailabilitiesForPractitionerGet(ctx context.Context, practitionerId string, params *ListDailyAvailabilitiesForPractitionerGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDailyAvailabilitiesForPractitionerGetRequest(c.Server, practitionerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListInvoicesForPractitionerGet(ctx context.Context, practitionerId string, params *ListInvoicesForPractitionerGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInvoicesForPractitionerGetRequest(c.Server, practitionerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPractitionerReferenceNumbersForPractitionerGet(ctx context.Context, practitionerId string, params *ListPractitionerReferenceNumbersForPractitionerGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPractitionerReferenceNumbersForPractitionerGetRequest(c.Server, practitionerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProductSuppliersGet(ctx context.Context, params *ListProductSuppliersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProductSuppliersGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProductSupplierPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProductSupplierPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProductSupplierPost(ctx context.Context, body CreateProductSupplierPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProductSupplierPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProductSupplierDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProductSupplierDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductSupplierGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductSupplierGetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProductSupplierPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProductSupplierPatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProductSupplierPatch(ctx context.Context, id string, body UpdateProductSupplierPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProductSupplierPatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveProductSupplierPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveProductSupplierPostRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProductsGet(ctx context.Context, params *ListProductsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProductsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProductPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProductPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProductPost(ctx context.Context, body CreateProductPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProductPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProductDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProductDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductGet(ctx context.Context, id string, params *GetProductGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductGetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProductPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProductPatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProductPatch(ctx context.Context, id string, body UpdateProductPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProductPatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveProductPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveProductPostRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListReferralSourceTypesGet(ctx context.Context, params *ListReferralSourceTypesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListReferralSourceTypesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReferralSourceTypeGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReferralSourceTypeGetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListReferralSourcesGet(ctx context.Context, params *ListReferralSourcesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListReferralSourcesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServicesGet(ctx context.Context, params *ListServicesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServicesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicSettingsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicSettingsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListStockAdjustmentsGet(ctx context.Context, params *ListStockAdjustmentsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListStockAdjustmentsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStockAdjustmentPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStockAdjustmentPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStockAdjustmentPost(ctx context.Context, body CreateStockAdjustmentPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStockAdjustmentPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStockAdjustmentGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStockAdjustmentGetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTaxesGet(ctx context.Context, params *ListTaxesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTaxesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTaxPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTaxPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTaxPost(ctx context.Context, body CreateTaxPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTaxPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTaxDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTaxDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxGetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTaxPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTaxPatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTaxPatch(ctx context.Context, id string, body UpdateTaxPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTaxPatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTreatmentNoteTemplatesGet(ctx context.Context, params *ListTreatmentNoteTemplatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTreatmentNoteTemplatesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTreatmentNoteTemplatePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTreatmentNoteTemplatePostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTreatmentNoteTemplatePost(ctx context.Context, body CreateTreatmentNoteTemplatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTreatmentNoteTemplatePostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTreatmentNoteTemplateDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTreatmentNoteTemplateDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTreatmentNoteTemplateGet(ctx context.Context, id string, params *GetTreatmentNoteTemplateGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTreatmentNoteTemplateGetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTreatmentNoteTemplatePatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTreatmentNoteTemplatePatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTreatmentNoteTemplatePatch(ctx context.Context, id string, body UpdateTreatmentNoteTemplatePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTreatmentNoteTemplatePatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveTreatmentNoteTemplatePost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveTreatmentNoteTemplatePostRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTreatmentNotesGet(ctx context.Context, params *ListTreatmentNotesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTreatmentNotesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTreatmentNotePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTreatmentNotePostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTreatmentNotePost(ctx context.Context, body CreateTreatmentNotePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTreatmentNotePostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTreatmentNoteDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTreatmentNoteDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTreatmentNoteGet(ctx context.Context, id string, params *GetTreatmentNoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTreatmentNoteGetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTreatmentNotePatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTreatmentNotePatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTreatmentNotePatch(ctx context.Context, id string, body UpdateTreatmentNotePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTreatmentNotePatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveTreatmentNotePost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveTreatmentNotePostRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUnavailableBlocksGet(ctx context.Context, params *ListUnavailableBlocksGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUnavailableBlocksGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUnavailableBlockPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUnavailableBlockPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUnavailableBlockPost(ctx context.Context, body CreateUnavailableBlockPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUnavailableBlockPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUnavailableBlockDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUnavailableBlockDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUnavailableBlockGet(ctx context.Context, id string, params *GetUnavailableBlockGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUnavailableBlockGetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUnavailableBlockPatchWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUnavailableBlockPatchRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUnavailableBlockPatch(ctx context.Context, id string, body UpdateUnavailableBlockPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUnavailableBlockPatchRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveUnavailableBlockPost(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveUnavailableBlockPostRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUnavailableBlockConflictsGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUnavailableBlockConflictsGetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthenticatedUserGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthenticatedUserGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsersGet(ctx context.Context, params *ListUsersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsersGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserGetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListAppointmentTypesGetRequest generates requests for ListAppointmentTypesGet
func NewListAppointmentTypesGetRequest(server string, params *ListAppointmentTypesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appointment_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAppointmentTypePostRequest calls the generic CreateAppointmentTypePost builder with application/json body
func NewCreateAppointmentTypePostRequest(server string, body CreateAppointmentTypePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAppointmentTypePostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAppointmentTypePostRequestWithBody generates requests for CreateAppointmentTypePost with any type of body
func NewCreateAppointmentTypePostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appointment_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPractitionersForAppointmentTypeGetRequest generates requests for ListPractitionersForAppointmentTypeGet
func NewListPractitionersForAppointmentTypeGetRequest(server string, appointmentTypeId string, params *ListPractitionersForAppointmentTypeGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appointment_type_id", runtime.ParamLocationPath, appointmentTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appointment_types/%s/practitioners", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListInactivePractitionersForAppointmentTypeGetRequest generates requests for ListInactivePractitionersForAppointmentTypeGet
func NewListInactivePractitionersForAppointmentTypeGetRequest(server string, appointmentTypeId string, params *ListInactivePractitionersForAppointmentTypeGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appointment_type_id", runtime.ParamLocationPath, appointmentTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appointment_types/%s/practitioners/inactive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAppointmentTypeDeleteRequest generates requests for DeleteAppointmentTypeDelete
func NewDeleteAppointmentTypeDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appointment_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAppointmentTypeGetRequest generates requests for GetAppointmentTypeGet
func NewGetAppointmentTypeGetRequest(server string, id string, params *GetAppointmentTypeGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appointment_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAppointmentTypePatchRequest calls the generic UpdateAppointmentTypePatch builder with application/json body
func NewUpdateAppointmentTypePatchRequest(server string, id string, body UpdateAppointmentTypePatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAppointmentTypePatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateAppointmentTypePatchRequestWithBody generates requests for UpdateAppointmentTypePatch with any type of body
func NewUpdateAppointmentTypePatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appointment_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveAppointmentTypePostRequest generates requests for ArchiveAppointmentTypePost
func NewArchiveAppointmentTypePostRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appointment_types/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListInvoicesForAppointmentGetRequest generates requests for ListInvoicesForAppointmentGet
func NewListInvoicesForAppointmentGetRequest(server string, appointmentId string, params *ListInvoicesForAppointmentGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appointment_id", runtime.ParamLocationPath, appointmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appointments/%s/invoices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAttendeesGetRequest generates requests for ListAttendeesGet
func NewListAttendeesGetRequest(server string, params *ListAttendeesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attendees")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAttendeePostRequest calls the generic CreateAttendeePost builder with application/json body
func NewCreateAttendeePostRequest(server string, body CreateAttendeePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAttendeePostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAttendeePostRequestWithBody generates requests for CreateAttendeePost with any type of body
func NewCreateAttendeePostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attendees")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListInvoicesForAttendeeGetRequest generates requests for ListInvoicesForAttendeeGet
func NewListInvoicesForAttendeeGetRequest(server string, attendeeId string, params *ListInvoicesForAttendeeGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "attendee_id", runtime.ParamLocationPath, attendeeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attendees/%s/invoices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPatientFormsForAttendeeGetRequest generates requests for ListPatientFormsForAttendeeGet
func NewListPatientFormsForAttendeeGetRequest(server string, attendeeId string, params *ListPatientFormsForAttendeeGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "attendee_id", runtime.ParamLocationPath, attendeeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attendees/%s/patient_forms", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAttendeeDeleteRequest generates requests for DeleteAttendeeDelete
func NewDeleteAttendeeDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attendees/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAttendeeGetRequest generates requests for GetAttendeeGet
func NewGetAttendeeGetRequest(server string, id string, params *GetAttendeeGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attendees/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAttendeePatchRequest calls the generic UpdateAttendeePatch builder with application/json body
func NewUpdateAttendeePatchRequest(server string, id string, body UpdateAttendeePatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAttendeePatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateAttendeePatchRequestWithBody generates requests for UpdateAttendeePatch with any type of body
func NewUpdateAttendeePatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attendees/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveAttendeePostRequest generates requests for ArchiveAttendeePost
func NewArchiveAttendeePostRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attendees/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelAttendeePatchRequest calls the generic CancelAttendeePatch builder with application/json body
func NewCancelAttendeePatchRequest(server string, id string, body CancelAttendeePatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCancelAttendeePatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCancelAttendeePatchRequestWithBody generates requests for CancelAttendeePatch with any type of body
func NewCancelAttendeePatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attendees/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAvailabilityBlocksGetRequest generates requests for ListAvailabilityBlocksGet
func NewListAvailabilityBlocksGetRequest(server string, params *ListAvailabilityBlocksGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/availability_blocks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAvailabilityBlockPostRequest calls the generic CreateAvailabilityBlockPost builder with application/json body
func NewCreateAvailabilityBlockPostRequest(server string, body CreateAvailabilityBlockPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAvailabilityBlockPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAvailabilityBlockPostRequestWithBody generates requests for CreateAvailabilityBlockPost with any type of body
func NewCreateAvailabilityBlockPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/availability_blocks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAvailabilityBlockGetRequest generates requests for GetAvailabilityBlockGet
func NewGetAvailabilityBlockGetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/availability_blocks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListBillableItemsGetRequest generates requests for ListBillableItemsGet
func NewListBillableItemsGetRequest(server string, params *ListBillableItemsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billable_items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBillableItemPostRequest calls the generic CreateBillableItemPost builder with application/json body
func NewCreateBillableItemPostRequest(server string, body CreateBillableItemPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBillableItemPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateBillableItemPostRequestWithBody generates requests for CreateBillableItemPost with any type of body
func NewCreateBillableItemPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billable_items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBillableItemDeleteRequest generates requests for DeleteBillableItemDelete
func NewDeleteBillableItemDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billable_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBillableItemGetRequest generates requests for GetBillableItemGet
func NewGetBillableItemGetRequest(server string, id string, params *GetBillableItemGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billable_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateBillableItemPatchRequest calls the generic UpdateBillableItemPatch builder with application/json body
func NewUpdateBillableItemPatchRequest(server string, id string, body UpdateBillableItemPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateBillableItemPatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateBillableItemPatchRequestWithBody generates requests for UpdateBillableItemPatch with any type of body
func NewUpdateBillableItemPatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billable_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveBillableItemPostRequest generates requests for ArchiveBillableItemPost
func NewArchiveBillableItemPostRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billable_items/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListBookingsGetRequest generates requests for ListBookingsGet
func NewListBookingsGetRequest(server string, params *ListBookingsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBookingGetRequest generates requests for GetBookingGet
func NewGetBookingGetRequest(server string, id string, params *GetBookingGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListBusinessesGetRequest generates requests for ListBusinessesGet
func NewListBusinessesGetRequest(server string, params *ListBusinessesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/businesses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBusinessPostRequest calls the generic CreateBusinessPost builder with application/json body
func NewCreateBusinessPostRequest(server string, body CreateBusinessPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBusinessPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateBusinessPostRequestWithBody generates requests for CreateBusinessPost with any type of body
func NewCreateBusinessPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/businesses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDailyAvailabilitiesForBusinessGetRequest generates requests for ListDailyAvailabilitiesForBusinessGet
func NewListDailyAvailabilitiesForBusinessGetRequest(server string, businessId string, params *ListDailyAvailabilitiesForBusinessGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "business_id", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/businesses/%s/daily_availabilities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPractitionersForBusinessGetRequest generates requests for ListPractitionersForBusinessGet
func NewListPractitionersForBusinessGetRequest(server string, businessId string, params *ListPractitionersForBusinessGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "business_id", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/businesses/%s/practitioners", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListInactivePractitionersForBusinessGetRequest generates requests for ListInactivePractitionersForBusinessGet
func NewListInactivePractitionersForBusinessGetRequest(server string, businessId string, params *ListInactivePractitionersForBusinessGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "business_id", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/businesses/%s/practitioners/inactive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllAvailableTimesGetRequest generates requests for GetAllAvailableTimesGet
func NewGetAllAvailableTimesGetRequest(server string, businessId string, practitionerId string, appointmentTypeId string, params *GetAllAvailableTimesGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "business_id", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "practitioner_id", runtime.ParamLocationPath, practitionerId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "appointment_type_id", runtime.ParamLocationPath, appointmentTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/businesses/%s/practitioners/%s/appointment_types/%s/available_times", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, params.To); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNextAvailableTimeGetRequest generates requests for GetNextAvailableTimeGet
func NewGetNextAvailableTimeGetRequest(server string, businessId string, practitionerId string, appointmentTypeId string, params *GetNextAvailableTimeGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "business_id", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "practitioner_id", runtime.ParamLocationPath, practitionerId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "appointment_type_id", runtime.ParamLocationPath, appointmentTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/businesses/%s/practitioners/%s/appointment_types/%s/next_available_time", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, params.To); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListServicesForBusinessGetRequest generates requests for ListServicesForBusinessGet
func NewListServicesForBusinessGetRequest(server string, businessId string, params *ListServicesForBusinessGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "business_id", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/businesses/%s/services", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteBusinessDeleteRequest generates requests for DeleteBusinessDelete
func NewDeleteBusinessDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/businesses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBusinessGetRequest generates requests for GetBusinessGet
func NewGetBusinessGetRequest(server string, id string, params *GetBusinessGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/businesses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateBusinessPatchRequest calls the generic UpdateBusinessPatch builder with application/json body
func NewUpdateBusinessPatchRequest(server string, id string, body UpdateBusinessPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateBusinessPatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateBusinessPatchRequestWithBody generates requests for UpdateBusinessPatch with any type of body
func NewUpdateBusinessPatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/businesses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveBusinessPostRequest generates requests for ArchiveBusinessPost
func NewArchiveBusinessPostRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/businesses/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUnarchiveBusinessPostRequest generates requests for UnarchiveBusinessPost
func NewUnarchiveBusinessPostRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/businesses/%s/unarchive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListCommunicationsGetRequest generates requests for ListCommunicationsGet
func NewListCommunicationsGetRequest(server string, params *ListCommunicationsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/communications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMemoCommunicationPostRequest calls the generic CreateMemoCommunicationPost builder with application/json body
func NewCreateMemoCommunicationPostRequest(server string, body CreateMemoCommunicationPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMemoCommunicationPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateMemoCommunicationPostRequestWithBody generates requests for CreateMemoCommunicationPost with any type of body
func NewCreateMemoCommunicationPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/communications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCommunicationGetRequest generates requests for GetCommunicationGet
func NewGetCommunicationGetRequest(server string, id string, params *GetCommunicationGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/communications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateMemoCommunicationPatchRequest calls the generic UpdateMemoCommunicationPatch builder with application/json body
func NewUpdateMemoCommunicationPatchRequest(server string, id string, body UpdateMemoCommunicationPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMemoCommunicationPatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateMemoCommunicationPatchRequestWithBody generates requests for UpdateMemoCommunicationPatch with any type of body
func NewUpdateMemoCommunicationPatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/communications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveMemoCommunicationPostRequest generates requests for ArchiveMemoCommunicationPost
func NewArchiveMemoCommunicationPostRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/communications/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListConcessionPricesGetRequest generates requests for ListConcessionPricesGet
func NewListConcessionPricesGetRequest(server string, params *ListConcessionPricesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/concession_prices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConcessionPriceGetRequest generates requests for GetConcessionPriceGet
func NewGetConcessionPriceGetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/concession_prices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListConcessionTypesGetRequest generates requests for ListConcessionTypesGet
func NewListConcessionTypesGetRequest(server string, params *ListConcessionTypesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/concession_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateConcessionTypePostRequest calls the generic CreateConcessionTypePost builder with application/json body
func NewCreateConcessionTypePostRequest(server string, body CreateConcessionTypePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateConcessionTypePostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateConcessionTypePostRequestWithBody generates requests for CreateConcessionTypePost with any type of body
func NewCreateConcessionTypePostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/concession_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConcessionTypeGetRequest generates requests for GetConcessionTypeGet
func NewGetConcessionTypeGetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/concession_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateConcessionTypePatchRequest calls the generic UpdateConcessionTypePatch builder with application/json body
func NewUpdateConcessionTypePatchRequest(server string, id string, body UpdateConcessionTypePatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateConcessionTypePatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateConcessionTypePatchRequestWithBody generates requests for UpdateConcessionTypePatch with any type of body
func NewUpdateConcessionTypePatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/concession_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListContactsGetRequest generates requests for ListContactsGet
func NewListContactsGetRequest(server string, params *ListContactsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateContactPostRequest calls the generic CreateContactPost builder with application/json body
func NewCreateContactPostRequest(server string, body CreateContactPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateContactPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateContactPostRequestWithBody generates requests for CreateContactPost with any type of body
func NewCreateContactPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteContactDeleteRequest generates requests for DeleteContactDelete
func NewDeleteContactDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactGetRequest generates requests for GetContactGet
func NewGetContactGetRequest(server string, id string, params *GetContactGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateContactPatchRequest calls the generic UpdateContactPatch builder with application/json body
func NewUpdateContactPatchRequest(server string, id string, body UpdateContactPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateContactPatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateContactPatchRequestWithBody generates requests for UpdateContactPatch with any type of body
func NewUpdateContactPatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveContactPostRequest generates requests for ArchiveContactPost
func NewArchiveContactPostRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDailyAvailabilitiesGetRequest generates requests for ListDailyAvailabilitiesGet
func NewListDailyAvailabilitiesGetRequest(server string, params *ListDailyAvailabilitiesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daily_availabilities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDailyAvailabilityGetRequest generates requests for GetDailyAvailabilityGet
func NewGetDailyAvailabilityGetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daily_availabilities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListGroupAppointmentsGetRequest generates requests for ListGroupAppointmentsGet
func NewListGroupAppointmentsGetRequest(server string, params *ListGroupAppointmentsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group_appointments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateGroupAppointmentPostRequest calls the generic CreateGroupAppointmentPost builder with application/json body
func NewCreateGroupAppointmentPostRequest(server string, body CreateGroupAppointmentPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateGroupAppointmentPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateGroupAppointmentPostRequestWithBody generates requests for CreateGroupAppointmentPost with any type of body
func NewCreateGroupAppointmentPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group_appointments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAttendeesForGroupAppointmentGetRequest generates requests for ListAttendeesForGroupAppointmentGet
func NewListAttendeesForGroupAppointmentGetRequest(server string, groupAppointmentId string, params *ListAttendeesForGroupAppointmentGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_appointment_id", runtime.ParamLocationPath, groupAppointmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group_appointments/%s/attendees", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteGroupAppointmentDeleteRequest generates requests for DeleteGroupAppointmentDelete
func NewDeleteGroupAppointmentDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group_appointments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupAppointmentGetRequest generates requests for GetGroupAppointmentGet
func NewGetGroupAppointmentGetRequest(server string, id string, params *GetGroupAppointmentGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group_appointments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateGroupAppointmentPatchRequest calls the generic UpdateGroupAppointmentPatch builder with application/json body
func NewUpdateGroupAppointmentPatchRequest(server string, id string, body UpdateGroupAppointmentPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateGroupAppointmentPatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateGroupAppointmentPatchRequestWithBody generates requests for UpdateGroupAppointmentPatch with any type of body
func NewUpdateGroupAppointmentPatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group_appointments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveGroupAppointmentPostRequest generates requests for ArchiveGroupAppointmentPost
func NewArchiveGroupAppointmentPostRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group_appointments/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupAppointmentConflictsGetRequest generates requests for GetGroupAppointmentConflictsGet
func NewGetGroupAppointmentConflictsGetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group_appointments/%s/conflicts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListIndividualAppointmentsGetRequest generates requests for ListIndividualAppointmentsGet
func NewListIndividualAppointmentsGetRequest(server string, params *ListIndividualAppointmentsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/individual_appointments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIndividualAppointmentPostRequest calls the generic CreateIndividualAppointmentPost builder with application/json body
func NewCreateIndividualAppointmentPostRequest(server string, body CreateIndividualAppointmentPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIndividualAppointmentPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateIndividualAppointmentPostRequestWithBody generates requests for CreateIndividualAppointmentPost with any type of body
func NewCreateIndividualAppointmentPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/individual_appointments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIndividualAppointmentDeleteRequest generates requests for DeleteIndividualAppointmentDelete
func NewDeleteIndividualAppointmentDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/individual_appointments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIndividualAppointmentGetRequest generates requests for GetIndividualAppointmentGet
func NewGetIndividualAppointmentGetRequest(server string, id string, params *GetIndividualAppointmentGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/individual_appointments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIndividualAppointmentPatchRequest calls the generic UpdateIndividualAppointmentPatch builder with application/json body
func NewUpdateIndividualAppointmentPatchRequest(server string, id string, body UpdateIndividualAppointmentPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIndividualAppointmentPatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateIndividualAppointmentPatchRequestWithBody generates requests for UpdateIndividualAppointmentPatch with any type of body
func NewUpdateIndividualAppointmentPatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/individual_appointments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveIndividualAppointmentPostRequest generates requests for ArchiveIndividualAppointmentPost
func NewArchiveIndividualAppointmentPostRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/individual_appointments/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelIndividualAppointmentPatchRequest calls the generic CancelIndividualAppointmentPatch builder with application/json body
func NewCancelIndividualAppointmentPatchRequest(server string, id string, body CancelIndividualAppointmentPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCancelIndividualAppointmentPatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCancelIndividualAppointmentPatchRequestWithBody generates requests for CancelIndividualAppointmentPatch with any type of body
func NewCancelIndividualAppointmentPatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/individual_appointments/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndividualAppointmentConflictsGetRequest generates requests for GetIndividualAppointmentConflictsGet
func NewGetIndividualAppointmentConflictsGetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/individual_appointments/%s/conflicts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAttendeesForIndividualAppointmentGetRequest generates requests for ListAttendeesForIndividualAppointmentGet
func NewListAttendeesForIndividualAppointmentGetRequest(server string, individualAppointmentId string, params *ListAttendeesForIndividualAppointmentGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "individual_appointment_id", runtime.ParamLocationPath, individualAppointmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/individual_appointments/%s/attendees", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListInvoiceItemsGetRequest generates requests for ListInvoiceItemsGet
func NewListInvoiceItemsGetRequest(server string, params *ListInvoiceItemsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoice_items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvoiceItemGetRequest generates requests for GetInvoiceItemGet
func NewGetInvoiceItemGetRequest(server string, id string, params *GetInvoiceItemGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoice_items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListInvoicesGetRequest generates requests for ListInvoicesGet
func NewListInvoicesGetRequest(server string, params *ListInvoicesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvoiceGetRequest generates requests for GetInvoiceGet
func NewGetInvoiceGetRequest(server string, id string, params *GetInvoiceGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListInvoiceItemsForInvoiceGetRequest generates requests for ListInvoiceItemsForInvoiceGet
func NewListInvoiceItemsForInvoiceGetRequest(server string, invoiceId string, params *ListInvoiceItemsForInvoiceGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoice_id", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s/invoice_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListMedicalAlertsGetRequest generates requests for ListMedicalAlertsGet
func NewListMedicalAlertsGetRequest(server string, params *ListMedicalAlertsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/medical_alerts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMedicalAlertPostRequest calls the generic CreateMedicalAlertPost builder with application/json body
func NewCreateMedicalAlertPostRequest(server string, body CreateMedicalAlertPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMedicalAlertPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateMedicalAlertPostRequestWithBody generates requests for CreateMedicalAlertPost with any type of body
func NewCreateMedicalAlertPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/medical_alerts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMedicalAlertDeleteRequest generates requests for DeleteMedicalAlertDelete
func NewDeleteMedicalAlertDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/medical_alerts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMedicalAlertGetRequest generates requests for GetMedicalAlertGet
func NewGetMedicalAlertGetRequest(server string, id string, params *GetMedicalAlertGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/medical_alerts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateMedicalAlertPatchRequest calls the generic UpdateMedicalAlertPatch builder with application/json body
func NewUpdateMedicalAlertPatchRequest(server string, id string, body UpdateMedicalAlertPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMedicalAlertPatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateMedicalAlertPatchRequestWithBody generates requests for UpdateMedicalAlertPatch with any type of body
func NewUpdateMedicalAlertPatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/medical_alerts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveMedicalAlertPostRequest generates requests for ArchiveMedicalAlertPost
func NewArchiveMedicalAlertPostRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/medical_alerts/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPatientAttachmentsGetRequest generates requests for ListPatientAttachmentsGet
func NewListPatientAttachmentsGetRequest(server string, params *ListPatientAttachmentsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_attachments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUploadedPatientAttachmentPostRequest calls the generic CreateUploadedPatientAttachmentPost builder with application/json body
func NewCreateUploadedPatientAttachmentPostRequest(server string, body CreateUploadedPatientAttachmentPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUploadedPatientAttachmentPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUploadedPatientAttachmentPostRequestWithBody generates requests for CreateUploadedPatientAttachmentPost with any type of body
func NewCreateUploadedPatientAttachmentPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_attachments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePatientAttachmentDeleteRequest generates requests for DeletePatientAttachmentDelete
func NewDeletePatientAttachmentDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_attachments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPatientAttachmentGetRequest generates requests for GetPatientAttachmentGet
func NewGetPatientAttachmentGetRequest(server string, id string, params *GetPatientAttachmentGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_attachments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchivePatientAttachmentPostRequest generates requests for ArchivePatientAttachmentPost
func NewArchivePatientAttachmentPostRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_attachments/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPatientCasesGetRequest generates requests for ListPatientCasesGet
func NewListPatientCasesGetRequest(server string, params *ListPatientCasesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_cases")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePatientCasePostRequest calls the generic CreatePatientCasePost builder with application/json body
func NewCreatePatientCasePostRequest(server string, body CreatePatientCasePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePatientCasePostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePatientCasePostRequestWithBody generates requests for CreatePatientCasePost with any type of body
func NewCreatePatientCasePostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_cases")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListActivePatientCasesGetRequest generates requests for ListActivePatientCasesGet
func NewListActivePatientCasesGetRequest(server string, params *ListActivePatientCasesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_cases/active")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPatientCaseGetRequest generates requests for GetPatientCaseGet
func NewGetPatientCaseGetRequest(server string, id string, params *GetPatientCaseGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_cases/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePatientCasePatchRequest calls the generic UpdatePatientCasePatch builder with application/json body
func NewUpdatePatientCasePatchRequest(server string, id string, body UpdatePatientCasePatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePatientCasePatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdatePatientCasePatchRequestWithBody generates requests for UpdatePatientCasePatch with any type of body
func NewUpdatePatientCasePatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_cases/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchivePatientCasePostRequest generates requests for ArchivePatientCasePost
func NewArchivePatientCasePostRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_cases/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAttendeesForPatientCaseGetRequest generates requests for ListAttendeesForPatientCaseGet
func NewListAttendeesForPatientCaseGetRequest(server string, patientCaseId string, params *ListAttendeesForPatientCaseGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patient_case_id", runtime.ParamLocationPath, patientCaseId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_cases/%s/attendees", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListBookingsForPatientCaseGetRequest generates requests for ListBookingsForPatientCaseGet
func NewListBookingsForPatientCaseGetRequest(server string, patientCaseId string, params *ListBookingsForPatientCaseGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patient_case_id", runtime.ParamLocationPath, patientCaseId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_cases/%s/bookings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListInvoicesForPatientCaseGetRequest generates requests for ListInvoicesForPatientCaseGet
func NewListInvoicesForPatientCaseGetRequest(server string, patientCaseId string, params *ListInvoicesForPatientCaseGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patient_case_id", runtime.ParamLocationPath, patientCaseId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_cases/%s/invoices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPatientAttachmentsForPatientCaseGetRequest generates requests for ListPatientAttachmentsForPatientCaseGet
func NewListPatientAttachmentsForPatientCaseGetRequest(server string, patientCaseId string, params *ListPatientAttachmentsForPatientCaseGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patient_case_id", runtime.ParamLocationPath, patientCaseId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_cases/%s/patient_attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPatientFormTemplatesGetRequest generates requests for ListPatientFormTemplatesGet
func NewListPatientFormTemplatesGetRequest(server string, params *ListPatientFormTemplatesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_form_templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePatientFormTemplatePostRequest calls the generic CreatePatientFormTemplatePost builder with application/json body
func NewCreatePatientFormTemplatePostRequest(server string, body CreatePatientFormTemplatePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePatientFormTemplatePostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePatientFormTemplatePostRequestWithBody generates requests for CreatePatientFormTemplatePost with any type of body
func NewCreatePatientFormTemplatePostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_form_templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPatientFormTemplateGetRequest generates requests for GetPatientFormTemplateGet
func NewGetPatientFormTemplateGetRequest(server string, id string, params *GetPatientFormTemplateGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_form_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePatientFormTemplatePatchRequest calls the generic UpdatePatientFormTemplatePatch builder with application/json body
func NewUpdatePatientFormTemplatePatchRequest(server string, id string, body UpdatePatientFormTemplatePatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePatientFormTemplatePatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdatePatientFormTemplatePatchRequestWithBody generates requests for UpdatePatientFormTemplatePatch with any type of body
func NewUpdatePatientFormTemplatePatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_form_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchivePatientFormTemplatePostRequest generates requests for ArchivePatientFormTemplatePost
func NewArchivePatientFormTemplatePostRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_form_templates/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPatientFormsGetRequest generates requests for ListPatientFormsGet
func NewListPatientFormsGetRequest(server string, params *ListPatientFormsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_forms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePatientFormPostRequest calls the generic CreatePatientFormPost builder with application/json body
func NewCreatePatientFormPostRequest(server string, body CreatePatientFormPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePatientFormPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePatientFormPostRequestWithBody generates requests for CreatePatientFormPost with any type of body
func NewCreatePatientFormPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_forms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPatientFormGetRequest generates requests for GetPatientFormGet
func NewGetPatientFormGetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_forms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePatientFormPatchRequest calls the generic UpdatePatientFormPatch builder with application/json body
func NewUpdatePatientFormPatchRequest(server string, id string, body UpdatePatientFormPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePatientFormPatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdatePatientFormPatchRequestWithBody generates requests for UpdatePatientFormPatch with any type of body
func NewUpdatePatientFormPatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_forms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchivePatientFormPostRequest generates requests for ArchivePatientFormPost
func NewArchivePatientFormPostRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_forms/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSignatureGetRequest generates requests for GetSignatureGet
func NewGetSignatureGetRequest(server string, patientFormId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patient_form_id", runtime.ParamLocationPath, patientFormId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patient_forms/%s/signatures/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPatientsGetRequest generates requests for ListPatientsGet
func NewListPatientsGetRequest(server string, params *ListPatientsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patients")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePatientPostRequest calls the generic CreatePatientPost builder with application/json body
func NewCreatePatientPostRequest(server string, body CreatePatientPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePatientPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePatientPostRequestWithBody generates requests for CreatePatientPost with any type of body
func NewCreatePatientPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patients")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchivePatientDeleteRequest generates requests for ArchivePatientDelete
func NewArchivePatientDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patients/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPatientGetRequest generates requests for GetPatientGet
func NewGetPatientGetRequest(server string, id string, params *GetPatientGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patients/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePatientPatchRequest calls the generic UpdatePatientPatch builder with application/json body
func NewUpdatePatientPatchRequest(server string, id string, body UpdatePatientPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePatientPatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdatePatientPatchRequestWithBody generates requests for UpdatePatientPatch with any type of body
func NewUpdatePatientPatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patients/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchivePatientPostRequest generates requests for ArchivePatientPost
func NewArchivePatientPostRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patients/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUnarchivePatientPostRequest generates requests for UnarchivePatientPost
func NewUnarchivePatientPostRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patients/%s/unarchive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPresignedPostGetRequest generates requests for PresignedPostGet
func NewPresignedPostGetRequest(server string, patientId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patient_id", runtime.ParamLocationPath, patientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patients/%s/attachment_presigned_post", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListInvoicesForPatientGetRequest generates requests for ListInvoicesForPatientGet
func NewListInvoicesForPatientGetRequest(server string, patientId string, params *ListInvoicesForPatientGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patient_id", runtime.ParamLocationPath, patientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patients/%s/invoices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListMedicalAlertsForPatientGetRequest generates requests for ListMedicalAlertsForPatientGet
func NewListMedicalAlertsForPatientGetRequest(server string, patientId string, params *ListMedicalAlertsForPatientGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patient_id", runtime.ParamLocationPath, patientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patients/%s/medical_alerts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPatientAttachmentsForPatientGetRequest generates requests for ListPatientAttachmentsForPatientGet
func NewListPatientAttachmentsForPatientGetRequest(server string, patientId string, params *ListPatientAttachmentsForPatientGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patient_id", runtime.ParamLocationPath, patientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patients/%s/patient_attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReferralSourceGetRequest generates requests for GetReferralSourceGet
func NewGetReferralSourceGetRequest(server string, patientId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patient_id", runtime.ParamLocationPath, patientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patients/%s/referral_source", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateReferralSourcePatchRequest calls the generic UpdateReferralSourcePatch builder with application/json body
func NewUpdateReferralSourcePatchRequest(server string, patientId string, body UpdateReferralSourcePatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateReferralSourcePatchRequestWithBody(server, patientId, "application/json", bodyReader)
}

// NewUpdateReferralSourcePatchRequestWithBody generates requests for UpdateReferralSourcePatch with any type of body
func NewUpdateReferralSourcePatchRequestWithBody(server string, patientId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patient_id", runtime.ParamLocationPath, patientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patients/%s/referral_source", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTreatmentNotesForPatientGetRequest generates requests for ListTreatmentNotesForPatientGet
func NewListTreatmentNotesForPatientGetRequest(server string, patientId string, params *ListTreatmentNotesForPatientGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patient_id", runtime.ParamLocationPath, patientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patients/%s/treatment_notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPractitionerReferenceNumbersGetRequest generates requests for ListPractitionerReferenceNumbersGet
func NewListPractitionerReferenceNumbersGetRequest(server string, params *ListPractitionerReferenceNumbersGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/practitioner_reference_numbers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePractitionerReferenceNumberPostRequest calls the generic CreatePractitionerReferenceNumberPost builder with application/json body
func NewCreatePractitionerReferenceNumberPostRequest(server string, body CreatePractitionerReferenceNumberPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePractitionerReferenceNumberPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePractitionerReferenceNumberPostRequestWithBody generates requests for CreatePractitionerReferenceNumberPost with any type of body
func NewCreatePractitionerReferenceNumberPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/practitioner_reference_numbers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePractitionerReferenceNumberDeleteRequest generates requests for DeletePractitionerReferenceNumberDelete
func NewDeletePractitionerReferenceNumberDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/practitioner_reference_numbers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPractitionerReferenceNumberGetRequest generates requests for GetPractitionerReferenceNumberGet
func NewGetPractitionerReferenceNumberGetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/practitioner_reference_numbers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePractitionerReferenceNumberPatchRequest calls the generic UpdatePractitionerReferenceNumberPatch builder with application/json body
func NewUpdatePractitionerReferenceNumberPatchRequest(server string, id string, body UpdatePractitionerReferenceNumberPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePractitionerReferenceNumberPatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdatePractitionerReferenceNumberPatchRequestWithBody generates requests for UpdatePractitionerReferenceNumberPatch with any type of body
func NewUpdatePractitionerReferenceNumberPatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/practitioner_reference_numbers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPractitionersGetRequest generates requests for ListPractitionersGet
func NewListPractitionersGetRequest(server string, params *ListPractitionersGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/practitioners")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListInactivePractitionersGetRequest generates requests for ListInactivePractitionersGet
func NewListInactivePractitionersGetRequest(server string, params *ListInactivePractitionersGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/practitioners/inactive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPractitionerGetRequest generates requests for GetPractitionerGet
func NewGetPractitionerGetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/practitioners/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAppointmentTypesForPractitionerGetRequest generates requests for ListAppointmentTypesForPractitionerGet
func NewListAppointmentTypesForPractitionerGetRequest(server string, practitionerId string, params *ListAppointmentTypesForPractitionerGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "practitioner_id", runtime.ParamLocationPath, practitionerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/practitioners/%s/appointment_types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDailyAvailabilitiesForPractitionerGetRequest generates requests for ListDailyAvailabilitiesForPractitionerGet
func NewListDailyAvailabilitiesForPractitionerGetRequest(server string, practitionerId string, params *ListDailyAvailabilitiesForPractitionerGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "practitioner_id", runtime.ParamLocationPath, practitionerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/practitioners/%s/daily_availabilities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListInvoicesForPractitionerGetRequest generates requests for ListInvoicesForPractitionerGet
func NewListInvoicesForPractitionerGetRequest(server string, practitionerId string, params *ListInvoicesForPractitionerGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "practitioner_id", runtime.ParamLocationPath, practitionerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/practitioners/%s/invoices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPractitionerReferenceNumbersForPractitionerGetRequest generates requests for ListPractitionerReferenceNumbersForPractitionerGet
func NewListPractitionerReferenceNumbersForPractitionerGetRequest(server string, practitionerId string, params *ListPractitionerReferenceNumbersForPractitionerGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "practitioner_id", runtime.ParamLocationPath, practitionerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/practitioners/%s/practitioner_reference_numbers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListProductSuppliersGetRequest generates requests for ListProductSuppliersGet
func NewListProductSuppliersGetRequest(server string, params *ListProductSuppliersGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/product_suppliers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProductSupplierPostRequest calls the generic CreateProductSupplierPost builder with application/json body
func NewCreateProductSupplierPostRequest(server string, body CreateProductSupplierPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProductSupplierPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateProductSupplierPostRequestWithBody generates requests for CreateProductSupplierPost with any type of body
func NewCreateProductSupplierPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/product_suppliers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProductSupplierDeleteRequest generates requests for DeleteProductSupplierDelete
func NewDeleteProductSupplierDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/product_suppliers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductSupplierGetRequest generates requests for GetProductSupplierGet
func NewGetProductSupplierGetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/product_suppliers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateProductSupplierPatchRequest calls the generic UpdateProductSupplierPatch builder with application/json body
func NewUpdateProductSupplierPatchRequest(server string, id string, body UpdateProductSupplierPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProductSupplierPatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateProductSupplierPatchRequestWithBody generates requests for UpdateProductSupplierPatch with any type of body
func NewUpdateProductSupplierPatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/product_suppliers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveProductSupplierPostRequest generates requests for ArchiveProductSupplierPost
func NewArchiveProductSupplierPostRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/product_suppliers/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListProductsGetRequest generates requests for ListProductsGet
func NewListProductsGetRequest(server string, params *ListProductsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProductPostRequest calls the generic CreateProductPost builder with application/json body
func NewCreateProductPostRequest(server string, body CreateProductPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProductPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateProductPostRequestWithBody generates requests for CreateProductPost with any type of body
func NewCreateProductPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProductDeleteRequest generates requests for DeleteProductDelete
func NewDeleteProductDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductGetRequest generates requests for GetProductGet
func NewGetProductGetRequest(server string, id string, params *GetProductGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateProductPatchRequest calls the generic UpdateProductPatch builder with application/json body
func NewUpdateProductPatchRequest(server string, id string, body UpdateProductPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProductPatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateProductPatchRequestWithBody generates requests for UpdateProductPatch with any type of body
func NewUpdateProductPatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveProductPostRequest generates requests for ArchiveProductPost
func NewArchiveProductPostRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListReferralSourceTypesGetRequest generates requests for ListReferralSourceTypesGet
func NewListReferralSourceTypesGetRequest(server string, params *ListReferralSourceTypesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/referral_source_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReferralSourceTypeGetRequest generates requests for GetReferralSourceTypeGet
func NewGetReferralSourceTypeGetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/referral_source_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListReferralSourcesGetRequest generates requests for ListReferralSourcesGet
func NewListReferralSourcesGetRequest(server string, params *ListReferralSourcesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/referral_sources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListServicesGetRequest generates requests for ListServicesGet
func NewListServicesGetRequest(server string, params *ListServicesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSettingsGetRequest generates requests for GetSettingsGet
func NewGetSettingsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicSettingsGetRequest generates requests for GetPublicSettingsGet
func NewGetPublicSettingsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/public")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListStockAdjustmentsGetRequest generates requests for ListStockAdjustmentsGet
func NewListStockAdjustmentsGetRequest(server string, params *ListStockAdjustmentsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stock_adjustments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStockAdjustmentPostRequest calls the generic CreateStockAdjustmentPost builder with application/json body
func NewCreateStockAdjustmentPostRequest(server string, body CreateStockAdjustmentPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateStockAdjustmentPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateStockAdjustmentPostRequestWithBody generates requests for CreateStockAdjustmentPost with any type of body
func NewCreateStockAdjustmentPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stock_adjustments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStockAdjustmentGetRequest generates requests for GetStockAdjustmentGet
func NewGetStockAdjustmentGetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stock_adjustments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListTaxesGetRequest generates requests for ListTaxesGet
func NewListTaxesGetRequest(server string, params *ListTaxesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTaxPostRequest calls the generic CreateTaxPost builder with application/json body
func NewCreateTaxPostRequest(server string, body CreateTaxPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTaxPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTaxPostRequestWithBody generates requests for CreateTaxPost with any type of body
func NewCreateTaxPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTaxDeleteRequest generates requests for DeleteTaxDelete
func NewDeleteTaxDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaxGetRequest generates requests for GetTaxGet
func NewGetTaxGetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTaxPatchRequest calls the generic UpdateTaxPatch builder with application/json body
func NewUpdateTaxPatchRequest(server string, id string, body UpdateTaxPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTaxPatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateTaxPatchRequestWithBody generates requests for UpdateTaxPatch with any type of body
func NewUpdateTaxPatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTreatmentNoteTemplatesGetRequest generates requests for ListTreatmentNoteTemplatesGet
func NewListTreatmentNoteTemplatesGetRequest(server string, params *ListTreatmentNoteTemplatesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/treatment_note_templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTreatmentNoteTemplatePostRequest calls the generic CreateTreatmentNoteTemplatePost builder with application/json body
func NewCreateTreatmentNoteTemplatePostRequest(server string, body CreateTreatmentNoteTemplatePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTreatmentNoteTemplatePostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTreatmentNoteTemplatePostRequestWithBody generates requests for CreateTreatmentNoteTemplatePost with any type of body
func NewCreateTreatmentNoteTemplatePostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/treatment_note_templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTreatmentNoteTemplateDeleteRequest generates requests for DeleteTreatmentNoteTemplateDelete
func NewDeleteTreatmentNoteTemplateDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/treatment_note_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTreatmentNoteTemplateGetRequest generates requests for GetTreatmentNoteTemplateGet
func NewGetTreatmentNoteTemplateGetRequest(server string, id string, params *GetTreatmentNoteTemplateGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/treatment_note_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTreatmentNoteTemplatePatchRequest calls the generic UpdateTreatmentNoteTemplatePatch builder with application/json body
func NewUpdateTreatmentNoteTemplatePatchRequest(server string, id string, body UpdateTreatmentNoteTemplatePatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTreatmentNoteTemplatePatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateTreatmentNoteTemplatePatchRequestWithBody generates requests for UpdateTreatmentNoteTemplatePatch with any type of body
func NewUpdateTreatmentNoteTemplatePatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/treatment_note_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveTreatmentNoteTemplatePostRequest generates requests for ArchiveTreatmentNoteTemplatePost
func NewArchiveTreatmentNoteTemplatePostRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/treatment_note_templates/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListTreatmentNotesGetRequest generates requests for ListTreatmentNotesGet
func NewListTreatmentNotesGetRequest(server string, params *ListTreatmentNotesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/treatment_notes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTreatmentNotePostRequest calls the generic CreateTreatmentNotePost builder with application/json body
func NewCreateTreatmentNotePostRequest(server string, body CreateTreatmentNotePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTreatmentNotePostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTreatmentNotePostRequestWithBody generates requests for CreateTreatmentNotePost with any type of body
func NewCreateTreatmentNotePostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/treatment_notes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTreatmentNoteDeleteRequest generates requests for DeleteTreatmentNoteDelete
func NewDeleteTreatmentNoteDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/treatment_notes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTreatmentNoteGetRequest generates requests for GetTreatmentNoteGet
func NewGetTreatmentNoteGetRequest(server string, id string, params *GetTreatmentNoteGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/treatment_notes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTreatmentNotePatchRequest calls the generic UpdateTreatmentNotePatch builder with application/json body
func NewUpdateTreatmentNotePatchRequest(server string, id string, body UpdateTreatmentNotePatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTreatmentNotePatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateTreatmentNotePatchRequestWithBody generates requests for UpdateTreatmentNotePatch with any type of body
func NewUpdateTreatmentNotePatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/treatment_notes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveTreatmentNotePostRequest generates requests for ArchiveTreatmentNotePost
func NewArchiveTreatmentNotePostRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/treatment_notes/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUnavailableBlocksGetRequest generates requests for ListUnavailableBlocksGet
func NewListUnavailableBlocksGetRequest(server string, params *ListUnavailableBlocksGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/unavailable_blocks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUnavailableBlockPostRequest calls the generic CreateUnavailableBlockPost builder with application/json body
func NewCreateUnavailableBlockPostRequest(server string, body CreateUnavailableBlockPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUnavailableBlockPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUnavailableBlockPostRequestWithBody generates requests for CreateUnavailableBlockPost with any type of body
func NewCreateUnavailableBlockPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/unavailable_blocks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUnavailableBlockDeleteRequest generates requests for DeleteUnavailableBlockDelete
func NewDeleteUnavailableBlockDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/unavailable_blocks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUnavailableBlockGetRequest generates requests for GetUnavailableBlockGet
func NewGetUnavailableBlockGetRequest(server string, id string, params *GetUnavailableBlockGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/unavailable_blocks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUnavailableBlockPatchRequest calls the generic UpdateUnavailableBlockPatch builder with application/json body
func NewUpdateUnavailableBlockPatchRequest(server string, id string, body UpdateUnavailableBlockPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUnavailableBlockPatchRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateUnavailableBlockPatchRequestWithBody generates requests for UpdateUnavailableBlockPatch with any type of body
func NewUpdateUnavailableBlockPatchRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/unavailable_blocks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveUnavailableBlockPostRequest generates requests for ArchiveUnavailableBlockPost
func NewArchiveUnavailableBlockPostRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/unavailable_blocks/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUnavailableBlockConflictsGetRequest generates requests for GetUnavailableBlockConflictsGet
func NewGetUnavailableBlockConflictsGetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/unavailable_blocks/%s/conflicts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthenticatedUserGetRequest generates requests for GetAuthenticatedUserGet
func NewGetAuthenticatedUserGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUsersGetRequest generates requests for ListUsersGet
func NewListUsersGetRequest(server string, params *ListUsersGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q[]", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserGetRequest generates requests for GetUserGet
func NewGetUserGetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListAppointmentTypesGetWithResponse request
	ListAppointmentTypesGetWithResponse(ctx context.Context, params *ListAppointmentTypesGetParams, reqEditors ...RequestEditorFn) (*ListAppointmentTypesGetResponse, error)

	// CreateAppointmentTypePostWithBodyWithResponse request with any body
	CreateAppointmentTypePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAppointmentTypePostResponse, error)

	CreateAppointmentTypePostWithResponse(ctx context.Context, body CreateAppointmentTypePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAppointmentTypePostResponse, error)

	// ListPractitionersForAppointmentTypeGetWithResponse request
	ListPractitionersForAppointmentTypeGetWithResponse(ctx context.Context, appointmentTypeId string, params *ListPractitionersForAppointmentTypeGetParams, reqEditors ...RequestEditorFn) (*ListPractitionersForAppointmentTypeGetResponse, error)

	// ListInactivePractitionersForAppointmentTypeGetWithResponse request
	ListInactivePractitionersForAppointmentTypeGetWithResponse(ctx context.Context, appointmentTypeId string, params *ListInactivePractitionersForAppointmentTypeGetParams, reqEditors ...RequestEditorFn) (*ListInactivePractitionersForAppointmentTypeGetResponse, error)

	// DeleteAppointmentTypeDeleteWithResponse request
	DeleteAppointmentTypeDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAppointmentTypeDeleteResponse, error)

	// GetAppointmentTypeGetWithResponse request
	GetAppointmentTypeGetWithResponse(ctx context.Context, id string, params *GetAppointmentTypeGetParams, reqEditors ...RequestEditorFn) (*GetAppointmentTypeGetResponse, error)

	// UpdateAppointmentTypePatchWithBodyWithResponse request with any body
	UpdateAppointmentTypePatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAppointmentTypePatchResponse, error)

	UpdateAppointmentTypePatchWithResponse(ctx context.Context, id string, body UpdateAppointmentTypePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAppointmentTypePatchResponse, error)

	// ArchiveAppointmentTypePostWithResponse request
	ArchiveAppointmentTypePostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveAppointmentTypePostResponse, error)

	// ListInvoicesForAppointmentGetWithResponse request
	ListInvoicesForAppointmentGetWithResponse(ctx context.Context, appointmentId string, params *ListInvoicesForAppointmentGetParams, reqEditors ...RequestEditorFn) (*ListInvoicesForAppointmentGetResponse, error)

	// ListAttendeesGetWithResponse request
	ListAttendeesGetWithResponse(ctx context.Context, params *ListAttendeesGetParams, reqEditors ...RequestEditorFn) (*ListAttendeesGetResponse, error)

	// CreateAttendeePostWithBodyWithResponse request with any body
	CreateAttendeePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAttendeePostResponse, error)

	CreateAttendeePostWithResponse(ctx context.Context, body CreateAttendeePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAttendeePostResponse, error)

	// ListInvoicesForAttendeeGetWithResponse request
	ListInvoicesForAttendeeGetWithResponse(ctx context.Context, attendeeId string, params *ListInvoicesForAttendeeGetParams, reqEditors ...RequestEditorFn) (*ListInvoicesForAttendeeGetResponse, error)

	// ListPatientFormsForAttendeeGetWithResponse request
	ListPatientFormsForAttendeeGetWithResponse(ctx context.Context, attendeeId string, params *ListPatientFormsForAttendeeGetParams, reqEditors ...RequestEditorFn) (*ListPatientFormsForAttendeeGetResponse, error)

	// DeleteAttendeeDeleteWithResponse request
	DeleteAttendeeDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAttendeeDeleteResponse, error)

	// GetAttendeeGetWithResponse request
	GetAttendeeGetWithResponse(ctx context.Context, id string, params *GetAttendeeGetParams, reqEditors ...RequestEditorFn) (*GetAttendeeGetResponse, error)

	// UpdateAttendeePatchWithBodyWithResponse request with any body
	UpdateAttendeePatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAttendeePatchResponse, error)

	UpdateAttendeePatchWithResponse(ctx context.Context, id string, body UpdateAttendeePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAttendeePatchResponse, error)

	// ArchiveAttendeePostWithResponse request
	ArchiveAttendeePostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveAttendeePostResponse, error)

	// CancelAttendeePatchWithBodyWithResponse request with any body
	CancelAttendeePatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelAttendeePatchResponse, error)

	CancelAttendeePatchWithResponse(ctx context.Context, id string, body CancelAttendeePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelAttendeePatchResponse, error)

	// ListAvailabilityBlocksGetWithResponse request
	ListAvailabilityBlocksGetWithResponse(ctx context.Context, params *ListAvailabilityBlocksGetParams, reqEditors ...RequestEditorFn) (*ListAvailabilityBlocksGetResponse, error)

	// CreateAvailabilityBlockPostWithBodyWithResponse request with any body
	CreateAvailabilityBlockPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAvailabilityBlockPostResponse, error)

	CreateAvailabilityBlockPostWithResponse(ctx context.Context, body CreateAvailabilityBlockPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAvailabilityBlockPostResponse, error)

	// GetAvailabilityBlockGetWithResponse request
	GetAvailabilityBlockGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAvailabilityBlockGetResponse, error)

	// ListBillableItemsGetWithResponse request
	ListBillableItemsGetWithResponse(ctx context.Context, params *ListBillableItemsGetParams, reqEditors ...RequestEditorFn) (*ListBillableItemsGetResponse, error)

	// CreateBillableItemPostWithBodyWithResponse request with any body
	CreateBillableItemPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBillableItemPostResponse, error)

	CreateBillableItemPostWithResponse(ctx context.Context, body CreateBillableItemPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBillableItemPostResponse, error)

	// DeleteBillableItemDeleteWithResponse request
	DeleteBillableItemDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteBillableItemDeleteResponse, error)

	// GetBillableItemGetWithResponse request
	GetBillableItemGetWithResponse(ctx context.Context, id string, params *GetBillableItemGetParams, reqEditors ...RequestEditorFn) (*GetBillableItemGetResponse, error)

	// UpdateBillableItemPatchWithBodyWithResponse request with any body
	UpdateBillableItemPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateBillableItemPatchResponse, error)

	UpdateBillableItemPatchWithResponse(ctx context.Context, id string, body UpdateBillableItemPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateBillableItemPatchResponse, error)

	// ArchiveBillableItemPostWithResponse request
	ArchiveBillableItemPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveBillableItemPostResponse, error)

	// ListBookingsGetWithResponse request
	ListBookingsGetWithResponse(ctx context.Context, params *ListBookingsGetParams, reqEditors ...RequestEditorFn) (*ListBookingsGetResponse, error)

	// GetBookingGetWithResponse request
	GetBookingGetWithResponse(ctx context.Context, id string, params *GetBookingGetParams, reqEditors ...RequestEditorFn) (*GetBookingGetResponse, error)

	// ListBusinessesGetWithResponse request
	ListBusinessesGetWithResponse(ctx context.Context, params *ListBusinessesGetParams, reqEditors ...RequestEditorFn) (*ListBusinessesGetResponse, error)

	// CreateBusinessPostWithBodyWithResponse request with any body
	CreateBusinessPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBusinessPostResponse, error)

	CreateBusinessPostWithResponse(ctx context.Context, body CreateBusinessPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBusinessPostResponse, error)

	// ListDailyAvailabilitiesForBusinessGetWithResponse request
	ListDailyAvailabilitiesForBusinessGetWithResponse(ctx context.Context, businessId string, params *ListDailyAvailabilitiesForBusinessGetParams, reqEditors ...RequestEditorFn) (*ListDailyAvailabilitiesForBusinessGetResponse, error)

	// ListPractitionersForBusinessGetWithResponse request
	ListPractitionersForBusinessGetWithResponse(ctx context.Context, businessId string, params *ListPractitionersForBusinessGetParams, reqEditors ...RequestEditorFn) (*ListPractitionersForBusinessGetResponse, error)

	// ListInactivePractitionersForBusinessGetWithResponse request
	ListInactivePractitionersForBusinessGetWithResponse(ctx context.Context, businessId string, params *ListInactivePractitionersForBusinessGetParams, reqEditors ...RequestEditorFn) (*ListInactivePractitionersForBusinessGetResponse, error)

	// GetAllAvailableTimesGetWithResponse request
	GetAllAvailableTimesGetWithResponse(ctx context.Context, businessId string, practitionerId string, appointmentTypeId string, params *GetAllAvailableTimesGetParams, reqEditors ...RequestEditorFn) (*GetAllAvailableTimesGetResponse, error)

	// GetNextAvailableTimeGetWithResponse request
	GetNextAvailableTimeGetWithResponse(ctx context.Context, businessId string, practitionerId string, appointmentTypeId string, params *GetNextAvailableTimeGetParams, reqEditors ...RequestEditorFn) (*GetNextAvailableTimeGetResponse, error)

	// ListServicesForBusinessGetWithResponse request
	ListServicesForBusinessGetWithResponse(ctx context.Context, businessId string, params *ListServicesForBusinessGetParams, reqEditors ...RequestEditorFn) (*ListServicesForBusinessGetResponse, error)

	// DeleteBusinessDeleteWithResponse request
	DeleteBusinessDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteBusinessDeleteResponse, error)

	// GetBusinessGetWithResponse request
	GetBusinessGetWithResponse(ctx context.Context, id string, params *GetBusinessGetParams, reqEditors ...RequestEditorFn) (*GetBusinessGetResponse, error)

	// UpdateBusinessPatchWithBodyWithResponse request with any body
	UpdateBusinessPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateBusinessPatchResponse, error)

	UpdateBusinessPatchWithResponse(ctx context.Context, id string, body UpdateBusinessPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateBusinessPatchResponse, error)

	// ArchiveBusinessPostWithResponse request
	ArchiveBusinessPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveBusinessPostResponse, error)

	// UnarchiveBusinessPostWithResponse request
	UnarchiveBusinessPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UnarchiveBusinessPostResponse, error)

	// ListCommunicationsGetWithResponse request
	ListCommunicationsGetWithResponse(ctx context.Context, params *ListCommunicationsGetParams, reqEditors ...RequestEditorFn) (*ListCommunicationsGetResponse, error)

	// CreateMemoCommunicationPostWithBodyWithResponse request with any body
	CreateMemoCommunicationPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMemoCommunicationPostResponse, error)

	CreateMemoCommunicationPostWithResponse(ctx context.Context, body CreateMemoCommunicationPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMemoCommunicationPostResponse, error)

	// GetCommunicationGetWithResponse request
	GetCommunicationGetWithResponse(ctx context.Context, id string, params *GetCommunicationGetParams, reqEditors ...RequestEditorFn) (*GetCommunicationGetResponse, error)

	// UpdateMemoCommunicationPatchWithBodyWithResponse request with any body
	UpdateMemoCommunicationPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMemoCommunicationPatchResponse, error)

	UpdateMemoCommunicationPatchWithResponse(ctx context.Context, id string, body UpdateMemoCommunicationPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMemoCommunicationPatchResponse, error)

	// ArchiveMemoCommunicationPostWithResponse request
	ArchiveMemoCommunicationPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveMemoCommunicationPostResponse, error)

	// ListConcessionPricesGetWithResponse request
	ListConcessionPricesGetWithResponse(ctx context.Context, params *ListConcessionPricesGetParams, reqEditors ...RequestEditorFn) (*ListConcessionPricesGetResponse, error)

	// GetConcessionPriceGetWithResponse request
	GetConcessionPriceGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetConcessionPriceGetResponse, error)

	// ListConcessionTypesGetWithResponse request
	ListConcessionTypesGetWithResponse(ctx context.Context, params *ListConcessionTypesGetParams, reqEditors ...RequestEditorFn) (*ListConcessionTypesGetResponse, error)

	// CreateConcessionTypePostWithBodyWithResponse request with any body
	CreateConcessionTypePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConcessionTypePostResponse, error)

	CreateConcessionTypePostWithResponse(ctx context.Context, body CreateConcessionTypePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConcessionTypePostResponse, error)

	// GetConcessionTypeGetWithResponse request
	GetConcessionTypeGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetConcessionTypeGetResponse, error)

	// UpdateConcessionTypePatchWithBodyWithResponse request with any body
	UpdateConcessionTypePatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConcessionTypePatchResponse, error)

	UpdateConcessionTypePatchWithResponse(ctx context.Context, id string, body UpdateConcessionTypePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConcessionTypePatchResponse, error)

	// ListContactsGetWithResponse request
	ListContactsGetWithResponse(ctx context.Context, params *ListContactsGetParams, reqEditors ...RequestEditorFn) (*ListContactsGetResponse, error)

	// CreateContactPostWithBodyWithResponse request with any body
	CreateContactPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContactPostResponse, error)

	CreateContactPostWithResponse(ctx context.Context, body CreateContactPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContactPostResponse, error)

	// DeleteContactDeleteWithResponse request
	DeleteContactDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteContactDeleteResponse, error)

	// GetContactGetWithResponse request
	GetContactGetWithResponse(ctx context.Context, id string, params *GetContactGetParams, reqEditors ...RequestEditorFn) (*GetContactGetResponse, error)

	// UpdateContactPatchWithBodyWithResponse request with any body
	UpdateContactPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContactPatchResponse, error)

	UpdateContactPatchWithResponse(ctx context.Context, id string, body UpdateContactPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContactPatchResponse, error)

	// ArchiveContactPostWithResponse request
	ArchiveContactPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveContactPostResponse, error)

	// ListDailyAvailabilitiesGetWithResponse request
	ListDailyAvailabilitiesGetWithResponse(ctx context.Context, params *ListDailyAvailabilitiesGetParams, reqEditors ...RequestEditorFn) (*ListDailyAvailabilitiesGetResponse, error)

	// GetDailyAvailabilityGetWithResponse request
	GetDailyAvailabilityGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetDailyAvailabilityGetResponse, error)

	// ListGroupAppointmentsGetWithResponse request
	ListGroupAppointmentsGetWithResponse(ctx context.Context, params *ListGroupAppointmentsGetParams, reqEditors ...RequestEditorFn) (*ListGroupAppointmentsGetResponse, error)

	// CreateGroupAppointmentPostWithBodyWithResponse request with any body
	CreateGroupAppointmentPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGroupAppointmentPostResponse, error)

	CreateGroupAppointmentPostWithResponse(ctx context.Context, body CreateGroupAppointmentPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGroupAppointmentPostResponse, error)

	// ListAttendeesForGroupAppointmentGetWithResponse request
	ListAttendeesForGroupAppointmentGetWithResponse(ctx context.Context, groupAppointmentId string, params *ListAttendeesForGroupAppointmentGetParams, reqEditors ...RequestEditorFn) (*ListAttendeesForGroupAppointmentGetResponse, error)

	// DeleteGroupAppointmentDeleteWithResponse request
	DeleteGroupAppointmentDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteGroupAppointmentDeleteResponse, error)

	// GetGroupAppointmentGetWithResponse request
	GetGroupAppointmentGetWithResponse(ctx context.Context, id string, params *GetGroupAppointmentGetParams, reqEditors ...RequestEditorFn) (*GetGroupAppointmentGetResponse, error)

	// UpdateGroupAppointmentPatchWithBodyWithResponse request with any body
	UpdateGroupAppointmentPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGroupAppointmentPatchResponse, error)

	UpdateGroupAppointmentPatchWithResponse(ctx context.Context, id string, body UpdateGroupAppointmentPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGroupAppointmentPatchResponse, error)

	// ArchiveGroupAppointmentPostWithResponse request
	ArchiveGroupAppointmentPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveGroupAppointmentPostResponse, error)

	// GetGroupAppointmentConflictsGetWithResponse request
	GetGroupAppointmentConflictsGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGroupAppointmentConflictsGetResponse, error)

	// ListIndividualAppointmentsGetWithResponse request
	ListIndividualAppointmentsGetWithResponse(ctx context.Context, params *ListIndividualAppointmentsGetParams, reqEditors ...RequestEditorFn) (*ListIndividualAppointmentsGetResponse, error)

	// CreateIndividualAppointmentPostWithBodyWithResponse request with any body
	CreateIndividualAppointmentPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualAppointmentPostResponse, error)

	CreateIndividualAppointmentPostWithResponse(ctx context.Context, body CreateIndividualAppointmentPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualAppointmentPostResponse, error)

	// DeleteIndividualAppointmentDeleteWithResponse request
	DeleteIndividualAppointmentDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIndividualAppointmentDeleteResponse, error)

	// GetIndividualAppointmentGetWithResponse request
	GetIndividualAppointmentGetWithResponse(ctx context.Context, id string, params *GetIndividualAppointmentGetParams, reqEditors ...RequestEditorFn) (*GetIndividualAppointmentGetResponse, error)

	// UpdateIndividualAppointmentPatchWithBodyWithResponse request with any body
	UpdateIndividualAppointmentPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIndividualAppointmentPatchResponse, error)

	UpdateIndividualAppointmentPatchWithResponse(ctx context.Context, id string, body UpdateIndividualAppointmentPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIndividualAppointmentPatchResponse, error)

	// ArchiveIndividualAppointmentPostWithResponse request
	ArchiveIndividualAppointmentPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveIndividualAppointmentPostResponse, error)

	// CancelIndividualAppointmentPatchWithBodyWithResponse request with any body
	CancelIndividualAppointmentPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelIndividualAppointmentPatchResponse, error)

	CancelIndividualAppointmentPatchWithResponse(ctx context.Context, id string, body CancelIndividualAppointmentPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelIndividualAppointmentPatchResponse, error)

	// GetIndividualAppointmentConflictsGetWithResponse request
	GetIndividualAppointmentConflictsGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIndividualAppointmentConflictsGetResponse, error)

	// ListAttendeesForIndividualAppointmentGetWithResponse request
	ListAttendeesForIndividualAppointmentGetWithResponse(ctx context.Context, individualAppointmentId string, params *ListAttendeesForIndividualAppointmentGetParams, reqEditors ...RequestEditorFn) (*ListAttendeesForIndividualAppointmentGetResponse, error)

	// ListInvoiceItemsGetWithResponse request
	ListInvoiceItemsGetWithResponse(ctx context.Context, params *ListInvoiceItemsGetParams, reqEditors ...RequestEditorFn) (*ListInvoiceItemsGetResponse, error)

	// GetInvoiceItemGetWithResponse request
	GetInvoiceItemGetWithResponse(ctx context.Context, id string, params *GetInvoiceItemGetParams, reqEditors ...RequestEditorFn) (*GetInvoiceItemGetResponse, error)

	// ListInvoicesGetWithResponse request
	ListInvoicesGetWithResponse(ctx context.Context, params *ListInvoicesGetParams, reqEditors ...RequestEditorFn) (*ListInvoicesGetResponse, error)

	// GetInvoiceGetWithResponse request
	GetInvoiceGetWithResponse(ctx context.Context, id string, params *GetInvoiceGetParams, reqEditors ...RequestEditorFn) (*GetInvoiceGetResponse, error)

	// ListInvoiceItemsForInvoiceGetWithResponse request
	ListInvoiceItemsForInvoiceGetWithResponse(ctx context.Context, invoiceId string, params *ListInvoiceItemsForInvoiceGetParams, reqEditors ...RequestEditorFn) (*ListInvoiceItemsForInvoiceGetResponse, error)

	// ListMedicalAlertsGetWithResponse request
	ListMedicalAlertsGetWithResponse(ctx context.Context, params *ListMedicalAlertsGetParams, reqEditors ...RequestEditorFn) (*ListMedicalAlertsGetResponse, error)

	// CreateMedicalAlertPostWithBodyWithResponse request with any body
	CreateMedicalAlertPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMedicalAlertPostResponse, error)

	CreateMedicalAlertPostWithResponse(ctx context.Context, body CreateMedicalAlertPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMedicalAlertPostResponse, error)

	// DeleteMedicalAlertDeleteWithResponse request
	DeleteMedicalAlertDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteMedicalAlertDeleteResponse, error)

	// GetMedicalAlertGetWithResponse request
	GetMedicalAlertGetWithResponse(ctx context.Context, id string, params *GetMedicalAlertGetParams, reqEditors ...RequestEditorFn) (*GetMedicalAlertGetResponse, error)

	// UpdateMedicalAlertPatchWithBodyWithResponse request with any body
	UpdateMedicalAlertPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMedicalAlertPatchResponse, error)

	UpdateMedicalAlertPatchWithResponse(ctx context.Context, id string, body UpdateMedicalAlertPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMedicalAlertPatchResponse, error)

	// ArchiveMedicalAlertPostWithResponse request
	ArchiveMedicalAlertPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveMedicalAlertPostResponse, error)

	// ListPatientAttachmentsGetWithResponse request
	ListPatientAttachmentsGetWithResponse(ctx context.Context, params *ListPatientAttachmentsGetParams, reqEditors ...RequestEditorFn) (*ListPatientAttachmentsGetResponse, error)

	// CreateUploadedPatientAttachmentPostWithBodyWithResponse request with any body
	CreateUploadedPatientAttachmentPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUploadedPatientAttachmentPostResponse, error)

	CreateUploadedPatientAttachmentPostWithResponse(ctx context.Context, body CreateUploadedPatientAttachmentPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUploadedPatientAttachmentPostResponse, error)

	// DeletePatientAttachmentDeleteWithResponse request
	DeletePatientAttachmentDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePatientAttachmentDeleteResponse, error)

	// GetPatientAttachmentGetWithResponse request
	GetPatientAttachmentGetWithResponse(ctx context.Context, id string, params *GetPatientAttachmentGetParams, reqEditors ...RequestEditorFn) (*GetPatientAttachmentGetResponse, error)

	// ArchivePatientAttachmentPostWithResponse request
	ArchivePatientAttachmentPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchivePatientAttachmentPostResponse, error)

	// ListPatientCasesGetWithResponse request
	ListPatientCasesGetWithResponse(ctx context.Context, params *ListPatientCasesGetParams, reqEditors ...RequestEditorFn) (*ListPatientCasesGetResponse, error)

	// CreatePatientCasePostWithBodyWithResponse request with any body
	CreatePatientCasePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePatientCasePostResponse, error)

	CreatePatientCasePostWithResponse(ctx context.Context, body CreatePatientCasePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePatientCasePostResponse, error)

	// ListActivePatientCasesGetWithResponse request
	ListActivePatientCasesGetWithResponse(ctx context.Context, params *ListActivePatientCasesGetParams, reqEditors ...RequestEditorFn) (*ListActivePatientCasesGetResponse, error)

	// GetPatientCaseGetWithResponse request
	GetPatientCaseGetWithResponse(ctx context.Context, id string, params *GetPatientCaseGetParams, reqEditors ...RequestEditorFn) (*GetPatientCaseGetResponse, error)

	// UpdatePatientCasePatchWithBodyWithResponse request with any body
	UpdatePatientCasePatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePatientCasePatchResponse, error)

	UpdatePatientCasePatchWithResponse(ctx context.Context, id string, body UpdatePatientCasePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePatientCasePatchResponse, error)

	// ArchivePatientCasePostWithResponse request
	ArchivePatientCasePostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchivePatientCasePostResponse, error)

	// ListAttendeesForPatientCaseGetWithResponse request
	ListAttendeesForPatientCaseGetWithResponse(ctx context.Context, patientCaseId string, params *ListAttendeesForPatientCaseGetParams, reqEditors ...RequestEditorFn) (*ListAttendeesForPatientCaseGetResponse, error)

	// ListBookingsForPatientCaseGetWithResponse request
	ListBookingsForPatientCaseGetWithResponse(ctx context.Context, patientCaseId string, params *ListBookingsForPatientCaseGetParams, reqEditors ...RequestEditorFn) (*ListBookingsForPatientCaseGetResponse, error)

	// ListInvoicesForPatientCaseGetWithResponse request
	ListInvoicesForPatientCaseGetWithResponse(ctx context.Context, patientCaseId string, params *ListInvoicesForPatientCaseGetParams, reqEditors ...RequestEditorFn) (*ListInvoicesForPatientCaseGetResponse, error)

	// ListPatientAttachmentsForPatientCaseGetWithResponse request
	ListPatientAttachmentsForPatientCaseGetWithResponse(ctx context.Context, patientCaseId string, params *ListPatientAttachmentsForPatientCaseGetParams, reqEditors ...RequestEditorFn) (*ListPatientAttachmentsForPatientCaseGetResponse, error)

	// ListPatientFormTemplatesGetWithResponse request
	ListPatientFormTemplatesGetWithResponse(ctx context.Context, params *ListPatientFormTemplatesGetParams, reqEditors ...RequestEditorFn) (*ListPatientFormTemplatesGetResponse, error)

	// CreatePatientFormTemplatePostWithBodyWithResponse request with any body
	CreatePatientFormTemplatePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePatientFormTemplatePostResponse, error)

	CreatePatientFormTemplatePostWithResponse(ctx context.Context, body CreatePatientFormTemplatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePatientFormTemplatePostResponse, error)

	// GetPatientFormTemplateGetWithResponse request
	GetPatientFormTemplateGetWithResponse(ctx context.Context, id string, params *GetPatientFormTemplateGetParams, reqEditors ...RequestEditorFn) (*GetPatientFormTemplateGetResponse, error)

	// UpdatePatientFormTemplatePatchWithBodyWithResponse request with any body
	UpdatePatientFormTemplatePatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePatientFormTemplatePatchResponse, error)

	UpdatePatientFormTemplatePatchWithResponse(ctx context.Context, id string, body UpdatePatientFormTemplatePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePatientFormTemplatePatchResponse, error)

	// ArchivePatientFormTemplatePostWithResponse request
	ArchivePatientFormTemplatePostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchivePatientFormTemplatePostResponse, error)

	// ListPatientFormsGetWithResponse request
	ListPatientFormsGetWithResponse(ctx context.Context, params *ListPatientFormsGetParams, reqEditors ...RequestEditorFn) (*ListPatientFormsGetResponse, error)

	// CreatePatientFormPostWithBodyWithResponse request with any body
	CreatePatientFormPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePatientFormPostResponse, error)

	CreatePatientFormPostWithResponse(ctx context.Context, body CreatePatientFormPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePatientFormPostResponse, error)

	// GetPatientFormGetWithResponse request
	GetPatientFormGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPatientFormGetResponse, error)

	// UpdatePatientFormPatchWithBodyWithResponse request with any body
	UpdatePatientFormPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePatientFormPatchResponse, error)

	UpdatePatientFormPatchWithResponse(ctx context.Context, id string, body UpdatePatientFormPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePatientFormPatchResponse, error)

	// ArchivePatientFormPostWithResponse request
	ArchivePatientFormPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchivePatientFormPostResponse, error)

	// GetSignatureGetWithResponse request
	GetSignatureGetWithResponse(ctx context.Context, patientFormId string, id string, reqEditors ...RequestEditorFn) (*GetSignatureGetResponse, error)

	// ListPatientsGetWithResponse request
	ListPatientsGetWithResponse(ctx context.Context, params *ListPatientsGetParams, reqEditors ...RequestEditorFn) (*ListPatientsGetResponse, error)

	// CreatePatientPostWithBodyWithResponse request with any body
	CreatePatientPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePatientPostResponse, error)

	CreatePatientPostWithResponse(ctx context.Context, body CreatePatientPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePatientPostResponse, error)

	// ArchivePatientDeleteWithResponse request
	ArchivePatientDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchivePatientDeleteResponse, error)

	// GetPatientGetWithResponse request
	GetPatientGetWithResponse(ctx context.Context, id string, params *GetPatientGetParams, reqEditors ...RequestEditorFn) (*GetPatientGetResponse, error)

	// UpdatePatientPatchWithBodyWithResponse request with any body
	UpdatePatientPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePatientPatchResponse, error)

	UpdatePatientPatchWithResponse(ctx context.Context, id string, body UpdatePatientPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePatientPatchResponse, error)

	// ArchivePatientPostWithResponse request
	ArchivePatientPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchivePatientPostResponse, error)

	// UnarchivePatientPostWithResponse request
	UnarchivePatientPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UnarchivePatientPostResponse, error)

	// PresignedPostGetWithResponse request
	PresignedPostGetWithResponse(ctx context.Context, patientId string, reqEditors ...RequestEditorFn) (*PresignedPostGetResponse, error)

	// ListInvoicesForPatientGetWithResponse request
	ListInvoicesForPatientGetWithResponse(ctx context.Context, patientId string, params *ListInvoicesForPatientGetParams, reqEditors ...RequestEditorFn) (*ListInvoicesForPatientGetResponse, error)

	// ListMedicalAlertsForPatientGetWithResponse request
	ListMedicalAlertsForPatientGetWithResponse(ctx context.Context, patientId string, params *ListMedicalAlertsForPatientGetParams, reqEditors ...RequestEditorFn) (*ListMedicalAlertsForPatientGetResponse, error)

	// ListPatientAttachmentsForPatientGetWithResponse request
	ListPatientAttachmentsForPatientGetWithResponse(ctx context.Context, patientId string, params *ListPatientAttachmentsForPatientGetParams, reqEditors ...RequestEditorFn) (*ListPatientAttachmentsForPatientGetResponse, error)

	// GetReferralSourceGetWithResponse request
	GetReferralSourceGetWithResponse(ctx context.Context, patientId string, reqEditors ...RequestEditorFn) (*GetReferralSourceGetResponse, error)

	// UpdateReferralSourcePatchWithBodyWithResponse request with any body
	UpdateReferralSourcePatchWithBodyWithResponse(ctx context.Context, patientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateReferralSourcePatchResponse, error)

	UpdateReferralSourcePatchWithResponse(ctx context.Context, patientId string, body UpdateReferralSourcePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateReferralSourcePatchResponse, error)

	// ListTreatmentNotesForPatientGetWithResponse request
	ListTreatmentNotesForPatientGetWithResponse(ctx context.Context, patientId string, params *ListTreatmentNotesForPatientGetParams, reqEditors ...RequestEditorFn) (*ListTreatmentNotesForPatientGetResponse, error)

	// ListPractitionerReferenceNumbersGetWithResponse request
	ListPractitionerReferenceNumbersGetWithResponse(ctx context.Context, params *ListPractitionerReferenceNumbersGetParams, reqEditors ...RequestEditorFn) (*ListPractitionerReferenceNumbersGetResponse, error)

	// CreatePractitionerReferenceNumberPostWithBodyWithResponse request with any body
	CreatePractitionerReferenceNumberPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePractitionerReferenceNumberPostResponse, error)

	CreatePractitionerReferenceNumberPostWithResponse(ctx context.Context, body CreatePractitionerReferenceNumberPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePractitionerReferenceNumberPostResponse, error)

	// DeletePractitionerReferenceNumberDeleteWithResponse request
	DeletePractitionerReferenceNumberDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePractitionerReferenceNumberDeleteResponse, error)

	// GetPractitionerReferenceNumberGetWithResponse request
	GetPractitionerReferenceNumberGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPractitionerReferenceNumberGetResponse, error)

	// UpdatePractitionerReferenceNumberPatchWithBodyWithResponse request with any body
	UpdatePractitionerReferenceNumberPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePractitionerReferenceNumberPatchResponse, error)

	UpdatePractitionerReferenceNumberPatchWithResponse(ctx context.Context, id string, body UpdatePractitionerReferenceNumberPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePractitionerReferenceNumberPatchResponse, error)

	// ListPractitionersGetWithResponse request
	ListPractitionersGetWithResponse(ctx context.Context, params *ListPractitionersGetParams, reqEditors ...RequestEditorFn) (*ListPractitionersGetResponse, error)

	// ListInactivePractitionersGetWithResponse request
	ListInactivePractitionersGetWithResponse(ctx context.Context, params *ListInactivePractitionersGetParams, reqEditors ...RequestEditorFn) (*ListInactivePractitionersGetResponse, error)

	// GetPractitionerGetWithResponse request
	GetPractitionerGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPractitionerGetResponse, error)

	// ListAppointmentTypesForPractitionerGetWithResponse request
	ListAppointmentTypesForPractitionerGetWithResponse(ctx context.Context, practitionerId string, params *ListAppointmentTypesForPractitionerGetParams, reqEditors ...RequestEditorFn) (*ListAppointmentTypesForPractitionerGetResponse, error)

	// ListDailyAvailabilitiesForPractitionerGetWithResponse request
	ListDailyAvailabilitiesForPractitionerGetWithResponse(ctx context.Context, practitionerId string, params *ListDailyAvailabilitiesForPractitionerGetParams, reqEditors ...RequestEditorFn) (*ListDailyAvailabilitiesForPractitionerGetResponse, error)

	// ListInvoicesForPractitionerGetWithResponse request
	ListInvoicesForPractitionerGetWithResponse(ctx context.Context, practitionerId string, params *ListInvoicesForPractitionerGetParams, reqEditors ...RequestEditorFn) (*ListInvoicesForPractitionerGetResponse, error)

	// ListPractitionerReferenceNumbersForPractitionerGetWithResponse request
	ListPractitionerReferenceNumbersForPractitionerGetWithResponse(ctx context.Context, practitionerId string, params *ListPractitionerReferenceNumbersForPractitionerGetParams, reqEditors ...RequestEditorFn) (*ListPractitionerReferenceNumbersForPractitionerGetResponse, error)

	// ListProductSuppliersGetWithResponse request
	ListProductSuppliersGetWithResponse(ctx context.Context, params *ListProductSuppliersGetParams, reqEditors ...RequestEditorFn) (*ListProductSuppliersGetResponse, error)

	// CreateProductSupplierPostWithBodyWithResponse request with any body
	CreateProductSupplierPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProductSupplierPostResponse, error)

	CreateProductSupplierPostWithResponse(ctx context.Context, body CreateProductSupplierPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProductSupplierPostResponse, error)

	// DeleteProductSupplierDeleteWithResponse request
	DeleteProductSupplierDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteProductSupplierDeleteResponse, error)

	// GetProductSupplierGetWithResponse request
	GetProductSupplierGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetProductSupplierGetResponse, error)

	// UpdateProductSupplierPatchWithBodyWithResponse request with any body
	UpdateProductSupplierPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProductSupplierPatchResponse, error)

	UpdateProductSupplierPatchWithResponse(ctx context.Context, id string, body UpdateProductSupplierPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProductSupplierPatchResponse, error)

	// ArchiveProductSupplierPostWithResponse request
	ArchiveProductSupplierPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveProductSupplierPostResponse, error)

	// ListProductsGetWithResponse request
	ListProductsGetWithResponse(ctx context.Context, params *ListProductsGetParams, reqEditors ...RequestEditorFn) (*ListProductsGetResponse, error)

	// CreateProductPostWithBodyWithResponse request with any body
	CreateProductPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProductPostResponse, error)

	CreateProductPostWithResponse(ctx context.Context, body CreateProductPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProductPostResponse, error)

	// DeleteProductDeleteWithResponse request
	DeleteProductDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteProductDeleteResponse, error)

	// GetProductGetWithResponse request
	GetProductGetWithResponse(ctx context.Context, id string, params *GetProductGetParams, reqEditors ...RequestEditorFn) (*GetProductGetResponse, error)

	// UpdateProductPatchWithBodyWithResponse request with any body
	UpdateProductPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProductPatchResponse, error)

	UpdateProductPatchWithResponse(ctx context.Context, id string, body UpdateProductPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProductPatchResponse, error)

	// ArchiveProductPostWithResponse request
	ArchiveProductPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveProductPostResponse, error)

	// ListReferralSourceTypesGetWithResponse request
	ListReferralSourceTypesGetWithResponse(ctx context.Context, params *ListReferralSourceTypesGetParams, reqEditors ...RequestEditorFn) (*ListReferralSourceTypesGetResponse, error)

	// GetReferralSourceTypeGetWithResponse request
	GetReferralSourceTypeGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetReferralSourceTypeGetResponse, error)

	// ListReferralSourcesGetWithResponse request
	ListReferralSourcesGetWithResponse(ctx context.Context, params *ListReferralSourcesGetParams, reqEditors ...RequestEditorFn) (*ListReferralSourcesGetResponse, error)

	// ListServicesGetWithResponse request
	ListServicesGetWithResponse(ctx context.Context, params *ListServicesGetParams, reqEditors ...RequestEditorFn) (*ListServicesGetResponse, error)

	// GetSettingsGetWithResponse request
	GetSettingsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsGetResponse, error)

	// GetPublicSettingsGetWithResponse request
	GetPublicSettingsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPublicSettingsGetResponse, error)

	// ListStockAdjustmentsGetWithResponse request
	ListStockAdjustmentsGetWithResponse(ctx context.Context, params *ListStockAdjustmentsGetParams, reqEditors ...RequestEditorFn) (*ListStockAdjustmentsGetResponse, error)

	// CreateStockAdjustmentPostWithBodyWithResponse request with any body
	CreateStockAdjustmentPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStockAdjustmentPostResponse, error)

	CreateStockAdjustmentPostWithResponse(ctx context.Context, body CreateStockAdjustmentPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStockAdjustmentPostResponse, error)

	// GetStockAdjustmentGetWithResponse request
	GetStockAdjustmentGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStockAdjustmentGetResponse, error)

	// ListTaxesGetWithResponse request
	ListTaxesGetWithResponse(ctx context.Context, params *ListTaxesGetParams, reqEditors ...RequestEditorFn) (*ListTaxesGetResponse, error)

	// CreateTaxPostWithBodyWithResponse request with any body
	CreateTaxPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTaxPostResponse, error)

	CreateTaxPostWithResponse(ctx context.Context, body CreateTaxPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTaxPostResponse, error)

	// DeleteTaxDeleteWithResponse request
	DeleteTaxDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTaxDeleteResponse, error)

	// GetTaxGetWithResponse request
	GetTaxGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTaxGetResponse, error)

	// UpdateTaxPatchWithBodyWithResponse request with any body
	UpdateTaxPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTaxPatchResponse, error)

	UpdateTaxPatchWithResponse(ctx context.Context, id string, body UpdateTaxPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTaxPatchResponse, error)

	// ListTreatmentNoteTemplatesGetWithResponse request
	ListTreatmentNoteTemplatesGetWithResponse(ctx context.Context, params *ListTreatmentNoteTemplatesGetParams, reqEditors ...RequestEditorFn) (*ListTreatmentNoteTemplatesGetResponse, error)

	// CreateTreatmentNoteTemplatePostWithBodyWithResponse request with any body
	CreateTreatmentNoteTemplatePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTreatmentNoteTemplatePostResponse, error)

	CreateTreatmentNoteTemplatePostWithResponse(ctx context.Context, body CreateTreatmentNoteTemplatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTreatmentNoteTemplatePostResponse, error)

	// DeleteTreatmentNoteTemplateDeleteWithResponse request
	DeleteTreatmentNoteTemplateDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTreatmentNoteTemplateDeleteResponse, error)

	// GetTreatmentNoteTemplateGetWithResponse request
	GetTreatmentNoteTemplateGetWithResponse(ctx context.Context, id string, params *GetTreatmentNoteTemplateGetParams, reqEditors ...RequestEditorFn) (*GetTreatmentNoteTemplateGetResponse, error)

	// UpdateTreatmentNoteTemplatePatchWithBodyWithResponse request with any body
	UpdateTreatmentNoteTemplatePatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTreatmentNoteTemplatePatchResponse, error)

	UpdateTreatmentNoteTemplatePatchWithResponse(ctx context.Context, id string, body UpdateTreatmentNoteTemplatePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTreatmentNoteTemplatePatchResponse, error)

	// ArchiveTreatmentNoteTemplatePostWithResponse request
	ArchiveTreatmentNoteTemplatePostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveTreatmentNoteTemplatePostResponse, error)

	// ListTreatmentNotesGetWithResponse request
	ListTreatmentNotesGetWithResponse(ctx context.Context, params *ListTreatmentNotesGetParams, reqEditors ...RequestEditorFn) (*ListTreatmentNotesGetResponse, error)

	// CreateTreatmentNotePostWithBodyWithResponse request with any body
	CreateTreatmentNotePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTreatmentNotePostResponse, error)

	CreateTreatmentNotePostWithResponse(ctx context.Context, body CreateTreatmentNotePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTreatmentNotePostResponse, error)

	// DeleteTreatmentNoteDeleteWithResponse request
	DeleteTreatmentNoteDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTreatmentNoteDeleteResponse, error)

	// GetTreatmentNoteGetWithResponse request
	GetTreatmentNoteGetWithResponse(ctx context.Context, id string, params *GetTreatmentNoteGetParams, reqEditors ...RequestEditorFn) (*GetTreatmentNoteGetResponse, error)

	// UpdateTreatmentNotePatchWithBodyWithResponse request with any body
	UpdateTreatmentNotePatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTreatmentNotePatchResponse, error)

	UpdateTreatmentNotePatchWithResponse(ctx context.Context, id string, body UpdateTreatmentNotePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTreatmentNotePatchResponse, error)

	// ArchiveTreatmentNotePostWithResponse request
	ArchiveTreatmentNotePostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveTreatmentNotePostResponse, error)

	// ListUnavailableBlocksGetWithResponse request
	ListUnavailableBlocksGetWithResponse(ctx context.Context, params *ListUnavailableBlocksGetParams, reqEditors ...RequestEditorFn) (*ListUnavailableBlocksGetResponse, error)

	// CreateUnavailableBlockPostWithBodyWithResponse request with any body
	CreateUnavailableBlockPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUnavailableBlockPostResponse, error)

	CreateUnavailableBlockPostWithResponse(ctx context.Context, body CreateUnavailableBlockPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUnavailableBlockPostResponse, error)

	// DeleteUnavailableBlockDeleteWithResponse request
	DeleteUnavailableBlockDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteUnavailableBlockDeleteResponse, error)

	// GetUnavailableBlockGetWithResponse request
	GetUnavailableBlockGetWithResponse(ctx context.Context, id string, params *GetUnavailableBlockGetParams, reqEditors ...RequestEditorFn) (*GetUnavailableBlockGetResponse, error)

	// UpdateUnavailableBlockPatchWithBodyWithResponse request with any body
	UpdateUnavailableBlockPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUnavailableBlockPatchResponse, error)

	UpdateUnavailableBlockPatchWithResponse(ctx context.Context, id string, body UpdateUnavailableBlockPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUnavailableBlockPatchResponse, error)

	// ArchiveUnavailableBlockPostWithResponse request
	ArchiveUnavailableBlockPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveUnavailableBlockPostResponse, error)

	// GetUnavailableBlockConflictsGetWithResponse request
	GetUnavailableBlockConflictsGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetUnavailableBlockConflictsGetResponse, error)

	// GetAuthenticatedUserGetWithResponse request
	GetAuthenticatedUserGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthenticatedUserGetResponse, error)

	// ListUsersGetWithResponse request
	ListUsersGetWithResponse(ctx context.Context, params *ListUsersGetParams, reqEditors ...RequestEditorFn) (*ListUsersGetResponse, error)

	// GetUserGetWithResponse request
	GetUserGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetUserGetResponse, error)
}

type ListAppointmentTypesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AppointmentTypes *[]AppointmentType `json:"appointment_types,omitempty"`
		Links            *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAppointmentTypesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAppointmentTypesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAppointmentTypePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AppointmentType
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreateAppointmentTypePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAppointmentTypePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPractitionersForAppointmentTypeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		Practitioners *[]Practitioner `json:"practitioners,omitempty"`
		TotalEntries  *int            `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListPractitionersForAppointmentTypeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPractitionersForAppointmentTypeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInactivePractitionersForAppointmentTypeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		Practitioners *[]Practitioner `json:"practitioners,omitempty"`
		TotalEntries  *int            `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListInactivePractitionersForAppointmentTypeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInactivePractitionersForAppointmentTypeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAppointmentTypeDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAppointmentTypeDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAppointmentTypeDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppointmentTypeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppointmentType
}

// Status returns HTTPResponse.Status
func (r GetAppointmentTypeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppointmentTypeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAppointmentTypePatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppointmentType
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateAppointmentTypePatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAppointmentTypePatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveAppointmentTypePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchiveAppointmentTypePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveAppointmentTypePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInvoicesForAppointmentGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Invoices *[]Invoice `json:"invoices,omitempty"`
		Links    *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListInvoicesForAppointmentGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInvoicesForAppointmentGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAttendeesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Attendees *[]Attendee `json:"attendees,omitempty"`
		Links     *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAttendeesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAttendeesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAttendeePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Attendee
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreateAttendeePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAttendeePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInvoicesForAttendeeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Invoices *[]Invoice `json:"invoices,omitempty"`
		Links    *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListInvoicesForAttendeeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInvoicesForAttendeeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPatientFormsForAttendeeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		PatientForms *[]PatientForm `json:"patient_forms,omitempty"`
		TotalEntries *int           `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListPatientFormsForAttendeeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPatientFormsForAttendeeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAttendeeDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAttendeeDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAttendeeDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAttendeeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Attendee
}

// Status returns HTTPResponse.Status
func (r GetAttendeeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAttendeeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAttendeePatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Attendee
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateAttendeePatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAttendeePatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveAttendeePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchiveAttendeePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveAttendeePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelAttendeePatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CancelAttendeePatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelAttendeePatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAvailabilityBlocksGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AvailabilityBlocks *[]AvailabilityBlock `json:"availability_blocks,omitempty"`
		Links              *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAvailabilityBlocksGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAvailabilityBlocksGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAvailabilityBlockPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AvailabilityBlock
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreateAvailabilityBlockPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAvailabilityBlockPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAvailabilityBlockGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AvailabilityBlock
}

// Status returns HTTPResponse.Status
func (r GetAvailabilityBlockGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAvailabilityBlockGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListBillableItemsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		BillableItems *[]BillableItem `json:"billable_items,omitempty"`
		Links         *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListBillableItemsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBillableItemsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBillableItemPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BillableItem
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreateBillableItemPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBillableItemPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBillableItemDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteBillableItemDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBillableItemDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBillableItemGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillableItem
}

// Status returns HTTPResponse.Status
func (r GetBillableItemGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBillableItemGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateBillableItemPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillableItem
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateBillableItemPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateBillableItemPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveBillableItemPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchiveBillableItemPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveBillableItemPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListBookingsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Bookings *[]Booking `json:"bookings,omitempty"`
		Links    *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListBookingsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBookingsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBookingGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Booking
}

// Status returns HTTPResponse.Status
func (r GetBookingGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBookingGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListBusinessesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Businesses *[]Business `json:"businesses,omitempty"`
		Links      *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListBusinessesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBusinessesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBusinessPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Business
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreateBusinessPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBusinessPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDailyAvailabilitiesForBusinessGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DailyAvailabilities *[]DailyAvailability `json:"daily_availabilities,omitempty"`
		Links               *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListDailyAvailabilitiesForBusinessGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDailyAvailabilitiesForBusinessGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPractitionersForBusinessGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		Practitioners *[]Practitioner `json:"practitioners,omitempty"`
		TotalEntries  *int            `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListPractitionersForBusinessGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPractitionersForBusinessGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInactivePractitionersForBusinessGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		Practitioners *[]Practitioner `json:"practitioners,omitempty"`
		TotalEntries  *int            `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListInactivePractitionersForBusinessGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInactivePractitionersForBusinessGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllAvailableTimesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AvailableTimes *interface{} `json:"available_times,omitempty"`
		Links          *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAllAvailableTimesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllAvailableTimesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNextAvailableTimeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AppointmentStart *time.Time `json:"appointment_start,omitempty"`
		Links            *struct {
			Self *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetNextAvailableTimeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNextAvailableTimeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServicesForBusinessGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		Services     *[]Service `json:"services,omitempty"`
		TotalEntries *int       `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListServicesForBusinessGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServicesForBusinessGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBusinessDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteBusinessDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBusinessDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBusinessGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Business
}

// Status returns HTTPResponse.Status
func (r GetBusinessGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBusinessGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateBusinessPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Business
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateBusinessPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateBusinessPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveBusinessPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchiveBusinessPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveBusinessPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnarchiveBusinessPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Business
}

// Status returns HTTPResponse.Status
func (r UnarchiveBusinessPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnarchiveBusinessPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCommunicationsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Communications *[]Communication `json:"communications,omitempty"`
		Links          *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListCommunicationsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCommunicationsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMemoCommunicationPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MemoCommunication
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreateMemoCommunicationPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMemoCommunicationPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCommunicationGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Communication
}

// Status returns HTTPResponse.Status
func (r GetCommunicationGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommunicationGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMemoCommunicationPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MemoCommunication
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateMemoCommunicationPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMemoCommunicationPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveMemoCommunicationPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchiveMemoCommunicationPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveMemoCommunicationPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListConcessionPricesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ConcessionPrices *[]ConcessionPrice `json:"concession_prices,omitempty"`
		Links            *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListConcessionPricesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListConcessionPricesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConcessionPriceGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConcessionPrice
}

// Status returns HTTPResponse.Status
func (r GetConcessionPriceGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConcessionPriceGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListConcessionTypesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ConcessionTypes *[]ConcessionType `json:"concession_types,omitempty"`
		Links           *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListConcessionTypesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListConcessionTypesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateConcessionTypePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ConcessionType
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreateConcessionTypePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateConcessionTypePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConcessionTypeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConcessionType
}

// Status returns HTTPResponse.Status
func (r GetConcessionTypeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConcessionTypeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateConcessionTypePatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConcessionType
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateConcessionTypePatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateConcessionTypePatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListContactsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Contacts *[]Contact `json:"contacts,omitempty"`
		Links    *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListContactsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListContactsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateContactPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Contact
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreateContactPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateContactPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContactDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteContactDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContactDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Contact
}

// Status returns HTTPResponse.Status
func (r GetContactGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateContactPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Contact
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateContactPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateContactPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveContactPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchiveContactPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveContactPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDailyAvailabilitiesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DailyAvailabilities *[]DailyAvailability `json:"daily_availabilities,omitempty"`
		Links               *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListDailyAvailabilitiesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDailyAvailabilitiesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDailyAvailabilityGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DailyAvailability
}

// Status returns HTTPResponse.Status
func (r GetDailyAvailabilityGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDailyAvailabilityGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListGroupAppointmentsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		GroupAppointments *[]GroupAppointment `json:"group_appointments,omitempty"`
		Links             *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListGroupAppointmentsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListGroupAppointmentsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGroupAppointmentPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GroupAppointment
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreateGroupAppointmentPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGroupAppointmentPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAttendeesForGroupAppointmentGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Attendees *[]Attendee `json:"attendees,omitempty"`
		Links     *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAttendeesForGroupAppointmentGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAttendeesForGroupAppointmentGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGroupAppointmentDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteGroupAppointmentDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGroupAppointmentDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupAppointmentGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupAppointment
}

// Status returns HTTPResponse.Status
func (r GetGroupAppointmentGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupAppointmentGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateGroupAppointmentPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupAppointment
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateGroupAppointmentPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGroupAppointmentPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveGroupAppointmentPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchiveGroupAppointmentPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveGroupAppointmentPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupAppointmentConflictsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Conflicts *struct {
			Exist *bool `json:"exist,omitempty"`
		} `json:"conflicts,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetGroupAppointmentConflictsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupAppointmentConflictsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIndividualAppointmentsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		IndividualAppointments *[]IndividualAppointment `json:"individual_appointments,omitempty"`
		Links                  *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListIndividualAppointmentsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIndividualAppointmentsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIndividualAppointmentPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IndividualAppointment
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreateIndividualAppointmentPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIndividualAppointmentPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualAppointmentDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualAppointmentDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualAppointmentDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndividualAppointmentGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndividualAppointment
}

// Status returns HTTPResponse.Status
func (r GetIndividualAppointmentGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndividualAppointmentGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIndividualAppointmentPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndividualAppointment
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateIndividualAppointmentPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIndividualAppointmentPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveIndividualAppointmentPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchiveIndividualAppointmentPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveIndividualAppointmentPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelIndividualAppointmentPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CancelIndividualAppointmentPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelIndividualAppointmentPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndividualAppointmentConflictsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Conflicts *struct {
			Exist *bool `json:"exist,omitempty"`
		} `json:"conflicts,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetIndividualAppointmentConflictsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndividualAppointmentConflictsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAttendeesForIndividualAppointmentGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Attendees *[]Attendee `json:"attendees,omitempty"`
		Links     *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAttendeesForIndividualAppointmentGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAttendeesForIndividualAppointmentGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInvoiceItemsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		InvoiceItems *[]InvoiceItem `json:"invoice_items,omitempty"`
		Links        *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListInvoiceItemsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInvoiceItemsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoiceItemGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvoiceItem
}

// Status returns HTTPResponse.Status
func (r GetInvoiceItemGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoiceItemGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInvoicesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Invoices *[]Invoice `json:"invoices,omitempty"`
		Links    *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListInvoicesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInvoicesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoiceGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invoice
}

// Status returns HTTPResponse.Status
func (r GetInvoiceGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoiceGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInvoiceItemsForInvoiceGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		InvoiceItems *[]InvoiceItem `json:"invoice_items,omitempty"`
		Links        *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListInvoiceItemsForInvoiceGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInvoiceItemsForInvoiceGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMedicalAlertsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		MedicalAlerts *[]MedicalAlert `json:"medical_alerts,omitempty"`
		TotalEntries  *int            `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListMedicalAlertsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMedicalAlertsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMedicalAlertPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MedicalAlert
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreateMedicalAlertPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMedicalAlertPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMedicalAlertDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMedicalAlertDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMedicalAlertDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMedicalAlertGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MedicalAlert
}

// Status returns HTTPResponse.Status
func (r GetMedicalAlertGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMedicalAlertGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMedicalAlertPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MedicalAlert
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateMedicalAlertPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMedicalAlertPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveMedicalAlertPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchiveMedicalAlertPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveMedicalAlertPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPatientAttachmentsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		PatientAttachments *[]PatientAttachment `json:"patient_attachments,omitempty"`
		TotalEntries       *int                 `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListPatientAttachmentsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPatientAttachmentsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUploadedPatientAttachmentPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UploadedPatientAttachment
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreateUploadedPatientAttachmentPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUploadedPatientAttachmentPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePatientAttachmentDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePatientAttachmentDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePatientAttachmentDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatientAttachmentGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatientAttachment
}

// Status returns HTTPResponse.Status
func (r GetPatientAttachmentGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatientAttachmentGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchivePatientAttachmentPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchivePatientAttachmentPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchivePatientAttachmentPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPatientCasesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		PatientCases *[]PatientCase `json:"patient_cases,omitempty"`
		TotalEntries *int           `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListPatientCasesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPatientCasesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePatientCasePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PatientCase
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreatePatientCasePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePatientCasePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListActivePatientCasesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		PatientCases *[]PatientCase `json:"patient_cases,omitempty"`
		TotalEntries *int           `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListActivePatientCasesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListActivePatientCasesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatientCaseGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatientCase
}

// Status returns HTTPResponse.Status
func (r GetPatientCaseGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatientCaseGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePatientCasePatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatientCase
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r UpdatePatientCasePatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePatientCasePatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchivePatientCasePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchivePatientCasePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchivePatientCasePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAttendeesForPatientCaseGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Attendees *[]Attendee `json:"attendees,omitempty"`
		Links     *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAttendeesForPatientCaseGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAttendeesForPatientCaseGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListBookingsForPatientCaseGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Bookings *[]Booking `json:"bookings,omitempty"`
		Links    *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListBookingsForPatientCaseGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBookingsForPatientCaseGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInvoicesForPatientCaseGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Invoices *[]Invoice `json:"invoices,omitempty"`
		Links    *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListInvoicesForPatientCaseGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInvoicesForPatientCaseGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPatientAttachmentsForPatientCaseGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		PatientAttachments *[]PatientAttachment `json:"patient_attachments,omitempty"`
		TotalEntries       *int                 `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListPatientAttachmentsForPatientCaseGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPatientAttachmentsForPatientCaseGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPatientFormTemplatesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		PatientFormTemplates *[]PatientFormTemplate `json:"patient_form_templates,omitempty"`
		TotalEntries         *int                   `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListPatientFormTemplatesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPatientFormTemplatesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePatientFormTemplatePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PatientFormTemplate
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreatePatientFormTemplatePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePatientFormTemplatePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatientFormTemplateGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatientFormTemplate
}

// Status returns HTTPResponse.Status
func (r GetPatientFormTemplateGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatientFormTemplateGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePatientFormTemplatePatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatientFormTemplate
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r UpdatePatientFormTemplatePatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePatientFormTemplatePatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchivePatientFormTemplatePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchivePatientFormTemplatePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchivePatientFormTemplatePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPatientFormsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		PatientForms *[]PatientForm `json:"patient_forms,omitempty"`
		TotalEntries *int           `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListPatientFormsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPatientFormsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePatientFormPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PatientForm
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreatePatientFormPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePatientFormPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatientFormGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatientForm
}

// Status returns HTTPResponse.Status
func (r GetPatientFormGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatientFormGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePatientFormPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatientForm
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r UpdatePatientFormPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePatientFormPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchivePatientFormPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchivePatientFormPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchivePatientFormPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSignatureGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Signature
}

// Status returns HTTPResponse.Status
func (r GetSignatureGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSignatureGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPatientsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		Patients     *[]Patient `json:"patients,omitempty"`
		TotalEntries *int       `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListPatientsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPatientsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePatientPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Patient
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreatePatientPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePatientPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchivePatientDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchivePatientDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchivePatientDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatientGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Patient
}

// Status returns HTTPResponse.Status
func (r GetPatientGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatientGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePatientPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Patient
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r UpdatePatientPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePatientPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchivePatientPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchivePatientPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchivePatientPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnarchivePatientPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Patient
}

// Status returns HTTPResponse.Status
func (r UnarchivePatientPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnarchivePatientPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PresignedPostGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttachmentPresignedPost
}

// Status returns HTTPResponse.Status
func (r PresignedPostGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PresignedPostGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInvoicesForPatientGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Invoices *[]Invoice `json:"invoices,omitempty"`
		Links    *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListInvoicesForPatientGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInvoicesForPatientGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMedicalAlertsForPatientGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		MedicalAlerts *[]MedicalAlert `json:"medical_alerts,omitempty"`
		TotalEntries  *int            `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListMedicalAlertsForPatientGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMedicalAlertsForPatientGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPatientAttachmentsForPatientGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		PatientAttachments *[]PatientAttachment `json:"patient_attachments,omitempty"`
		TotalEntries       *int                 `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListPatientAttachmentsForPatientGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPatientAttachmentsForPatientGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReferralSourceGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReferralSource
}

// Status returns HTTPResponse.Status
func (r GetReferralSourceGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReferralSourceGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateReferralSourcePatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReferralSource
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateReferralSourcePatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateReferralSourcePatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTreatmentNotesForPatientGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries   *int             `json:"total_entries,omitempty"`
		TreatmentNotes *[]TreatmentNote `json:"treatment_notes,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListTreatmentNotesForPatientGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTreatmentNotesForPatientGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPractitionerReferenceNumbersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		PractitionerReferenceNumbers *[]PractitionerReferenceNumber `json:"practitioner_reference_numbers,omitempty"`
		TotalEntries                 *int                           `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListPractitionerReferenceNumbersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPractitionerReferenceNumbersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePractitionerReferenceNumberPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PractitionerReferenceNumber
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreatePractitionerReferenceNumberPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePractitionerReferenceNumberPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePractitionerReferenceNumberDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePractitionerReferenceNumberDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePractitionerReferenceNumberDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPractitionerReferenceNumberGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PractitionerReferenceNumber
}

// Status returns HTTPResponse.Status
func (r GetPractitionerReferenceNumberGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPractitionerReferenceNumberGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePractitionerReferenceNumberPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PractitionerReferenceNumber
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r UpdatePractitionerReferenceNumberPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePractitionerReferenceNumberPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPractitionersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		Practitioners *[]Practitioner `json:"practitioners,omitempty"`
		TotalEntries  *int            `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListPractitionersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPractitionersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInactivePractitionersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		Practitioners *[]Practitioner `json:"practitioners,omitempty"`
		TotalEntries  *int            `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListInactivePractitionersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInactivePractitionersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPractitionerGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Practitioner
}

// Status returns HTTPResponse.Status
func (r GetPractitionerGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPractitionerGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAppointmentTypesForPractitionerGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AppointmentTypes *[]AppointmentType `json:"appointment_types,omitempty"`
		Links            *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAppointmentTypesForPractitionerGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAppointmentTypesForPractitionerGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDailyAvailabilitiesForPractitionerGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DailyAvailabilities *[]DailyAvailability `json:"daily_availabilities,omitempty"`
		Links               *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListDailyAvailabilitiesForPractitionerGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDailyAvailabilitiesForPractitionerGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInvoicesForPractitionerGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Invoices *[]Invoice `json:"invoices,omitempty"`
		Links    *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListInvoicesForPractitionerGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInvoicesForPractitionerGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPractitionerReferenceNumbersForPractitionerGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		PractitionerReferenceNumbers *[]PractitionerReferenceNumber `json:"practitioner_reference_numbers,omitempty"`
		TotalEntries                 *int                           `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListPractitionerReferenceNumbersForPractitionerGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPractitionerReferenceNumbersForPractitionerGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListProductSuppliersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		ProductSuppliers *[]ProductSupplier `json:"product_suppliers,omitempty"`
		TotalEntries     *int               `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListProductSuppliersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListProductSuppliersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProductSupplierPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProductSupplier
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreateProductSupplierPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProductSupplierPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProductSupplierDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteProductSupplierDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProductSupplierDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductSupplierGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductSupplier
}

// Status returns HTTPResponse.Status
func (r GetProductSupplierGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductSupplierGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProductSupplierPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductSupplier
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateProductSupplierPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProductSupplierPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveProductSupplierPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchiveProductSupplierPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveProductSupplierPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListProductsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		Products     *[]Product `json:"products,omitempty"`
		TotalEntries *int       `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListProductsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListProductsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProductPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Product
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreateProductPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProductPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProductDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteProductDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProductDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Product
}

// Status returns HTTPResponse.Status
func (r GetProductGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProductPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Product
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateProductPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProductPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveProductPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchiveProductPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveProductPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListReferralSourceTypesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		ReferralSourceTypes *[]ReferralSourceType `json:"referral_source_types,omitempty"`
		TotalEntries        *int                  `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListReferralSourceTypesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListReferralSourceTypesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReferralSourceTypeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReferralSourceType
}

// Status returns HTTPResponse.Status
func (r GetReferralSourceTypeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReferralSourceTypeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListReferralSourcesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		ReferralSources *[]ReferralSource `json:"referral_sources,omitempty"`
		TotalEntries    *int              `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListReferralSourcesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListReferralSourcesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServicesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		Services     *[]Service `json:"services,omitempty"`
		TotalEntries *int       `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListServicesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServicesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Settings
}

// Status returns HTTPResponse.Status
func (r GetSettingsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicSettingsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PublicSettings
}

// Status returns HTTPResponse.Status
func (r GetPublicSettingsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicSettingsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListStockAdjustmentsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		StockAdjustments *[]StockAdjustment `json:"stock_adjustments,omitempty"`
		TotalEntries     *int               `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListStockAdjustmentsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListStockAdjustmentsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStockAdjustmentPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *StockAdjustment
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreateStockAdjustmentPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStockAdjustmentPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStockAdjustmentGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StockAdjustment
}

// Status returns HTTPResponse.Status
func (r GetStockAdjustmentGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStockAdjustmentGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTaxesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		Taxes        *[]Tax `json:"taxes,omitempty"`
		TotalEntries *int   `json:"total_entries,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListTaxesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTaxesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTaxPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Tax
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreateTaxPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTaxPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTaxDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTaxDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTaxDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tax
}

// Status returns HTTPResponse.Status
func (r GetTaxGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTaxPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tax
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateTaxPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTaxPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTreatmentNoteTemplatesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries           *int                     `json:"total_entries,omitempty"`
		TreatmentNoteTemplates *[]TreatmentNoteTemplate `json:"treatment_note_templates,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListTreatmentNoteTemplatesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTreatmentNoteTemplatesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTreatmentNoteTemplatePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TreatmentNoteTemplate
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreateTreatmentNoteTemplatePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTreatmentNoteTemplatePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTreatmentNoteTemplateDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTreatmentNoteTemplateDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTreatmentNoteTemplateDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTreatmentNoteTemplateGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TreatmentNoteTemplate
}

// Status returns HTTPResponse.Status
func (r GetTreatmentNoteTemplateGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTreatmentNoteTemplateGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTreatmentNoteTemplatePatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TreatmentNoteTemplate
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateTreatmentNoteTemplatePatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTreatmentNoteTemplatePatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveTreatmentNoteTemplatePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchiveTreatmentNoteTemplatePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveTreatmentNoteTemplatePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTreatmentNotesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries   *int             `json:"total_entries,omitempty"`
		TreatmentNotes *[]TreatmentNote `json:"treatment_notes,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListTreatmentNotesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTreatmentNotesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTreatmentNotePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TreatmentNote
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreateTreatmentNotePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTreatmentNotePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTreatmentNoteDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTreatmentNoteDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTreatmentNoteDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTreatmentNoteGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TreatmentNote
}

// Status returns HTTPResponse.Status
func (r GetTreatmentNoteGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTreatmentNoteGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTreatmentNotePatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TreatmentNote
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateTreatmentNotePatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTreatmentNotePatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveTreatmentNotePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchiveTreatmentNotePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveTreatmentNotePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUnavailableBlocksGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries      *int                `json:"total_entries,omitempty"`
		UnavailableBlocks *[]UnavailableBlock `json:"unavailable_blocks,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListUnavailableBlocksGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUnavailableBlocksGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUnavailableBlockPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UnavailableBlock
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreateUnavailableBlockPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUnavailableBlockPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUnavailableBlockDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUnavailableBlockDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUnavailableBlockDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUnavailableBlockGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UnavailableBlock
}

// Status returns HTTPResponse.Status
func (r GetUnavailableBlockGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUnavailableBlockGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUnavailableBlockPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UnavailableBlock
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateUnavailableBlockPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUnavailableBlockPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveUnavailableBlockPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchiveUnavailableBlockPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveUnavailableBlockPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUnavailableBlockConflictsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Conflicts *struct {
			Exist *bool `json:"exist,omitempty"`
		} `json:"conflicts,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUnavailableBlockConflictsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUnavailableBlockConflictsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthenticatedUserGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetAuthenticatedUserGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthenticatedUserGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			Next     *string `json:"next,omitempty"`
			Previous *string `json:"previous,omitempty"`
			Self     *string `json:"self,omitempty"`
		} `json:"links,omitempty"`
		TotalEntries *int    `json:"total_entries,omitempty"`
		Users        *[]User `json:"users,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListUsersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetUserGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListAppointmentTypesGetWithResponse request returning *ListAppointmentTypesGetResponse
func (c *ClientWithResponses) ListAppointmentTypesGetWithResponse(ctx context.Context, params *ListAppointmentTypesGetParams, reqEditors ...RequestEditorFn) (*ListAppointmentTypesGetResponse, error) {
	rsp, err := c.ListAppointmentTypesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAppointmentTypesGetResponse(rsp)
}

// CreateAppointmentTypePostWithBodyWithResponse request with arbitrary body returning *CreateAppointmentTypePostResponse
func (c *ClientWithResponses) CreateAppointmentTypePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAppointmentTypePostResponse, error) {
	rsp, err := c.CreateAppointmentTypePostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAppointmentTypePostResponse(rsp)
}

func (c *ClientWithResponses) CreateAppointmentTypePostWithResponse(ctx context.Context, body CreateAppointmentTypePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAppointmentTypePostResponse, error) {
	rsp, err := c.CreateAppointmentTypePost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAppointmentTypePostResponse(rsp)
}

// ListPractitionersForAppointmentTypeGetWithResponse request returning *ListPractitionersForAppointmentTypeGetResponse
func (c *ClientWithResponses) ListPractitionersForAppointmentTypeGetWithResponse(ctx context.Context, appointmentTypeId string, params *ListPractitionersForAppointmentTypeGetParams, reqEditors ...RequestEditorFn) (*ListPractitionersForAppointmentTypeGetResponse, error) {
	rsp, err := c.ListPractitionersForAppointmentTypeGet(ctx, appointmentTypeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPractitionersForAppointmentTypeGetResponse(rsp)
}

// ListInactivePractitionersForAppointmentTypeGetWithResponse request returning *ListInactivePractitionersForAppointmentTypeGetResponse
func (c *ClientWithResponses) ListInactivePractitionersForAppointmentTypeGetWithResponse(ctx context.Context, appointmentTypeId string, params *ListInactivePractitionersForAppointmentTypeGetParams, reqEditors ...RequestEditorFn) (*ListInactivePractitionersForAppointmentTypeGetResponse, error) {
	rsp, err := c.ListInactivePractitionersForAppointmentTypeGet(ctx, appointmentTypeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInactivePractitionersForAppointmentTypeGetResponse(rsp)
}

// DeleteAppointmentTypeDeleteWithResponse request returning *DeleteAppointmentTypeDeleteResponse
func (c *ClientWithResponses) DeleteAppointmentTypeDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAppointmentTypeDeleteResponse, error) {
	rsp, err := c.DeleteAppointmentTypeDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAppointmentTypeDeleteResponse(rsp)
}

// GetAppointmentTypeGetWithResponse request returning *GetAppointmentTypeGetResponse
func (c *ClientWithResponses) GetAppointmentTypeGetWithResponse(ctx context.Context, id string, params *GetAppointmentTypeGetParams, reqEditors ...RequestEditorFn) (*GetAppointmentTypeGetResponse, error) {
	rsp, err := c.GetAppointmentTypeGet(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppointmentTypeGetResponse(rsp)
}

// UpdateAppointmentTypePatchWithBodyWithResponse request with arbitrary body returning *UpdateAppointmentTypePatchResponse
func (c *ClientWithResponses) UpdateAppointmentTypePatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAppointmentTypePatchResponse, error) {
	rsp, err := c.UpdateAppointmentTypePatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAppointmentTypePatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateAppointmentTypePatchWithResponse(ctx context.Context, id string, body UpdateAppointmentTypePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAppointmentTypePatchResponse, error) {
	rsp, err := c.UpdateAppointmentTypePatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAppointmentTypePatchResponse(rsp)
}

// ArchiveAppointmentTypePostWithResponse request returning *ArchiveAppointmentTypePostResponse
func (c *ClientWithResponses) ArchiveAppointmentTypePostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveAppointmentTypePostResponse, error) {
	rsp, err := c.ArchiveAppointmentTypePost(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveAppointmentTypePostResponse(rsp)
}

// ListInvoicesForAppointmentGetWithResponse request returning *ListInvoicesForAppointmentGetResponse
func (c *ClientWithResponses) ListInvoicesForAppointmentGetWithResponse(ctx context.Context, appointmentId string, params *ListInvoicesForAppointmentGetParams, reqEditors ...RequestEditorFn) (*ListInvoicesForAppointmentGetResponse, error) {
	rsp, err := c.ListInvoicesForAppointmentGet(ctx, appointmentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInvoicesForAppointmentGetResponse(rsp)
}

// ListAttendeesGetWithResponse request returning *ListAttendeesGetResponse
func (c *ClientWithResponses) ListAttendeesGetWithResponse(ctx context.Context, params *ListAttendeesGetParams, reqEditors ...RequestEditorFn) (*ListAttendeesGetResponse, error) {
	rsp, err := c.ListAttendeesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAttendeesGetResponse(rsp)
}

// CreateAttendeePostWithBodyWithResponse request with arbitrary body returning *CreateAttendeePostResponse
func (c *ClientWithResponses) CreateAttendeePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAttendeePostResponse, error) {
	rsp, err := c.CreateAttendeePostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAttendeePostResponse(rsp)
}

func (c *ClientWithResponses) CreateAttendeePostWithResponse(ctx context.Context, body CreateAttendeePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAttendeePostResponse, error) {
	rsp, err := c.CreateAttendeePost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAttendeePostResponse(rsp)
}

// ListInvoicesForAttendeeGetWithResponse request returning *ListInvoicesForAttendeeGetResponse
func (c *ClientWithResponses) ListInvoicesForAttendeeGetWithResponse(ctx context.Context, attendeeId string, params *ListInvoicesForAttendeeGetParams, reqEditors ...RequestEditorFn) (*ListInvoicesForAttendeeGetResponse, error) {
	rsp, err := c.ListInvoicesForAttendeeGet(ctx, attendeeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInvoicesForAttendeeGetResponse(rsp)
}

// ListPatientFormsForAttendeeGetWithResponse request returning *ListPatientFormsForAttendeeGetResponse
func (c *ClientWithResponses) ListPatientFormsForAttendeeGetWithResponse(ctx context.Context, attendeeId string, params *ListPatientFormsForAttendeeGetParams, reqEditors ...RequestEditorFn) (*ListPatientFormsForAttendeeGetResponse, error) {
	rsp, err := c.ListPatientFormsForAttendeeGet(ctx, attendeeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPatientFormsForAttendeeGetResponse(rsp)
}

// DeleteAttendeeDeleteWithResponse request returning *DeleteAttendeeDeleteResponse
func (c *ClientWithResponses) DeleteAttendeeDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAttendeeDeleteResponse, error) {
	rsp, err := c.DeleteAttendeeDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAttendeeDeleteResponse(rsp)
}

// GetAttendeeGetWithResponse request returning *GetAttendeeGetResponse
func (c *ClientWithResponses) GetAttendeeGetWithResponse(ctx context.Context, id string, params *GetAttendeeGetParams, reqEditors ...RequestEditorFn) (*GetAttendeeGetResponse, error) {
	rsp, err := c.GetAttendeeGet(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAttendeeGetResponse(rsp)
}

// UpdateAttendeePatchWithBodyWithResponse request with arbitrary body returning *UpdateAttendeePatchResponse
func (c *ClientWithResponses) UpdateAttendeePatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAttendeePatchResponse, error) {
	rsp, err := c.UpdateAttendeePatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAttendeePatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateAttendeePatchWithResponse(ctx context.Context, id string, body UpdateAttendeePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAttendeePatchResponse, error) {
	rsp, err := c.UpdateAttendeePatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAttendeePatchResponse(rsp)
}

// ArchiveAttendeePostWithResponse request returning *ArchiveAttendeePostResponse
func (c *ClientWithResponses) ArchiveAttendeePostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveAttendeePostResponse, error) {
	rsp, err := c.ArchiveAttendeePost(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveAttendeePostResponse(rsp)
}

// CancelAttendeePatchWithBodyWithResponse request with arbitrary body returning *CancelAttendeePatchResponse
func (c *ClientWithResponses) CancelAttendeePatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelAttendeePatchResponse, error) {
	rsp, err := c.CancelAttendeePatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelAttendeePatchResponse(rsp)
}

func (c *ClientWithResponses) CancelAttendeePatchWithResponse(ctx context.Context, id string, body CancelAttendeePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelAttendeePatchResponse, error) {
	rsp, err := c.CancelAttendeePatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelAttendeePatchResponse(rsp)
}

// ListAvailabilityBlocksGetWithResponse request returning *ListAvailabilityBlocksGetResponse
func (c *ClientWithResponses) ListAvailabilityBlocksGetWithResponse(ctx context.Context, params *ListAvailabilityBlocksGetParams, reqEditors ...RequestEditorFn) (*ListAvailabilityBlocksGetResponse, error) {
	rsp, err := c.ListAvailabilityBlocksGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAvailabilityBlocksGetResponse(rsp)
}

// CreateAvailabilityBlockPostWithBodyWithResponse request with arbitrary body returning *CreateAvailabilityBlockPostResponse
func (c *ClientWithResponses) CreateAvailabilityBlockPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAvailabilityBlockPostResponse, error) {
	rsp, err := c.CreateAvailabilityBlockPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAvailabilityBlockPostResponse(rsp)
}

func (c *ClientWithResponses) CreateAvailabilityBlockPostWithResponse(ctx context.Context, body CreateAvailabilityBlockPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAvailabilityBlockPostResponse, error) {
	rsp, err := c.CreateAvailabilityBlockPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAvailabilityBlockPostResponse(rsp)
}

// GetAvailabilityBlockGetWithResponse request returning *GetAvailabilityBlockGetResponse
func (c *ClientWithResponses) GetAvailabilityBlockGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAvailabilityBlockGetResponse, error) {
	rsp, err := c.GetAvailabilityBlockGet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAvailabilityBlockGetResponse(rsp)
}

// ListBillableItemsGetWithResponse request returning *ListBillableItemsGetResponse
func (c *ClientWithResponses) ListBillableItemsGetWithResponse(ctx context.Context, params *ListBillableItemsGetParams, reqEditors ...RequestEditorFn) (*ListBillableItemsGetResponse, error) {
	rsp, err := c.ListBillableItemsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBillableItemsGetResponse(rsp)
}

// CreateBillableItemPostWithBodyWithResponse request with arbitrary body returning *CreateBillableItemPostResponse
func (c *ClientWithResponses) CreateBillableItemPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBillableItemPostResponse, error) {
	rsp, err := c.CreateBillableItemPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBillableItemPostResponse(rsp)
}

func (c *ClientWithResponses) CreateBillableItemPostWithResponse(ctx context.Context, body CreateBillableItemPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBillableItemPostResponse, error) {
	rsp, err := c.CreateBillableItemPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBillableItemPostResponse(rsp)
}

// DeleteBillableItemDeleteWithResponse request returning *DeleteBillableItemDeleteResponse
func (c *ClientWithResponses) DeleteBillableItemDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteBillableItemDeleteResponse, error) {
	rsp, err := c.DeleteBillableItemDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBillableItemDeleteResponse(rsp)
}

// GetBillableItemGetWithResponse request returning *GetBillableItemGetResponse
func (c *ClientWithResponses) GetBillableItemGetWithResponse(ctx context.Context, id string, params *GetBillableItemGetParams, reqEditors ...RequestEditorFn) (*GetBillableItemGetResponse, error) {
	rsp, err := c.GetBillableItemGet(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBillableItemGetResponse(rsp)
}

// UpdateBillableItemPatchWithBodyWithResponse request with arbitrary body returning *UpdateBillableItemPatchResponse
func (c *ClientWithResponses) UpdateBillableItemPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateBillableItemPatchResponse, error) {
	rsp, err := c.UpdateBillableItemPatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBillableItemPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateBillableItemPatchWithResponse(ctx context.Context, id string, body UpdateBillableItemPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateBillableItemPatchResponse, error) {
	rsp, err := c.UpdateBillableItemPatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBillableItemPatchResponse(rsp)
}

// ArchiveBillableItemPostWithResponse request returning *ArchiveBillableItemPostResponse
func (c *ClientWithResponses) ArchiveBillableItemPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveBillableItemPostResponse, error) {
	rsp, err := c.ArchiveBillableItemPost(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveBillableItemPostResponse(rsp)
}

// ListBookingsGetWithResponse request returning *ListBookingsGetResponse
func (c *ClientWithResponses) ListBookingsGetWithResponse(ctx context.Context, params *ListBookingsGetParams, reqEditors ...RequestEditorFn) (*ListBookingsGetResponse, error) {
	rsp, err := c.ListBookingsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBookingsGetResponse(rsp)
}

// GetBookingGetWithResponse request returning *GetBookingGetResponse
func (c *ClientWithResponses) GetBookingGetWithResponse(ctx context.Context, id string, params *GetBookingGetParams, reqEditors ...RequestEditorFn) (*GetBookingGetResponse, error) {
	rsp, err := c.GetBookingGet(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBookingGetResponse(rsp)
}

// ListBusinessesGetWithResponse request returning *ListBusinessesGetResponse
func (c *ClientWithResponses) ListBusinessesGetWithResponse(ctx context.Context, params *ListBusinessesGetParams, reqEditors ...RequestEditorFn) (*ListBusinessesGetResponse, error) {
	rsp, err := c.ListBusinessesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBusinessesGetResponse(rsp)
}

// CreateBusinessPostWithBodyWithResponse request with arbitrary body returning *CreateBusinessPostResponse
func (c *ClientWithResponses) CreateBusinessPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBusinessPostResponse, error) {
	rsp, err := c.CreateBusinessPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBusinessPostResponse(rsp)
}

func (c *ClientWithResponses) CreateBusinessPostWithResponse(ctx context.Context, body CreateBusinessPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBusinessPostResponse, error) {
	rsp, err := c.CreateBusinessPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBusinessPostResponse(rsp)
}

// ListDailyAvailabilitiesForBusinessGetWithResponse request returning *ListDailyAvailabilitiesForBusinessGetResponse
func (c *ClientWithResponses) ListDailyAvailabilitiesForBusinessGetWithResponse(ctx context.Context, businessId string, params *ListDailyAvailabilitiesForBusinessGetParams, reqEditors ...RequestEditorFn) (*ListDailyAvailabilitiesForBusinessGetResponse, error) {
	rsp, err := c.ListDailyAvailabilitiesForBusinessGet(ctx, businessId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDailyAvailabilitiesForBusinessGetResponse(rsp)
}

// ListPractitionersForBusinessGetWithResponse request returning *ListPractitionersForBusinessGetResponse
func (c *ClientWithResponses) ListPractitionersForBusinessGetWithResponse(ctx context.Context, businessId string, params *ListPractitionersForBusinessGetParams, reqEditors ...RequestEditorFn) (*ListPractitionersForBusinessGetResponse, error) {
	rsp, err := c.ListPractitionersForBusinessGet(ctx, businessId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPractitionersForBusinessGetResponse(rsp)
}

// ListInactivePractitionersForBusinessGetWithResponse request returning *ListInactivePractitionersForBusinessGetResponse
func (c *ClientWithResponses) ListInactivePractitionersForBusinessGetWithResponse(ctx context.Context, businessId string, params *ListInactivePractitionersForBusinessGetParams, reqEditors ...RequestEditorFn) (*ListInactivePractitionersForBusinessGetResponse, error) {
	rsp, err := c.ListInactivePractitionersForBusinessGet(ctx, businessId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInactivePractitionersForBusinessGetResponse(rsp)
}

// GetAllAvailableTimesGetWithResponse request returning *GetAllAvailableTimesGetResponse
func (c *ClientWithResponses) GetAllAvailableTimesGetWithResponse(ctx context.Context, businessId string, practitionerId string, appointmentTypeId string, params *GetAllAvailableTimesGetParams, reqEditors ...RequestEditorFn) (*GetAllAvailableTimesGetResponse, error) {
	rsp, err := c.GetAllAvailableTimesGet(ctx, businessId, practitionerId, appointmentTypeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllAvailableTimesGetResponse(rsp)
}

// GetNextAvailableTimeGetWithResponse request returning *GetNextAvailableTimeGetResponse
func (c *ClientWithResponses) GetNextAvailableTimeGetWithResponse(ctx context.Context, businessId string, practitionerId string, appointmentTypeId string, params *GetNextAvailableTimeGetParams, reqEditors ...RequestEditorFn) (*GetNextAvailableTimeGetResponse, error) {
	rsp, err := c.GetNextAvailableTimeGet(ctx, businessId, practitionerId, appointmentTypeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNextAvailableTimeGetResponse(rsp)
}

// ListServicesForBusinessGetWithResponse request returning *ListServicesForBusinessGetResponse
func (c *ClientWithResponses) ListServicesForBusinessGetWithResponse(ctx context.Context, businessId string, params *ListServicesForBusinessGetParams, reqEditors ...RequestEditorFn) (*ListServicesForBusinessGetResponse, error) {
	rsp, err := c.ListServicesForBusinessGet(ctx, businessId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServicesForBusinessGetResponse(rsp)
}

// DeleteBusinessDeleteWithResponse request returning *DeleteBusinessDeleteResponse
func (c *ClientWithResponses) DeleteBusinessDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteBusinessDeleteResponse, error) {
	rsp, err := c.DeleteBusinessDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBusinessDeleteResponse(rsp)
}

// GetBusinessGetWithResponse request returning *GetBusinessGetResponse
func (c *ClientWithResponses) GetBusinessGetWithResponse(ctx context.Context, id string, params *GetBusinessGetParams, reqEditors ...RequestEditorFn) (*GetBusinessGetResponse, error) {
	rsp, err := c.GetBusinessGet(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBusinessGetResponse(rsp)
}

// UpdateBusinessPatchWithBodyWithResponse request with arbitrary body returning *UpdateBusinessPatchResponse
func (c *ClientWithResponses) UpdateBusinessPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateBusinessPatchResponse, error) {
	rsp, err := c.UpdateBusinessPatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBusinessPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateBusinessPatchWithResponse(ctx context.Context, id string, body UpdateBusinessPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateBusinessPatchResponse, error) {
	rsp, err := c.UpdateBusinessPatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBusinessPatchResponse(rsp)
}

// ArchiveBusinessPostWithResponse request returning *ArchiveBusinessPostResponse
func (c *ClientWithResponses) ArchiveBusinessPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveBusinessPostResponse, error) {
	rsp, err := c.ArchiveBusinessPost(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveBusinessPostResponse(rsp)
}

// UnarchiveBusinessPostWithResponse request returning *UnarchiveBusinessPostResponse
func (c *ClientWithResponses) UnarchiveBusinessPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UnarchiveBusinessPostResponse, error) {
	rsp, err := c.UnarchiveBusinessPost(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnarchiveBusinessPostResponse(rsp)
}

// ListCommunicationsGetWithResponse request returning *ListCommunicationsGetResponse
func (c *ClientWithResponses) ListCommunicationsGetWithResponse(ctx context.Context, params *ListCommunicationsGetParams, reqEditors ...RequestEditorFn) (*ListCommunicationsGetResponse, error) {
	rsp, err := c.ListCommunicationsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCommunicationsGetResponse(rsp)
}

// CreateMemoCommunicationPostWithBodyWithResponse request with arbitrary body returning *CreateMemoCommunicationPostResponse
func (c *ClientWithResponses) CreateMemoCommunicationPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMemoCommunicationPostResponse, error) {
	rsp, err := c.CreateMemoCommunicationPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMemoCommunicationPostResponse(rsp)
}

func (c *ClientWithResponses) CreateMemoCommunicationPostWithResponse(ctx context.Context, body CreateMemoCommunicationPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMemoCommunicationPostResponse, error) {
	rsp, err := c.CreateMemoCommunicationPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMemoCommunicationPostResponse(rsp)
}

// GetCommunicationGetWithResponse request returning *GetCommunicationGetResponse
func (c *ClientWithResponses) GetCommunicationGetWithResponse(ctx context.Context, id string, params *GetCommunicationGetParams, reqEditors ...RequestEditorFn) (*GetCommunicationGetResponse, error) {
	rsp, err := c.GetCommunicationGet(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCommunicationGetResponse(rsp)
}

// UpdateMemoCommunicationPatchWithBodyWithResponse request with arbitrary body returning *UpdateMemoCommunicationPatchResponse
func (c *ClientWithResponses) UpdateMemoCommunicationPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMemoCommunicationPatchResponse, error) {
	rsp, err := c.UpdateMemoCommunicationPatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMemoCommunicationPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateMemoCommunicationPatchWithResponse(ctx context.Context, id string, body UpdateMemoCommunicationPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMemoCommunicationPatchResponse, error) {
	rsp, err := c.UpdateMemoCommunicationPatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMemoCommunicationPatchResponse(rsp)
}

// ArchiveMemoCommunicationPostWithResponse request returning *ArchiveMemoCommunicationPostResponse
func (c *ClientWithResponses) ArchiveMemoCommunicationPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveMemoCommunicationPostResponse, error) {
	rsp, err := c.ArchiveMemoCommunicationPost(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveMemoCommunicationPostResponse(rsp)
}

// ListConcessionPricesGetWithResponse request returning *ListConcessionPricesGetResponse
func (c *ClientWithResponses) ListConcessionPricesGetWithResponse(ctx context.Context, params *ListConcessionPricesGetParams, reqEditors ...RequestEditorFn) (*ListConcessionPricesGetResponse, error) {
	rsp, err := c.ListConcessionPricesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListConcessionPricesGetResponse(rsp)
}

// GetConcessionPriceGetWithResponse request returning *GetConcessionPriceGetResponse
func (c *ClientWithResponses) GetConcessionPriceGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetConcessionPriceGetResponse, error) {
	rsp, err := c.GetConcessionPriceGet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConcessionPriceGetResponse(rsp)
}

// ListConcessionTypesGetWithResponse request returning *ListConcessionTypesGetResponse
func (c *ClientWithResponses) ListConcessionTypesGetWithResponse(ctx context.Context, params *ListConcessionTypesGetParams, reqEditors ...RequestEditorFn) (*ListConcessionTypesGetResponse, error) {
	rsp, err := c.ListConcessionTypesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListConcessionTypesGetResponse(rsp)
}

// CreateConcessionTypePostWithBodyWithResponse request with arbitrary body returning *CreateConcessionTypePostResponse
func (c *ClientWithResponses) CreateConcessionTypePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConcessionTypePostResponse, error) {
	rsp, err := c.CreateConcessionTypePostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConcessionTypePostResponse(rsp)
}

func (c *ClientWithResponses) CreateConcessionTypePostWithResponse(ctx context.Context, body CreateConcessionTypePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConcessionTypePostResponse, error) {
	rsp, err := c.CreateConcessionTypePost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConcessionTypePostResponse(rsp)
}

// GetConcessionTypeGetWithResponse request returning *GetConcessionTypeGetResponse
func (c *ClientWithResponses) GetConcessionTypeGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetConcessionTypeGetResponse, error) {
	rsp, err := c.GetConcessionTypeGet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConcessionTypeGetResponse(rsp)
}

// UpdateConcessionTypePatchWithBodyWithResponse request with arbitrary body returning *UpdateConcessionTypePatchResponse
func (c *ClientWithResponses) UpdateConcessionTypePatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConcessionTypePatchResponse, error) {
	rsp, err := c.UpdateConcessionTypePatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConcessionTypePatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateConcessionTypePatchWithResponse(ctx context.Context, id string, body UpdateConcessionTypePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConcessionTypePatchResponse, error) {
	rsp, err := c.UpdateConcessionTypePatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConcessionTypePatchResponse(rsp)
}

// ListContactsGetWithResponse request returning *ListContactsGetResponse
func (c *ClientWithResponses) ListContactsGetWithResponse(ctx context.Context, params *ListContactsGetParams, reqEditors ...RequestEditorFn) (*ListContactsGetResponse, error) {
	rsp, err := c.ListContactsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListContactsGetResponse(rsp)
}

// CreateContactPostWithBodyWithResponse request with arbitrary body returning *CreateContactPostResponse
func (c *ClientWithResponses) CreateContactPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContactPostResponse, error) {
	rsp, err := c.CreateContactPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContactPostResponse(rsp)
}

func (c *ClientWithResponses) CreateContactPostWithResponse(ctx context.Context, body CreateContactPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContactPostResponse, error) {
	rsp, err := c.CreateContactPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContactPostResponse(rsp)
}

// DeleteContactDeleteWithResponse request returning *DeleteContactDeleteResponse
func (c *ClientWithResponses) DeleteContactDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteContactDeleteResponse, error) {
	rsp, err := c.DeleteContactDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContactDeleteResponse(rsp)
}

// GetContactGetWithResponse request returning *GetContactGetResponse
func (c *ClientWithResponses) GetContactGetWithResponse(ctx context.Context, id string, params *GetContactGetParams, reqEditors ...RequestEditorFn) (*GetContactGetResponse, error) {
	rsp, err := c.GetContactGet(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactGetResponse(rsp)
}

// UpdateContactPatchWithBodyWithResponse request with arbitrary body returning *UpdateContactPatchResponse
func (c *ClientWithResponses) UpdateContactPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContactPatchResponse, error) {
	rsp, err := c.UpdateContactPatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateContactPatchWithResponse(ctx context.Context, id string, body UpdateContactPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContactPatchResponse, error) {
	rsp, err := c.UpdateContactPatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactPatchResponse(rsp)
}

// ArchiveContactPostWithResponse request returning *ArchiveContactPostResponse
func (c *ClientWithResponses) ArchiveContactPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveContactPostResponse, error) {
	rsp, err := c.ArchiveContactPost(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveContactPostResponse(rsp)
}

// ListDailyAvailabilitiesGetWithResponse request returning *ListDailyAvailabilitiesGetResponse
func (c *ClientWithResponses) ListDailyAvailabilitiesGetWithResponse(ctx context.Context, params *ListDailyAvailabilitiesGetParams, reqEditors ...RequestEditorFn) (*ListDailyAvailabilitiesGetResponse, error) {
	rsp, err := c.ListDailyAvailabilitiesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDailyAvailabilitiesGetResponse(rsp)
}

// GetDailyAvailabilityGetWithResponse request returning *GetDailyAvailabilityGetResponse
func (c *ClientWithResponses) GetDailyAvailabilityGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetDailyAvailabilityGetResponse, error) {
	rsp, err := c.GetDailyAvailabilityGet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDailyAvailabilityGetResponse(rsp)
}

// ListGroupAppointmentsGetWithResponse request returning *ListGroupAppointmentsGetResponse
func (c *ClientWithResponses) ListGroupAppointmentsGetWithResponse(ctx context.Context, params *ListGroupAppointmentsGetParams, reqEditors ...RequestEditorFn) (*ListGroupAppointmentsGetResponse, error) {
	rsp, err := c.ListGroupAppointmentsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListGroupAppointmentsGetResponse(rsp)
}

// CreateGroupAppointmentPostWithBodyWithResponse request with arbitrary body returning *CreateGroupAppointmentPostResponse
func (c *ClientWithResponses) CreateGroupAppointmentPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGroupAppointmentPostResponse, error) {
	rsp, err := c.CreateGroupAppointmentPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGroupAppointmentPostResponse(rsp)
}

func (c *ClientWithResponses) CreateGroupAppointmentPostWithResponse(ctx context.Context, body CreateGroupAppointmentPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGroupAppointmentPostResponse, error) {
	rsp, err := c.CreateGroupAppointmentPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGroupAppointmentPostResponse(rsp)
}

// ListAttendeesForGroupAppointmentGetWithResponse request returning *ListAttendeesForGroupAppointmentGetResponse
func (c *ClientWithResponses) ListAttendeesForGroupAppointmentGetWithResponse(ctx context.Context, groupAppointmentId string, params *ListAttendeesForGroupAppointmentGetParams, reqEditors ...RequestEditorFn) (*ListAttendeesForGroupAppointmentGetResponse, error) {
	rsp, err := c.ListAttendeesForGroupAppointmentGet(ctx, groupAppointmentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAttendeesForGroupAppointmentGetResponse(rsp)
}

// DeleteGroupAppointmentDeleteWithResponse request returning *DeleteGroupAppointmentDeleteResponse
func (c *ClientWithResponses) DeleteGroupAppointmentDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteGroupAppointmentDeleteResponse, error) {
	rsp, err := c.DeleteGroupAppointmentDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupAppointmentDeleteResponse(rsp)
}

// GetGroupAppointmentGetWithResponse request returning *GetGroupAppointmentGetResponse
func (c *ClientWithResponses) GetGroupAppointmentGetWithResponse(ctx context.Context, id string, params *GetGroupAppointmentGetParams, reqEditors ...RequestEditorFn) (*GetGroupAppointmentGetResponse, error) {
	rsp, err := c.GetGroupAppointmentGet(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupAppointmentGetResponse(rsp)
}

// UpdateGroupAppointmentPatchWithBodyWithResponse request with arbitrary body returning *UpdateGroupAppointmentPatchResponse
func (c *ClientWithResponses) UpdateGroupAppointmentPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGroupAppointmentPatchResponse, error) {
	rsp, err := c.UpdateGroupAppointmentPatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGroupAppointmentPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateGroupAppointmentPatchWithResponse(ctx context.Context, id string, body UpdateGroupAppointmentPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGroupAppointmentPatchResponse, error) {
	rsp, err := c.UpdateGroupAppointmentPatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGroupAppointmentPatchResponse(rsp)
}

// ArchiveGroupAppointmentPostWithResponse request returning *ArchiveGroupAppointmentPostResponse
func (c *ClientWithResponses) ArchiveGroupAppointmentPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveGroupAppointmentPostResponse, error) {
	rsp, err := c.ArchiveGroupAppointmentPost(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveGroupAppointmentPostResponse(rsp)
}

// GetGroupAppointmentConflictsGetWithResponse request returning *GetGroupAppointmentConflictsGetResponse
func (c *ClientWithResponses) GetGroupAppointmentConflictsGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGroupAppointmentConflictsGetResponse, error) {
	rsp, err := c.GetGroupAppointmentConflictsGet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupAppointmentConflictsGetResponse(rsp)
}

// ListIndividualAppointmentsGetWithResponse request returning *ListIndividualAppointmentsGetResponse
func (c *ClientWithResponses) ListIndividualAppointmentsGetWithResponse(ctx context.Context, params *ListIndividualAppointmentsGetParams, reqEditors ...RequestEditorFn) (*ListIndividualAppointmentsGetResponse, error) {
	rsp, err := c.ListIndividualAppointmentsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIndividualAppointmentsGetResponse(rsp)
}

// CreateIndividualAppointmentPostWithBodyWithResponse request with arbitrary body returning *CreateIndividualAppointmentPostResponse
func (c *ClientWithResponses) CreateIndividualAppointmentPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualAppointmentPostResponse, error) {
	rsp, err := c.CreateIndividualAppointmentPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualAppointmentPostResponse(rsp)
}

func (c *ClientWithResponses) CreateIndividualAppointmentPostWithResponse(ctx context.Context, body CreateIndividualAppointmentPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualAppointmentPostResponse, error) {
	rsp, err := c.CreateIndividualAppointmentPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualAppointmentPostResponse(rsp)
}

// DeleteIndividualAppointmentDeleteWithResponse request returning *DeleteIndividualAppointmentDeleteResponse
func (c *ClientWithResponses) DeleteIndividualAppointmentDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIndividualAppointmentDeleteResponse, error) {
	rsp, err := c.DeleteIndividualAppointmentDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualAppointmentDeleteResponse(rsp)
}

// GetIndividualAppointmentGetWithResponse request returning *GetIndividualAppointmentGetResponse
func (c *ClientWithResponses) GetIndividualAppointmentGetWithResponse(ctx context.Context, id string, params *GetIndividualAppointmentGetParams, reqEditors ...RequestEditorFn) (*GetIndividualAppointmentGetResponse, error) {
	rsp, err := c.GetIndividualAppointmentGet(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndividualAppointmentGetResponse(rsp)
}

// UpdateIndividualAppointmentPatchWithBodyWithResponse request with arbitrary body returning *UpdateIndividualAppointmentPatchResponse
func (c *ClientWithResponses) UpdateIndividualAppointmentPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIndividualAppointmentPatchResponse, error) {
	rsp, err := c.UpdateIndividualAppointmentPatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIndividualAppointmentPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateIndividualAppointmentPatchWithResponse(ctx context.Context, id string, body UpdateIndividualAppointmentPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIndividualAppointmentPatchResponse, error) {
	rsp, err := c.UpdateIndividualAppointmentPatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIndividualAppointmentPatchResponse(rsp)
}

// ArchiveIndividualAppointmentPostWithResponse request returning *ArchiveIndividualAppointmentPostResponse
func (c *ClientWithResponses) ArchiveIndividualAppointmentPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveIndividualAppointmentPostResponse, error) {
	rsp, err := c.ArchiveIndividualAppointmentPost(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveIndividualAppointmentPostResponse(rsp)
}

// CancelIndividualAppointmentPatchWithBodyWithResponse request with arbitrary body returning *CancelIndividualAppointmentPatchResponse
func (c *ClientWithResponses) CancelIndividualAppointmentPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelIndividualAppointmentPatchResponse, error) {
	rsp, err := c.CancelIndividualAppointmentPatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelIndividualAppointmentPatchResponse(rsp)
}

func (c *ClientWithResponses) CancelIndividualAppointmentPatchWithResponse(ctx context.Context, id string, body CancelIndividualAppointmentPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelIndividualAppointmentPatchResponse, error) {
	rsp, err := c.CancelIndividualAppointmentPatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelIndividualAppointmentPatchResponse(rsp)
}

// GetIndividualAppointmentConflictsGetWithResponse request returning *GetIndividualAppointmentConflictsGetResponse
func (c *ClientWithResponses) GetIndividualAppointmentConflictsGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIndividualAppointmentConflictsGetResponse, error) {
	rsp, err := c.GetIndividualAppointmentConflictsGet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndividualAppointmentConflictsGetResponse(rsp)
}

// ListAttendeesForIndividualAppointmentGetWithResponse request returning *ListAttendeesForIndividualAppointmentGetResponse
func (c *ClientWithResponses) ListAttendeesForIndividualAppointmentGetWithResponse(ctx context.Context, individualAppointmentId string, params *ListAttendeesForIndividualAppointmentGetParams, reqEditors ...RequestEditorFn) (*ListAttendeesForIndividualAppointmentGetResponse, error) {
	rsp, err := c.ListAttendeesForIndividualAppointmentGet(ctx, individualAppointmentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAttendeesForIndividualAppointmentGetResponse(rsp)
}

// ListInvoiceItemsGetWithResponse request returning *ListInvoiceItemsGetResponse
func (c *ClientWithResponses) ListInvoiceItemsGetWithResponse(ctx context.Context, params *ListInvoiceItemsGetParams, reqEditors ...RequestEditorFn) (*ListInvoiceItemsGetResponse, error) {
	rsp, err := c.ListInvoiceItemsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInvoiceItemsGetResponse(rsp)
}

// GetInvoiceItemGetWithResponse request returning *GetInvoiceItemGetResponse
func (c *ClientWithResponses) GetInvoiceItemGetWithResponse(ctx context.Context, id string, params *GetInvoiceItemGetParams, reqEditors ...RequestEditorFn) (*GetInvoiceItemGetResponse, error) {
	rsp, err := c.GetInvoiceItemGet(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoiceItemGetResponse(rsp)
}

// ListInvoicesGetWithResponse request returning *ListInvoicesGetResponse
func (c *ClientWithResponses) ListInvoicesGetWithResponse(ctx context.Context, params *ListInvoicesGetParams, reqEditors ...RequestEditorFn) (*ListInvoicesGetResponse, error) {
	rsp, err := c.ListInvoicesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInvoicesGetResponse(rsp)
}

// GetInvoiceGetWithResponse request returning *GetInvoiceGetResponse
func (c *ClientWithResponses) GetInvoiceGetWithResponse(ctx context.Context, id string, params *GetInvoiceGetParams, reqEditors ...RequestEditorFn) (*GetInvoiceGetResponse, error) {
	rsp, err := c.GetInvoiceGet(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoiceGetResponse(rsp)
}

// ListInvoiceItemsForInvoiceGetWithResponse request returning *ListInvoiceItemsForInvoiceGetResponse
func (c *ClientWithResponses) ListInvoiceItemsForInvoiceGetWithResponse(ctx context.Context, invoiceId string, params *ListInvoiceItemsForInvoiceGetParams, reqEditors ...RequestEditorFn) (*ListInvoiceItemsForInvoiceGetResponse, error) {
	rsp, err := c.ListInvoiceItemsForInvoiceGet(ctx, invoiceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInvoiceItemsForInvoiceGetResponse(rsp)
}

// ListMedicalAlertsGetWithResponse request returning *ListMedicalAlertsGetResponse
func (c *ClientWithResponses) ListMedicalAlertsGetWithResponse(ctx context.Context, params *ListMedicalAlertsGetParams, reqEditors ...RequestEditorFn) (*ListMedicalAlertsGetResponse, error) {
	rsp, err := c.ListMedicalAlertsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMedicalAlertsGetResponse(rsp)
}

// CreateMedicalAlertPostWithBodyWithResponse request with arbitrary body returning *CreateMedicalAlertPostResponse
func (c *ClientWithResponses) CreateMedicalAlertPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMedicalAlertPostResponse, error) {
	rsp, err := c.CreateMedicalAlertPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMedicalAlertPostResponse(rsp)
}

func (c *ClientWithResponses) CreateMedicalAlertPostWithResponse(ctx context.Context, body CreateMedicalAlertPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMedicalAlertPostResponse, error) {
	rsp, err := c.CreateMedicalAlertPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMedicalAlertPostResponse(rsp)
}

// DeleteMedicalAlertDeleteWithResponse request returning *DeleteMedicalAlertDeleteResponse
func (c *ClientWithResponses) DeleteMedicalAlertDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteMedicalAlertDeleteResponse, error) {
	rsp, err := c.DeleteMedicalAlertDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMedicalAlertDeleteResponse(rsp)
}

// GetMedicalAlertGetWithResponse request returning *GetMedicalAlertGetResponse
func (c *ClientWithResponses) GetMedicalAlertGetWithResponse(ctx context.Context, id string, params *GetMedicalAlertGetParams, reqEditors ...RequestEditorFn) (*GetMedicalAlertGetResponse, error) {
	rsp, err := c.GetMedicalAlertGet(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMedicalAlertGetResponse(rsp)
}

// UpdateMedicalAlertPatchWithBodyWithResponse request with arbitrary body returning *UpdateMedicalAlertPatchResponse
func (c *ClientWithResponses) UpdateMedicalAlertPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMedicalAlertPatchResponse, error) {
	rsp, err := c.UpdateMedicalAlertPatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMedicalAlertPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateMedicalAlertPatchWithResponse(ctx context.Context, id string, body UpdateMedicalAlertPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMedicalAlertPatchResponse, error) {
	rsp, err := c.UpdateMedicalAlertPatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMedicalAlertPatchResponse(rsp)
}

// ArchiveMedicalAlertPostWithResponse request returning *ArchiveMedicalAlertPostResponse
func (c *ClientWithResponses) ArchiveMedicalAlertPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveMedicalAlertPostResponse, error) {
	rsp, err := c.ArchiveMedicalAlertPost(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveMedicalAlertPostResponse(rsp)
}

// ListPatientAttachmentsGetWithResponse request returning *ListPatientAttachmentsGetResponse
func (c *ClientWithResponses) ListPatientAttachmentsGetWithResponse(ctx context.Context, params *ListPatientAttachmentsGetParams, reqEditors ...RequestEditorFn) (*ListPatientAttachmentsGetResponse, error) {
	rsp, err := c.ListPatientAttachmentsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPatientAttachmentsGetResponse(rsp)
}

// CreateUploadedPatientAttachmentPostWithBodyWithResponse request with arbitrary body returning *CreateUploadedPatientAttachmentPostResponse
func (c *ClientWithResponses) CreateUploadedPatientAttachmentPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUploadedPatientAttachmentPostResponse, error) {
	rsp, err := c.CreateUploadedPatientAttachmentPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUploadedPatientAttachmentPostResponse(rsp)
}

func (c *ClientWithResponses) CreateUploadedPatientAttachmentPostWithResponse(ctx context.Context, body CreateUploadedPatientAttachmentPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUploadedPatientAttachmentPostResponse, error) {
	rsp, err := c.CreateUploadedPatientAttachmentPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUploadedPatientAttachmentPostResponse(rsp)
}

// DeletePatientAttachmentDeleteWithResponse request returning *DeletePatientAttachmentDeleteResponse
func (c *ClientWithResponses) DeletePatientAttachmentDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePatientAttachmentDeleteResponse, error) {
	rsp, err := c.DeletePatientAttachmentDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePatientAttachmentDeleteResponse(rsp)
}

// GetPatientAttachmentGetWithResponse request returning *GetPatientAttachmentGetResponse
func (c *ClientWithResponses) GetPatientAttachmentGetWithResponse(ctx context.Context, id string, params *GetPatientAttachmentGetParams, reqEditors ...RequestEditorFn) (*GetPatientAttachmentGetResponse, error) {
	rsp, err := c.GetPatientAttachmentGet(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatientAttachmentGetResponse(rsp)
}

// ArchivePatientAttachmentPostWithResponse request returning *ArchivePatientAttachmentPostResponse
func (c *ClientWithResponses) ArchivePatientAttachmentPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchivePatientAttachmentPostResponse, error) {
	rsp, err := c.ArchivePatientAttachmentPost(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchivePatientAttachmentPostResponse(rsp)
}

// ListPatientCasesGetWithResponse request returning *ListPatientCasesGetResponse
func (c *ClientWithResponses) ListPatientCasesGetWithResponse(ctx context.Context, params *ListPatientCasesGetParams, reqEditors ...RequestEditorFn) (*ListPatientCasesGetResponse, error) {
	rsp, err := c.ListPatientCasesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPatientCasesGetResponse(rsp)
}

// CreatePatientCasePostWithBodyWithResponse request with arbitrary body returning *CreatePatientCasePostResponse
func (c *ClientWithResponses) CreatePatientCasePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePatientCasePostResponse, error) {
	rsp, err := c.CreatePatientCasePostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePatientCasePostResponse(rsp)
}

func (c *ClientWithResponses) CreatePatientCasePostWithResponse(ctx context.Context, body CreatePatientCasePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePatientCasePostResponse, error) {
	rsp, err := c.CreatePatientCasePost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePatientCasePostResponse(rsp)
}

// ListActivePatientCasesGetWithResponse request returning *ListActivePatientCasesGetResponse
func (c *ClientWithResponses) ListActivePatientCasesGetWithResponse(ctx context.Context, params *ListActivePatientCasesGetParams, reqEditors ...RequestEditorFn) (*ListActivePatientCasesGetResponse, error) {
	rsp, err := c.ListActivePatientCasesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListActivePatientCasesGetResponse(rsp)
}

// GetPatientCaseGetWithResponse request returning *GetPatientCaseGetResponse
func (c *ClientWithResponses) GetPatientCaseGetWithResponse(ctx context.Context, id string, params *GetPatientCaseGetParams, reqEditors ...RequestEditorFn) (*GetPatientCaseGetResponse, error) {
	rsp, err := c.GetPatientCaseGet(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatientCaseGetResponse(rsp)
}

// UpdatePatientCasePatchWithBodyWithResponse request with arbitrary body returning *UpdatePatientCasePatchResponse
func (c *ClientWithResponses) UpdatePatientCasePatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePatientCasePatchResponse, error) {
	rsp, err := c.UpdatePatientCasePatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePatientCasePatchResponse(rsp)
}

func (c *ClientWithResponses) UpdatePatientCasePatchWithResponse(ctx context.Context, id string, body UpdatePatientCasePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePatientCasePatchResponse, error) {
	rsp, err := c.UpdatePatientCasePatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePatientCasePatchResponse(rsp)
}

// ArchivePatientCasePostWithResponse request returning *ArchivePatientCasePostResponse
func (c *ClientWithResponses) ArchivePatientCasePostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchivePatientCasePostResponse, error) {
	rsp, err := c.ArchivePatientCasePost(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchivePatientCasePostResponse(rsp)
}

// ListAttendeesForPatientCaseGetWithResponse request returning *ListAttendeesForPatientCaseGetResponse
func (c *ClientWithResponses) ListAttendeesForPatientCaseGetWithResponse(ctx context.Context, patientCaseId string, params *ListAttendeesForPatientCaseGetParams, reqEditors ...RequestEditorFn) (*ListAttendeesForPatientCaseGetResponse, error) {
	rsp, err := c.ListAttendeesForPatientCaseGet(ctx, patientCaseId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAttendeesForPatientCaseGetResponse(rsp)
}

// ListBookingsForPatientCaseGetWithResponse request returning *ListBookingsForPatientCaseGetResponse
func (c *ClientWithResponses) ListBookingsForPatientCaseGetWithResponse(ctx context.Context, patientCaseId string, params *ListBookingsForPatientCaseGetParams, reqEditors ...RequestEditorFn) (*ListBookingsForPatientCaseGetResponse, error) {
	rsp, err := c.ListBookingsForPatientCaseGet(ctx, patientCaseId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBookingsForPatientCaseGetResponse(rsp)
}

// ListInvoicesForPatientCaseGetWithResponse request returning *ListInvoicesForPatientCaseGetResponse
func (c *ClientWithResponses) ListInvoicesForPatientCaseGetWithResponse(ctx context.Context, patientCaseId string, params *ListInvoicesForPatientCaseGetParams, reqEditors ...RequestEditorFn) (*ListInvoicesForPatientCaseGetResponse, error) {
	rsp, err := c.ListInvoicesForPatientCaseGet(ctx, patientCaseId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInvoicesForPatientCaseGetResponse(rsp)
}

// ListPatientAttachmentsForPatientCaseGetWithResponse request returning *ListPatientAttachmentsForPatientCaseGetResponse
func (c *ClientWithResponses) ListPatientAttachmentsForPatientCaseGetWithResponse(ctx context.Context, patientCaseId string, params *ListPatientAttachmentsForPatientCaseGetParams, reqEditors ...RequestEditorFn) (*ListPatientAttachmentsForPatientCaseGetResponse, error) {
	rsp, err := c.ListPatientAttachmentsForPatientCaseGet(ctx, patientCaseId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPatientAttachmentsForPatientCaseGetResponse(rsp)
}

// ListPatientFormTemplatesGetWithResponse request returning *ListPatientFormTemplatesGetResponse
func (c *ClientWithResponses) ListPatientFormTemplatesGetWithResponse(ctx context.Context, params *ListPatientFormTemplatesGetParams, reqEditors ...RequestEditorFn) (*ListPatientFormTemplatesGetResponse, error) {
	rsp, err := c.ListPatientFormTemplatesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPatientFormTemplatesGetResponse(rsp)
}

// CreatePatientFormTemplatePostWithBodyWithResponse request with arbitrary body returning *CreatePatientFormTemplatePostResponse
func (c *ClientWithResponses) CreatePatientFormTemplatePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePatientFormTemplatePostResponse, error) {
	rsp, err := c.CreatePatientFormTemplatePostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePatientFormTemplatePostResponse(rsp)
}

func (c *ClientWithResponses) CreatePatientFormTemplatePostWithResponse(ctx context.Context, body CreatePatientFormTemplatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePatientFormTemplatePostResponse, error) {
	rsp, err := c.CreatePatientFormTemplatePost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePatientFormTemplatePostResponse(rsp)
}

// GetPatientFormTemplateGetWithResponse request returning *GetPatientFormTemplateGetResponse
func (c *ClientWithResponses) GetPatientFormTemplateGetWithResponse(ctx context.Context, id string, params *GetPatientFormTemplateGetParams, reqEditors ...RequestEditorFn) (*GetPatientFormTemplateGetResponse, error) {
	rsp, err := c.GetPatientFormTemplateGet(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatientFormTemplateGetResponse(rsp)
}

// UpdatePatientFormTemplatePatchWithBodyWithResponse request with arbitrary body returning *UpdatePatientFormTemplatePatchResponse
func (c *ClientWithResponses) UpdatePatientFormTemplatePatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePatientFormTemplatePatchResponse, error) {
	rsp, err := c.UpdatePatientFormTemplatePatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePatientFormTemplatePatchResponse(rsp)
}

func (c *ClientWithResponses) UpdatePatientFormTemplatePatchWithResponse(ctx context.Context, id string, body UpdatePatientFormTemplatePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePatientFormTemplatePatchResponse, error) {
	rsp, err := c.UpdatePatientFormTemplatePatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePatientFormTemplatePatchResponse(rsp)
}

// ArchivePatientFormTemplatePostWithResponse request returning *ArchivePatientFormTemplatePostResponse
func (c *ClientWithResponses) ArchivePatientFormTemplatePostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchivePatientFormTemplatePostResponse, error) {
	rsp, err := c.ArchivePatientFormTemplatePost(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchivePatientFormTemplatePostResponse(rsp)
}

// ListPatientFormsGetWithResponse request returning *ListPatientFormsGetResponse
func (c *ClientWithResponses) ListPatientFormsGetWithResponse(ctx context.Context, params *ListPatientFormsGetParams, reqEditors ...RequestEditorFn) (*ListPatientFormsGetResponse, error) {
	rsp, err := c.ListPatientFormsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPatientFormsGetResponse(rsp)
}

// CreatePatientFormPostWithBodyWithResponse request with arbitrary body returning *CreatePatientFormPostResponse
func (c *ClientWithResponses) CreatePatientFormPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePatientFormPostResponse, error) {
	rsp, err := c.CreatePatientFormPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePatientFormPostResponse(rsp)
}

func (c *ClientWithResponses) CreatePatientFormPostWithResponse(ctx context.Context, body CreatePatientFormPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePatientFormPostResponse, error) {
	rsp, err := c.CreatePatientFormPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePatientFormPostResponse(rsp)
}

// GetPatientFormGetWithResponse request returning *GetPatientFormGetResponse
func (c *ClientWithResponses) GetPatientFormGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPatientFormGetResponse, error) {
	rsp, err := c.GetPatientFormGet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatientFormGetResponse(rsp)
}

// UpdatePatientFormPatchWithBodyWithResponse request with arbitrary body returning *UpdatePatientFormPatchResponse
func (c *ClientWithResponses) UpdatePatientFormPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePatientFormPatchResponse, error) {
	rsp, err := c.UpdatePatientFormPatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePatientFormPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdatePatientFormPatchWithResponse(ctx context.Context, id string, body UpdatePatientFormPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePatientFormPatchResponse, error) {
	rsp, err := c.UpdatePatientFormPatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePatientFormPatchResponse(rsp)
}

// ArchivePatientFormPostWithResponse request returning *ArchivePatientFormPostResponse
func (c *ClientWithResponses) ArchivePatientFormPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchivePatientFormPostResponse, error) {
	rsp, err := c.ArchivePatientFormPost(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchivePatientFormPostResponse(rsp)
}

// GetSignatureGetWithResponse request returning *GetSignatureGetResponse
func (c *ClientWithResponses) GetSignatureGetWithResponse(ctx context.Context, patientFormId string, id string, reqEditors ...RequestEditorFn) (*GetSignatureGetResponse, error) {
	rsp, err := c.GetSignatureGet(ctx, patientFormId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSignatureGetResponse(rsp)
}

// ListPatientsGetWithResponse request returning *ListPatientsGetResponse
func (c *ClientWithResponses) ListPatientsGetWithResponse(ctx context.Context, params *ListPatientsGetParams, reqEditors ...RequestEditorFn) (*ListPatientsGetResponse, error) {
	rsp, err := c.ListPatientsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPatientsGetResponse(rsp)
}

// CreatePatientPostWithBodyWithResponse request with arbitrary body returning *CreatePatientPostResponse
func (c *ClientWithResponses) CreatePatientPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePatientPostResponse, error) {
	rsp, err := c.CreatePatientPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePatientPostResponse(rsp)
}

func (c *ClientWithResponses) CreatePatientPostWithResponse(ctx context.Context, body CreatePatientPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePatientPostResponse, error) {
	rsp, err := c.CreatePatientPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePatientPostResponse(rsp)
}

// ArchivePatientDeleteWithResponse request returning *ArchivePatientDeleteResponse
func (c *ClientWithResponses) ArchivePatientDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchivePatientDeleteResponse, error) {
	rsp, err := c.ArchivePatientDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchivePatientDeleteResponse(rsp)
}

// GetPatientGetWithResponse request returning *GetPatientGetResponse
func (c *ClientWithResponses) GetPatientGetWithResponse(ctx context.Context, id string, params *GetPatientGetParams, reqEditors ...RequestEditorFn) (*GetPatientGetResponse, error) {
	rsp, err := c.GetPatientGet(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatientGetResponse(rsp)
}

// UpdatePatientPatchWithBodyWithResponse request with arbitrary body returning *UpdatePatientPatchResponse
func (c *ClientWithResponses) UpdatePatientPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePatientPatchResponse, error) {
	rsp, err := c.UpdatePatientPatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePatientPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdatePatientPatchWithResponse(ctx context.Context, id string, body UpdatePatientPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePatientPatchResponse, error) {
	rsp, err := c.UpdatePatientPatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePatientPatchResponse(rsp)
}

// ArchivePatientPostWithResponse request returning *ArchivePatientPostResponse
func (c *ClientWithResponses) ArchivePatientPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchivePatientPostResponse, error) {
	rsp, err := c.ArchivePatientPost(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchivePatientPostResponse(rsp)
}

// UnarchivePatientPostWithResponse request returning *UnarchivePatientPostResponse
func (c *ClientWithResponses) UnarchivePatientPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UnarchivePatientPostResponse, error) {
	rsp, err := c.UnarchivePatientPost(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnarchivePatientPostResponse(rsp)
}

// PresignedPostGetWithResponse request returning *PresignedPostGetResponse
func (c *ClientWithResponses) PresignedPostGetWithResponse(ctx context.Context, patientId string, reqEditors ...RequestEditorFn) (*PresignedPostGetResponse, error) {
	rsp, err := c.PresignedPostGet(ctx, patientId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePresignedPostGetResponse(rsp)
}

// ListInvoicesForPatientGetWithResponse request returning *ListInvoicesForPatientGetResponse
func (c *ClientWithResponses) ListInvoicesForPatientGetWithResponse(ctx context.Context, patientId string, params *ListInvoicesForPatientGetParams, reqEditors ...RequestEditorFn) (*ListInvoicesForPatientGetResponse, error) {
	rsp, err := c.ListInvoicesForPatientGet(ctx, patientId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInvoicesForPatientGetResponse(rsp)
}

// ListMedicalAlertsForPatientGetWithResponse request returning *ListMedicalAlertsForPatientGetResponse
func (c *ClientWithResponses) ListMedicalAlertsForPatientGetWithResponse(ctx context.Context, patientId string, params *ListMedicalAlertsForPatientGetParams, reqEditors ...RequestEditorFn) (*ListMedicalAlertsForPatientGetResponse, error) {
	rsp, err := c.ListMedicalAlertsForPatientGet(ctx, patientId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMedicalAlertsForPatientGetResponse(rsp)
}

// ListPatientAttachmentsForPatientGetWithResponse request returning *ListPatientAttachmentsForPatientGetResponse
func (c *ClientWithResponses) ListPatientAttachmentsForPatientGetWithResponse(ctx context.Context, patientId string, params *ListPatientAttachmentsForPatientGetParams, reqEditors ...RequestEditorFn) (*ListPatientAttachmentsForPatientGetResponse, error) {
	rsp, err := c.ListPatientAttachmentsForPatientGet(ctx, patientId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPatientAttachmentsForPatientGetResponse(rsp)
}

// GetReferralSourceGetWithResponse request returning *GetReferralSourceGetResponse
func (c *ClientWithResponses) GetReferralSourceGetWithResponse(ctx context.Context, patientId string, reqEditors ...RequestEditorFn) (*GetReferralSourceGetResponse, error) {
	rsp, err := c.GetReferralSourceGet(ctx, patientId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReferralSourceGetResponse(rsp)
}

// UpdateReferralSourcePatchWithBodyWithResponse request with arbitrary body returning *UpdateReferralSourcePatchResponse
func (c *ClientWithResponses) UpdateReferralSourcePatchWithBodyWithResponse(ctx context.Context, patientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateReferralSourcePatchResponse, error) {
	rsp, err := c.UpdateReferralSourcePatchWithBody(ctx, patientId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateReferralSourcePatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateReferralSourcePatchWithResponse(ctx context.Context, patientId string, body UpdateReferralSourcePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateReferralSourcePatchResponse, error) {
	rsp, err := c.UpdateReferralSourcePatch(ctx, patientId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateReferralSourcePatchResponse(rsp)
}

// ListTreatmentNotesForPatientGetWithResponse request returning *ListTreatmentNotesForPatientGetResponse
func (c *ClientWithResponses) ListTreatmentNotesForPatientGetWithResponse(ctx context.Context, patientId string, params *ListTreatmentNotesForPatientGetParams, reqEditors ...RequestEditorFn) (*ListTreatmentNotesForPatientGetResponse, error) {
	rsp, err := c.ListTreatmentNotesForPatientGet(ctx, patientId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTreatmentNotesForPatientGetResponse(rsp)
}

// ListPractitionerReferenceNumbersGetWithResponse request returning *ListPractitionerReferenceNumbersGetResponse
func (c *ClientWithResponses) ListPractitionerReferenceNumbersGetWithResponse(ctx context.Context, params *ListPractitionerReferenceNumbersGetParams, reqEditors ...RequestEditorFn) (*ListPractitionerReferenceNumbersGetResponse, error) {
	rsp, err := c.ListPractitionerReferenceNumbersGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPractitionerReferenceNumbersGetResponse(rsp)
}

// CreatePractitionerReferenceNumberPostWithBodyWithResponse request with arbitrary body returning *CreatePractitionerReferenceNumberPostResponse
func (c *ClientWithResponses) CreatePractitionerReferenceNumberPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePractitionerReferenceNumberPostResponse, error) {
	rsp, err := c.CreatePractitionerReferenceNumberPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePractitionerReferenceNumberPostResponse(rsp)
}

func (c *ClientWithResponses) CreatePractitionerReferenceNumberPostWithResponse(ctx context.Context, body CreatePractitionerReferenceNumberPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePractitionerReferenceNumberPostResponse, error) {
	rsp, err := c.CreatePractitionerReferenceNumberPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePractitionerReferenceNumberPostResponse(rsp)
}

// DeletePractitionerReferenceNumberDeleteWithResponse request returning *DeletePractitionerReferenceNumberDeleteResponse
func (c *ClientWithResponses) DeletePractitionerReferenceNumberDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePractitionerReferenceNumberDeleteResponse, error) {
	rsp, err := c.DeletePractitionerReferenceNumberDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePractitionerReferenceNumberDeleteResponse(rsp)
}

// GetPractitionerReferenceNumberGetWithResponse request returning *GetPractitionerReferenceNumberGetResponse
func (c *ClientWithResponses) GetPractitionerReferenceNumberGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPractitionerReferenceNumberGetResponse, error) {
	rsp, err := c.GetPractitionerReferenceNumberGet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPractitionerReferenceNumberGetResponse(rsp)
}

// UpdatePractitionerReferenceNumberPatchWithBodyWithResponse request with arbitrary body returning *UpdatePractitionerReferenceNumberPatchResponse
func (c *ClientWithResponses) UpdatePractitionerReferenceNumberPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePractitionerReferenceNumberPatchResponse, error) {
	rsp, err := c.UpdatePractitionerReferenceNumberPatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePractitionerReferenceNumberPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdatePractitionerReferenceNumberPatchWithResponse(ctx context.Context, id string, body UpdatePractitionerReferenceNumberPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePractitionerReferenceNumberPatchResponse, error) {
	rsp, err := c.UpdatePractitionerReferenceNumberPatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePractitionerReferenceNumberPatchResponse(rsp)
}

// ListPractitionersGetWithResponse request returning *ListPractitionersGetResponse
func (c *ClientWithResponses) ListPractitionersGetWithResponse(ctx context.Context, params *ListPractitionersGetParams, reqEditors ...RequestEditorFn) (*ListPractitionersGetResponse, error) {
	rsp, err := c.ListPractitionersGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPractitionersGetResponse(rsp)
}

// ListInactivePractitionersGetWithResponse request returning *ListInactivePractitionersGetResponse
func (c *ClientWithResponses) ListInactivePractitionersGetWithResponse(ctx context.Context, params *ListInactivePractitionersGetParams, reqEditors ...RequestEditorFn) (*ListInactivePractitionersGetResponse, error) {
	rsp, err := c.ListInactivePractitionersGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInactivePractitionersGetResponse(rsp)
}

// GetPractitionerGetWithResponse request returning *GetPractitionerGetResponse
func (c *ClientWithResponses) GetPractitionerGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPractitionerGetResponse, error) {
	rsp, err := c.GetPractitionerGet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPractitionerGetResponse(rsp)
}

// ListAppointmentTypesForPractitionerGetWithResponse request returning *ListAppointmentTypesForPractitionerGetResponse
func (c *ClientWithResponses) ListAppointmentTypesForPractitionerGetWithResponse(ctx context.Context, practitionerId string, params *ListAppointmentTypesForPractitionerGetParams, reqEditors ...RequestEditorFn) (*ListAppointmentTypesForPractitionerGetResponse, error) {
	rsp, err := c.ListAppointmentTypesForPractitionerGet(ctx, practitionerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAppointmentTypesForPractitionerGetResponse(rsp)
}

// ListDailyAvailabilitiesForPractitionerGetWithResponse request returning *ListDailyAvailabilitiesForPractitionerGetResponse
func (c *ClientWithResponses) ListDailyAvailabilitiesForPractitionerGetWithResponse(ctx context.Context, practitionerId string, params *ListDailyAvailabilitiesForPractitionerGetParams, reqEditors ...RequestEditorFn) (*ListDailyAvailabilitiesForPractitionerGetResponse, error) {
	rsp, err := c.ListDailyAvailabilitiesForPractitionerGet(ctx, practitionerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDailyAvailabilitiesForPractitionerGetResponse(rsp)
}

// ListInvoicesForPractitionerGetWithResponse request returning *ListInvoicesForPractitionerGetResponse
func (c *ClientWithResponses) ListInvoicesForPractitionerGetWithResponse(ctx context.Context, practitionerId string, params *ListInvoicesForPractitionerGetParams, reqEditors ...RequestEditorFn) (*ListInvoicesForPractitionerGetResponse, error) {
	rsp, err := c.ListInvoicesForPractitionerGet(ctx, practitionerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInvoicesForPractitionerGetResponse(rsp)
}

// ListPractitionerReferenceNumbersForPractitionerGetWithResponse request returning *ListPractitionerReferenceNumbersForPractitionerGetResponse
func (c *ClientWithResponses) ListPractitionerReferenceNumbersForPractitionerGetWithResponse(ctx context.Context, practitionerId string, params *ListPractitionerReferenceNumbersForPractitionerGetParams, reqEditors ...RequestEditorFn) (*ListPractitionerReferenceNumbersForPractitionerGetResponse, error) {
	rsp, err := c.ListPractitionerReferenceNumbersForPractitionerGet(ctx, practitionerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPractitionerReferenceNumbersForPractitionerGetResponse(rsp)
}

// ListProductSuppliersGetWithResponse request returning *ListProductSuppliersGetResponse
func (c *ClientWithResponses) ListProductSuppliersGetWithResponse(ctx context.Context, params *ListProductSuppliersGetParams, reqEditors ...RequestEditorFn) (*ListProductSuppliersGetResponse, error) {
	rsp, err := c.ListProductSuppliersGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProductSuppliersGetResponse(rsp)
}

// CreateProductSupplierPostWithBodyWithResponse request with arbitrary body returning *CreateProductSupplierPostResponse
func (c *ClientWithResponses) CreateProductSupplierPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProductSupplierPostResponse, error) {
	rsp, err := c.CreateProductSupplierPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProductSupplierPostResponse(rsp)
}

func (c *ClientWithResponses) CreateProductSupplierPostWithResponse(ctx context.Context, body CreateProductSupplierPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProductSupplierPostResponse, error) {
	rsp, err := c.CreateProductSupplierPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProductSupplierPostResponse(rsp)
}

// DeleteProductSupplierDeleteWithResponse request returning *DeleteProductSupplierDeleteResponse
func (c *ClientWithResponses) DeleteProductSupplierDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteProductSupplierDeleteResponse, error) {
	rsp, err := c.DeleteProductSupplierDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProductSupplierDeleteResponse(rsp)
}

// GetProductSupplierGetWithResponse request returning *GetProductSupplierGetResponse
func (c *ClientWithResponses) GetProductSupplierGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetProductSupplierGetResponse, error) {
	rsp, err := c.GetProductSupplierGet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductSupplierGetResponse(rsp)
}

// UpdateProductSupplierPatchWithBodyWithResponse request with arbitrary body returning *UpdateProductSupplierPatchResponse
func (c *ClientWithResponses) UpdateProductSupplierPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProductSupplierPatchResponse, error) {
	rsp, err := c.UpdateProductSupplierPatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProductSupplierPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateProductSupplierPatchWithResponse(ctx context.Context, id string, body UpdateProductSupplierPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProductSupplierPatchResponse, error) {
	rsp, err := c.UpdateProductSupplierPatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProductSupplierPatchResponse(rsp)
}

// ArchiveProductSupplierPostWithResponse request returning *ArchiveProductSupplierPostResponse
func (c *ClientWithResponses) ArchiveProductSupplierPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveProductSupplierPostResponse, error) {
	rsp, err := c.ArchiveProductSupplierPost(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveProductSupplierPostResponse(rsp)
}

// ListProductsGetWithResponse request returning *ListProductsGetResponse
func (c *ClientWithResponses) ListProductsGetWithResponse(ctx context.Context, params *ListProductsGetParams, reqEditors ...RequestEditorFn) (*ListProductsGetResponse, error) {
	rsp, err := c.ListProductsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProductsGetResponse(rsp)
}

// CreateProductPostWithBodyWithResponse request with arbitrary body returning *CreateProductPostResponse
func (c *ClientWithResponses) CreateProductPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProductPostResponse, error) {
	rsp, err := c.CreateProductPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProductPostResponse(rsp)
}

func (c *ClientWithResponses) CreateProductPostWithResponse(ctx context.Context, body CreateProductPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProductPostResponse, error) {
	rsp, err := c.CreateProductPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProductPostResponse(rsp)
}

// DeleteProductDeleteWithResponse request returning *DeleteProductDeleteResponse
func (c *ClientWithResponses) DeleteProductDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteProductDeleteResponse, error) {
	rsp, err := c.DeleteProductDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProductDeleteResponse(rsp)
}

// GetProductGetWithResponse request returning *GetProductGetResponse
func (c *ClientWithResponses) GetProductGetWithResponse(ctx context.Context, id string, params *GetProductGetParams, reqEditors ...RequestEditorFn) (*GetProductGetResponse, error) {
	rsp, err := c.GetProductGet(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductGetResponse(rsp)
}

// UpdateProductPatchWithBodyWithResponse request with arbitrary body returning *UpdateProductPatchResponse
func (c *ClientWithResponses) UpdateProductPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProductPatchResponse, error) {
	rsp, err := c.UpdateProductPatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProductPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateProductPatchWithResponse(ctx context.Context, id string, body UpdateProductPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProductPatchResponse, error) {
	rsp, err := c.UpdateProductPatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProductPatchResponse(rsp)
}

// ArchiveProductPostWithResponse request returning *ArchiveProductPostResponse
func (c *ClientWithResponses) ArchiveProductPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveProductPostResponse, error) {
	rsp, err := c.ArchiveProductPost(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveProductPostResponse(rsp)
}

// ListReferralSourceTypesGetWithResponse request returning *ListReferralSourceTypesGetResponse
func (c *ClientWithResponses) ListReferralSourceTypesGetWithResponse(ctx context.Context, params *ListReferralSourceTypesGetParams, reqEditors ...RequestEditorFn) (*ListReferralSourceTypesGetResponse, error) {
	rsp, err := c.ListReferralSourceTypesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListReferralSourceTypesGetResponse(rsp)
}

// GetReferralSourceTypeGetWithResponse request returning *GetReferralSourceTypeGetResponse
func (c *ClientWithResponses) GetReferralSourceTypeGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetReferralSourceTypeGetResponse, error) {
	rsp, err := c.GetReferralSourceTypeGet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReferralSourceTypeGetResponse(rsp)
}

// ListReferralSourcesGetWithResponse request returning *ListReferralSourcesGetResponse
func (c *ClientWithResponses) ListReferralSourcesGetWithResponse(ctx context.Context, params *ListReferralSourcesGetParams, reqEditors ...RequestEditorFn) (*ListReferralSourcesGetResponse, error) {
	rsp, err := c.ListReferralSourcesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListReferralSourcesGetResponse(rsp)
}

// ListServicesGetWithResponse request returning *ListServicesGetResponse
func (c *ClientWithResponses) ListServicesGetWithResponse(ctx context.Context, params *ListServicesGetParams, reqEditors ...RequestEditorFn) (*ListServicesGetResponse, error) {
	rsp, err := c.ListServicesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServicesGetResponse(rsp)
}

// GetSettingsGetWithResponse request returning *GetSettingsGetResponse
func (c *ClientWithResponses) GetSettingsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsGetResponse, error) {
	rsp, err := c.GetSettingsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsGetResponse(rsp)
}

// GetPublicSettingsGetWithResponse request returning *GetPublicSettingsGetResponse
func (c *ClientWithResponses) GetPublicSettingsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPublicSettingsGetResponse, error) {
	rsp, err := c.GetPublicSettingsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicSettingsGetResponse(rsp)
}

// ListStockAdjustmentsGetWithResponse request returning *ListStockAdjustmentsGetResponse
func (c *ClientWithResponses) ListStockAdjustmentsGetWithResponse(ctx context.Context, params *ListStockAdjustmentsGetParams, reqEditors ...RequestEditorFn) (*ListStockAdjustmentsGetResponse, error) {
	rsp, err := c.ListStockAdjustmentsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListStockAdjustmentsGetResponse(rsp)
}

// CreateStockAdjustmentPostWithBodyWithResponse request with arbitrary body returning *CreateStockAdjustmentPostResponse
func (c *ClientWithResponses) CreateStockAdjustmentPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStockAdjustmentPostResponse, error) {
	rsp, err := c.CreateStockAdjustmentPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStockAdjustmentPostResponse(rsp)
}

func (c *ClientWithResponses) CreateStockAdjustmentPostWithResponse(ctx context.Context, body CreateStockAdjustmentPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStockAdjustmentPostResponse, error) {
	rsp, err := c.CreateStockAdjustmentPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStockAdjustmentPostResponse(rsp)
}

// GetStockAdjustmentGetWithResponse request returning *GetStockAdjustmentGetResponse
func (c *ClientWithResponses) GetStockAdjustmentGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStockAdjustmentGetResponse, error) {
	rsp, err := c.GetStockAdjustmentGet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStockAdjustmentGetResponse(rsp)
}

// ListTaxesGetWithResponse request returning *ListTaxesGetResponse
func (c *ClientWithResponses) ListTaxesGetWithResponse(ctx context.Context, params *ListTaxesGetParams, reqEditors ...RequestEditorFn) (*ListTaxesGetResponse, error) {
	rsp, err := c.ListTaxesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTaxesGetResponse(rsp)
}

// CreateTaxPostWithBodyWithResponse request with arbitrary body returning *CreateTaxPostResponse
func (c *ClientWithResponses) CreateTaxPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTaxPostResponse, error) {
	rsp, err := c.CreateTaxPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTaxPostResponse(rsp)
}

func (c *ClientWithResponses) CreateTaxPostWithResponse(ctx context.Context, body CreateTaxPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTaxPostResponse, error) {
	rsp, err := c.CreateTaxPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTaxPostResponse(rsp)
}

// DeleteTaxDeleteWithResponse request returning *DeleteTaxDeleteResponse
func (c *ClientWithResponses) DeleteTaxDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTaxDeleteResponse, error) {
	rsp, err := c.DeleteTaxDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTaxDeleteResponse(rsp)
}

// GetTaxGetWithResponse request returning *GetTaxGetResponse
func (c *ClientWithResponses) GetTaxGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTaxGetResponse, error) {
	rsp, err := c.GetTaxGet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxGetResponse(rsp)
}

// UpdateTaxPatchWithBodyWithResponse request with arbitrary body returning *UpdateTaxPatchResponse
func (c *ClientWithResponses) UpdateTaxPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTaxPatchResponse, error) {
	rsp, err := c.UpdateTaxPatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTaxPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateTaxPatchWithResponse(ctx context.Context, id string, body UpdateTaxPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTaxPatchResponse, error) {
	rsp, err := c.UpdateTaxPatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTaxPatchResponse(rsp)
}

// ListTreatmentNoteTemplatesGetWithResponse request returning *ListTreatmentNoteTemplatesGetResponse
func (c *ClientWithResponses) ListTreatmentNoteTemplatesGetWithResponse(ctx context.Context, params *ListTreatmentNoteTemplatesGetParams, reqEditors ...RequestEditorFn) (*ListTreatmentNoteTemplatesGetResponse, error) {
	rsp, err := c.ListTreatmentNoteTemplatesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTreatmentNoteTemplatesGetResponse(rsp)
}

// CreateTreatmentNoteTemplatePostWithBodyWithResponse request with arbitrary body returning *CreateTreatmentNoteTemplatePostResponse
func (c *ClientWithResponses) CreateTreatmentNoteTemplatePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTreatmentNoteTemplatePostResponse, error) {
	rsp, err := c.CreateTreatmentNoteTemplatePostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTreatmentNoteTemplatePostResponse(rsp)
}

func (c *ClientWithResponses) CreateTreatmentNoteTemplatePostWithResponse(ctx context.Context, body CreateTreatmentNoteTemplatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTreatmentNoteTemplatePostResponse, error) {
	rsp, err := c.CreateTreatmentNoteTemplatePost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTreatmentNoteTemplatePostResponse(rsp)
}

// DeleteTreatmentNoteTemplateDeleteWithResponse request returning *DeleteTreatmentNoteTemplateDeleteResponse
func (c *ClientWithResponses) DeleteTreatmentNoteTemplateDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTreatmentNoteTemplateDeleteResponse, error) {
	rsp, err := c.DeleteTreatmentNoteTemplateDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTreatmentNoteTemplateDeleteResponse(rsp)
}

// GetTreatmentNoteTemplateGetWithResponse request returning *GetTreatmentNoteTemplateGetResponse
func (c *ClientWithResponses) GetTreatmentNoteTemplateGetWithResponse(ctx context.Context, id string, params *GetTreatmentNoteTemplateGetParams, reqEditors ...RequestEditorFn) (*GetTreatmentNoteTemplateGetResponse, error) {
	rsp, err := c.GetTreatmentNoteTemplateGet(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTreatmentNoteTemplateGetResponse(rsp)
}

// UpdateTreatmentNoteTemplatePatchWithBodyWithResponse request with arbitrary body returning *UpdateTreatmentNoteTemplatePatchResponse
func (c *ClientWithResponses) UpdateTreatmentNoteTemplatePatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTreatmentNoteTemplatePatchResponse, error) {
	rsp, err := c.UpdateTreatmentNoteTemplatePatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTreatmentNoteTemplatePatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateTreatmentNoteTemplatePatchWithResponse(ctx context.Context, id string, body UpdateTreatmentNoteTemplatePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTreatmentNoteTemplatePatchResponse, error) {
	rsp, err := c.UpdateTreatmentNoteTemplatePatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTreatmentNoteTemplatePatchResponse(rsp)
}

// ArchiveTreatmentNoteTemplatePostWithResponse request returning *ArchiveTreatmentNoteTemplatePostResponse
func (c *ClientWithResponses) ArchiveTreatmentNoteTemplatePostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveTreatmentNoteTemplatePostResponse, error) {
	rsp, err := c.ArchiveTreatmentNoteTemplatePost(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveTreatmentNoteTemplatePostResponse(rsp)
}

// ListTreatmentNotesGetWithResponse request returning *ListTreatmentNotesGetResponse
func (c *ClientWithResponses) ListTreatmentNotesGetWithResponse(ctx context.Context, params *ListTreatmentNotesGetParams, reqEditors ...RequestEditorFn) (*ListTreatmentNotesGetResponse, error) {
	rsp, err := c.ListTreatmentNotesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTreatmentNotesGetResponse(rsp)
}

// CreateTreatmentNotePostWithBodyWithResponse request with arbitrary body returning *CreateTreatmentNotePostResponse
func (c *ClientWithResponses) CreateTreatmentNotePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTreatmentNotePostResponse, error) {
	rsp, err := c.CreateTreatmentNotePostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTreatmentNotePostResponse(rsp)
}

func (c *ClientWithResponses) CreateTreatmentNotePostWithResponse(ctx context.Context, body CreateTreatmentNotePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTreatmentNotePostResponse, error) {
	rsp, err := c.CreateTreatmentNotePost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTreatmentNotePostResponse(rsp)
}

// DeleteTreatmentNoteDeleteWithResponse request returning *DeleteTreatmentNoteDeleteResponse
func (c *ClientWithResponses) DeleteTreatmentNoteDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTreatmentNoteDeleteResponse, error) {
	rsp, err := c.DeleteTreatmentNoteDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTreatmentNoteDeleteResponse(rsp)
}

// GetTreatmentNoteGetWithResponse request returning *GetTreatmentNoteGetResponse
func (c *ClientWithResponses) GetTreatmentNoteGetWithResponse(ctx context.Context, id string, params *GetTreatmentNoteGetParams, reqEditors ...RequestEditorFn) (*GetTreatmentNoteGetResponse, error) {
	rsp, err := c.GetTreatmentNoteGet(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTreatmentNoteGetResponse(rsp)
}

// UpdateTreatmentNotePatchWithBodyWithResponse request with arbitrary body returning *UpdateTreatmentNotePatchResponse
func (c *ClientWithResponses) UpdateTreatmentNotePatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTreatmentNotePatchResponse, error) {
	rsp, err := c.UpdateTreatmentNotePatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTreatmentNotePatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateTreatmentNotePatchWithResponse(ctx context.Context, id string, body UpdateTreatmentNotePatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTreatmentNotePatchResponse, error) {
	rsp, err := c.UpdateTreatmentNotePatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTreatmentNotePatchResponse(rsp)
}

// ArchiveTreatmentNotePostWithResponse request returning *ArchiveTreatmentNotePostResponse
func (c *ClientWithResponses) ArchiveTreatmentNotePostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveTreatmentNotePostResponse, error) {
	rsp, err := c.ArchiveTreatmentNotePost(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveTreatmentNotePostResponse(rsp)
}

// ListUnavailableBlocksGetWithResponse request returning *ListUnavailableBlocksGetResponse
func (c *ClientWithResponses) ListUnavailableBlocksGetWithResponse(ctx context.Context, params *ListUnavailableBlocksGetParams, reqEditors ...RequestEditorFn) (*ListUnavailableBlocksGetResponse, error) {
	rsp, err := c.ListUnavailableBlocksGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUnavailableBlocksGetResponse(rsp)
}

// CreateUnavailableBlockPostWithBodyWithResponse request with arbitrary body returning *CreateUnavailableBlockPostResponse
func (c *ClientWithResponses) CreateUnavailableBlockPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUnavailableBlockPostResponse, error) {
	rsp, err := c.CreateUnavailableBlockPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUnavailableBlockPostResponse(rsp)
}

func (c *ClientWithResponses) CreateUnavailableBlockPostWithResponse(ctx context.Context, body CreateUnavailableBlockPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUnavailableBlockPostResponse, error) {
	rsp, err := c.CreateUnavailableBlockPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUnavailableBlockPostResponse(rsp)
}

// DeleteUnavailableBlockDeleteWithResponse request returning *DeleteUnavailableBlockDeleteResponse
func (c *ClientWithResponses) DeleteUnavailableBlockDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteUnavailableBlockDeleteResponse, error) {
	rsp, err := c.DeleteUnavailableBlockDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUnavailableBlockDeleteResponse(rsp)
}

// GetUnavailableBlockGetWithResponse request returning *GetUnavailableBlockGetResponse
func (c *ClientWithResponses) GetUnavailableBlockGetWithResponse(ctx context.Context, id string, params *GetUnavailableBlockGetParams, reqEditors ...RequestEditorFn) (*GetUnavailableBlockGetResponse, error) {
	rsp, err := c.GetUnavailableBlockGet(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUnavailableBlockGetResponse(rsp)
}

// UpdateUnavailableBlockPatchWithBodyWithResponse request with arbitrary body returning *UpdateUnavailableBlockPatchResponse
func (c *ClientWithResponses) UpdateUnavailableBlockPatchWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUnavailableBlockPatchResponse, error) {
	rsp, err := c.UpdateUnavailableBlockPatchWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUnavailableBlockPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateUnavailableBlockPatchWithResponse(ctx context.Context, id string, body UpdateUnavailableBlockPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUnavailableBlockPatchResponse, error) {
	rsp, err := c.UpdateUnavailableBlockPatch(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUnavailableBlockPatchResponse(rsp)
}

// ArchiveUnavailableBlockPostWithResponse request returning *ArchiveUnavailableBlockPostResponse
func (c *ClientWithResponses) ArchiveUnavailableBlockPostWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveUnavailableBlockPostResponse, error) {
	rsp, err := c.ArchiveUnavailableBlockPost(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveUnavailableBlockPostResponse(rsp)
}

// GetUnavailableBlockConflictsGetWithResponse request returning *GetUnavailableBlockConflictsGetResponse
func (c *ClientWithResponses) GetUnavailableBlockConflictsGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetUnavailableBlockConflictsGetResponse, error) {
	rsp, err := c.GetUnavailableBlockConflictsGet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUnavailableBlockConflictsGetResponse(rsp)
}

// GetAuthenticatedUserGetWithResponse request returning *GetAuthenticatedUserGetResponse
func (c *ClientWithResponses) GetAuthenticatedUserGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthenticatedUserGetResponse, error) {
	rsp, err := c.GetAuthenticatedUserGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthenticatedUserGetResponse(rsp)
}

// ListUsersGetWithResponse request returning *ListUsersGetResponse
func (c *ClientWithResponses) ListUsersGetWithResponse(ctx context.Context, params *ListUsersGetParams, reqEditors ...RequestEditorFn) (*ListUsersGetResponse, error) {
	rsp, err := c.ListUsersGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsersGetResponse(rsp)
}

// GetUserGetWithResponse request returning *GetUserGetResponse
func (c *ClientWithResponses) GetUserGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetUserGetResponse, error) {
	rsp, err := c.GetUserGet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserGetResponse(rsp)
}

// ParseListAppointmentTypesGetResponse parses an HTTP response from a ListAppointmentTypesGetWithResponse call
func ParseListAppointmentTypesGetResponse(rsp *http.Response) (*ListAppointmentTypesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAppointmentTypesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AppointmentTypes *[]AppointmentType `json:"appointment_types,omitempty"`
			Links            *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAppointmentTypePostResponse parses an HTTP response from a CreateAppointmentTypePostWithResponse call
func ParseCreateAppointmentTypePostResponse(rsp *http.Response) (*CreateAppointmentTypePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAppointmentTypePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppointmentType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListPractitionersForAppointmentTypeGetResponse parses an HTTP response from a ListPractitionersForAppointmentTypeGetWithResponse call
func ParseListPractitionersForAppointmentTypeGetResponse(rsp *http.Response) (*ListPractitionersForAppointmentTypeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPractitionersForAppointmentTypeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			Practitioners *[]Practitioner `json:"practitioners,omitempty"`
			TotalEntries  *int            `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListInactivePractitionersForAppointmentTypeGetResponse parses an HTTP response from a ListInactivePractitionersForAppointmentTypeGetWithResponse call
func ParseListInactivePractitionersForAppointmentTypeGetResponse(rsp *http.Response) (*ListInactivePractitionersForAppointmentTypeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInactivePractitionersForAppointmentTypeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			Practitioners *[]Practitioner `json:"practitioners,omitempty"`
			TotalEntries  *int            `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAppointmentTypeDeleteResponse parses an HTTP response from a DeleteAppointmentTypeDeleteWithResponse call
func ParseDeleteAppointmentTypeDeleteResponse(rsp *http.Response) (*DeleteAppointmentTypeDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAppointmentTypeDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAppointmentTypeGetResponse parses an HTTP response from a GetAppointmentTypeGetWithResponse call
func ParseGetAppointmentTypeGetResponse(rsp *http.Response) (*GetAppointmentTypeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppointmentTypeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppointmentType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAppointmentTypePatchResponse parses an HTTP response from a UpdateAppointmentTypePatchWithResponse call
func ParseUpdateAppointmentTypePatchResponse(rsp *http.Response) (*UpdateAppointmentTypePatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAppointmentTypePatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppointmentType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseArchiveAppointmentTypePostResponse parses an HTTP response from a ArchiveAppointmentTypePostWithResponse call
func ParseArchiveAppointmentTypePostResponse(rsp *http.Response) (*ArchiveAppointmentTypePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveAppointmentTypePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListInvoicesForAppointmentGetResponse parses an HTTP response from a ListInvoicesForAppointmentGetWithResponse call
func ParseListInvoicesForAppointmentGetResponse(rsp *http.Response) (*ListInvoicesForAppointmentGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInvoicesForAppointmentGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Invoices *[]Invoice `json:"invoices,omitempty"`
			Links    *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAttendeesGetResponse parses an HTTP response from a ListAttendeesGetWithResponse call
func ParseListAttendeesGetResponse(rsp *http.Response) (*ListAttendeesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAttendeesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Attendees *[]Attendee `json:"attendees,omitempty"`
			Links     *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAttendeePostResponse parses an HTTP response from a CreateAttendeePostWithResponse call
func ParseCreateAttendeePostResponse(rsp *http.Response) (*CreateAttendeePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAttendeePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Attendee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListInvoicesForAttendeeGetResponse parses an HTTP response from a ListInvoicesForAttendeeGetWithResponse call
func ParseListInvoicesForAttendeeGetResponse(rsp *http.Response) (*ListInvoicesForAttendeeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInvoicesForAttendeeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Invoices *[]Invoice `json:"invoices,omitempty"`
			Links    *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListPatientFormsForAttendeeGetResponse parses an HTTP response from a ListPatientFormsForAttendeeGetWithResponse call
func ParseListPatientFormsForAttendeeGetResponse(rsp *http.Response) (*ListPatientFormsForAttendeeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPatientFormsForAttendeeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			PatientForms *[]PatientForm `json:"patient_forms,omitempty"`
			TotalEntries *int           `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAttendeeDeleteResponse parses an HTTP response from a DeleteAttendeeDeleteWithResponse call
func ParseDeleteAttendeeDeleteResponse(rsp *http.Response) (*DeleteAttendeeDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAttendeeDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAttendeeGetResponse parses an HTTP response from a GetAttendeeGetWithResponse call
func ParseGetAttendeeGetResponse(rsp *http.Response) (*GetAttendeeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAttendeeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Attendee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAttendeePatchResponse parses an HTTP response from a UpdateAttendeePatchWithResponse call
func ParseUpdateAttendeePatchResponse(rsp *http.Response) (*UpdateAttendeePatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAttendeePatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Attendee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseArchiveAttendeePostResponse parses an HTTP response from a ArchiveAttendeePostWithResponse call
func ParseArchiveAttendeePostResponse(rsp *http.Response) (*ArchiveAttendeePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveAttendeePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCancelAttendeePatchResponse parses an HTTP response from a CancelAttendeePatchWithResponse call
func ParseCancelAttendeePatchResponse(rsp *http.Response) (*CancelAttendeePatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelAttendeePatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListAvailabilityBlocksGetResponse parses an HTTP response from a ListAvailabilityBlocksGetWithResponse call
func ParseListAvailabilityBlocksGetResponse(rsp *http.Response) (*ListAvailabilityBlocksGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAvailabilityBlocksGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AvailabilityBlocks *[]AvailabilityBlock `json:"availability_blocks,omitempty"`
			Links              *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAvailabilityBlockPostResponse parses an HTTP response from a CreateAvailabilityBlockPostWithResponse call
func ParseCreateAvailabilityBlockPostResponse(rsp *http.Response) (*CreateAvailabilityBlockPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAvailabilityBlockPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AvailabilityBlock
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetAvailabilityBlockGetResponse parses an HTTP response from a GetAvailabilityBlockGetWithResponse call
func ParseGetAvailabilityBlockGetResponse(rsp *http.Response) (*GetAvailabilityBlockGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAvailabilityBlockGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AvailabilityBlock
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListBillableItemsGetResponse parses an HTTP response from a ListBillableItemsGetWithResponse call
func ParseListBillableItemsGetResponse(rsp *http.Response) (*ListBillableItemsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBillableItemsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			BillableItems *[]BillableItem `json:"billable_items,omitempty"`
			Links         *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateBillableItemPostResponse parses an HTTP response from a CreateBillableItemPostWithResponse call
func ParseCreateBillableItemPostResponse(rsp *http.Response) (*CreateBillableItemPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBillableItemPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BillableItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteBillableItemDeleteResponse parses an HTTP response from a DeleteBillableItemDeleteWithResponse call
func ParseDeleteBillableItemDeleteResponse(rsp *http.Response) (*DeleteBillableItemDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBillableItemDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBillableItemGetResponse parses an HTTP response from a GetBillableItemGetWithResponse call
func ParseGetBillableItemGetResponse(rsp *http.Response) (*GetBillableItemGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBillableItemGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillableItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateBillableItemPatchResponse parses an HTTP response from a UpdateBillableItemPatchWithResponse call
func ParseUpdateBillableItemPatchResponse(rsp *http.Response) (*UpdateBillableItemPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateBillableItemPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillableItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseArchiveBillableItemPostResponse parses an HTTP response from a ArchiveBillableItemPostWithResponse call
func ParseArchiveBillableItemPostResponse(rsp *http.Response) (*ArchiveBillableItemPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveBillableItemPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListBookingsGetResponse parses an HTTP response from a ListBookingsGetWithResponse call
func ParseListBookingsGetResponse(rsp *http.Response) (*ListBookingsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBookingsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Bookings *[]Booking `json:"bookings,omitempty"`
			Links    *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBookingGetResponse parses an HTTP response from a GetBookingGetWithResponse call
func ParseGetBookingGetResponse(rsp *http.Response) (*GetBookingGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBookingGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Booking
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListBusinessesGetResponse parses an HTTP response from a ListBusinessesGetWithResponse call
func ParseListBusinessesGetResponse(rsp *http.Response) (*ListBusinessesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBusinessesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Businesses *[]Business `json:"businesses,omitempty"`
			Links      *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateBusinessPostResponse parses an HTTP response from a CreateBusinessPostWithResponse call
func ParseCreateBusinessPostResponse(rsp *http.Response) (*CreateBusinessPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBusinessPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Business
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListDailyAvailabilitiesForBusinessGetResponse parses an HTTP response from a ListDailyAvailabilitiesForBusinessGetWithResponse call
func ParseListDailyAvailabilitiesForBusinessGetResponse(rsp *http.Response) (*ListDailyAvailabilitiesForBusinessGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDailyAvailabilitiesForBusinessGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DailyAvailabilities *[]DailyAvailability `json:"daily_availabilities,omitempty"`
			Links               *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListPractitionersForBusinessGetResponse parses an HTTP response from a ListPractitionersForBusinessGetWithResponse call
func ParseListPractitionersForBusinessGetResponse(rsp *http.Response) (*ListPractitionersForBusinessGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPractitionersForBusinessGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			Practitioners *[]Practitioner `json:"practitioners,omitempty"`
			TotalEntries  *int            `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListInactivePractitionersForBusinessGetResponse parses an HTTP response from a ListInactivePractitionersForBusinessGetWithResponse call
func ParseListInactivePractitionersForBusinessGetResponse(rsp *http.Response) (*ListInactivePractitionersForBusinessGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInactivePractitionersForBusinessGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			Practitioners *[]Practitioner `json:"practitioners,omitempty"`
			TotalEntries  *int            `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllAvailableTimesGetResponse parses an HTTP response from a GetAllAvailableTimesGetWithResponse call
func ParseGetAllAvailableTimesGetResponse(rsp *http.Response) (*GetAllAvailableTimesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllAvailableTimesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AvailableTimes *interface{} `json:"available_times,omitempty"`
			Links          *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNextAvailableTimeGetResponse parses an HTTP response from a GetNextAvailableTimeGetWithResponse call
func ParseGetNextAvailableTimeGetResponse(rsp *http.Response) (*GetNextAvailableTimeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNextAvailableTimeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AppointmentStart *time.Time `json:"appointment_start,omitempty"`
			Links            *struct {
				Self *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListServicesForBusinessGetResponse parses an HTTP response from a ListServicesForBusinessGetWithResponse call
func ParseListServicesForBusinessGetResponse(rsp *http.Response) (*ListServicesForBusinessGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListServicesForBusinessGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			Services     *[]Service `json:"services,omitempty"`
			TotalEntries *int       `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteBusinessDeleteResponse parses an HTTP response from a DeleteBusinessDeleteWithResponse call
func ParseDeleteBusinessDeleteResponse(rsp *http.Response) (*DeleteBusinessDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBusinessDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBusinessGetResponse parses an HTTP response from a GetBusinessGetWithResponse call
func ParseGetBusinessGetResponse(rsp *http.Response) (*GetBusinessGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBusinessGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Business
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateBusinessPatchResponse parses an HTTP response from a UpdateBusinessPatchWithResponse call
func ParseUpdateBusinessPatchResponse(rsp *http.Response) (*UpdateBusinessPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateBusinessPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Business
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseArchiveBusinessPostResponse parses an HTTP response from a ArchiveBusinessPostWithResponse call
func ParseArchiveBusinessPostResponse(rsp *http.Response) (*ArchiveBusinessPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveBusinessPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUnarchiveBusinessPostResponse parses an HTTP response from a UnarchiveBusinessPostWithResponse call
func ParseUnarchiveBusinessPostResponse(rsp *http.Response) (*UnarchiveBusinessPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnarchiveBusinessPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Business
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListCommunicationsGetResponse parses an HTTP response from a ListCommunicationsGetWithResponse call
func ParseListCommunicationsGetResponse(rsp *http.Response) (*ListCommunicationsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCommunicationsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Communications *[]Communication `json:"communications,omitempty"`
			Links          *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateMemoCommunicationPostResponse parses an HTTP response from a CreateMemoCommunicationPostWithResponse call
func ParseCreateMemoCommunicationPostResponse(rsp *http.Response) (*CreateMemoCommunicationPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMemoCommunicationPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MemoCommunication
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetCommunicationGetResponse parses an HTTP response from a GetCommunicationGetWithResponse call
func ParseGetCommunicationGetResponse(rsp *http.Response) (*GetCommunicationGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCommunicationGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Communication
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateMemoCommunicationPatchResponse parses an HTTP response from a UpdateMemoCommunicationPatchWithResponse call
func ParseUpdateMemoCommunicationPatchResponse(rsp *http.Response) (*UpdateMemoCommunicationPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMemoCommunicationPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MemoCommunication
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseArchiveMemoCommunicationPostResponse parses an HTTP response from a ArchiveMemoCommunicationPostWithResponse call
func ParseArchiveMemoCommunicationPostResponse(rsp *http.Response) (*ArchiveMemoCommunicationPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveMemoCommunicationPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListConcessionPricesGetResponse parses an HTTP response from a ListConcessionPricesGetWithResponse call
func ParseListConcessionPricesGetResponse(rsp *http.Response) (*ListConcessionPricesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListConcessionPricesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ConcessionPrices *[]ConcessionPrice `json:"concession_prices,omitempty"`
			Links            *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConcessionPriceGetResponse parses an HTTP response from a GetConcessionPriceGetWithResponse call
func ParseGetConcessionPriceGetResponse(rsp *http.Response) (*GetConcessionPriceGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConcessionPriceGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConcessionPrice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListConcessionTypesGetResponse parses an HTTP response from a ListConcessionTypesGetWithResponse call
func ParseListConcessionTypesGetResponse(rsp *http.Response) (*ListConcessionTypesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListConcessionTypesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ConcessionTypes *[]ConcessionType `json:"concession_types,omitempty"`
			Links           *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateConcessionTypePostResponse parses an HTTP response from a CreateConcessionTypePostWithResponse call
func ParseCreateConcessionTypePostResponse(rsp *http.Response) (*CreateConcessionTypePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateConcessionTypePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ConcessionType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetConcessionTypeGetResponse parses an HTTP response from a GetConcessionTypeGetWithResponse call
func ParseGetConcessionTypeGetResponse(rsp *http.Response) (*GetConcessionTypeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConcessionTypeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConcessionType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateConcessionTypePatchResponse parses an HTTP response from a UpdateConcessionTypePatchWithResponse call
func ParseUpdateConcessionTypePatchResponse(rsp *http.Response) (*UpdateConcessionTypePatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateConcessionTypePatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConcessionType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListContactsGetResponse parses an HTTP response from a ListContactsGetWithResponse call
func ParseListContactsGetResponse(rsp *http.Response) (*ListContactsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListContactsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Contacts *[]Contact `json:"contacts,omitempty"`
			Links    *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateContactPostResponse parses an HTTP response from a CreateContactPostWithResponse call
func ParseCreateContactPostResponse(rsp *http.Response) (*CreateContactPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateContactPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Contact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteContactDeleteResponse parses an HTTP response from a DeleteContactDeleteWithResponse call
func ParseDeleteContactDeleteResponse(rsp *http.Response) (*DeleteContactDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteContactDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetContactGetResponse parses an HTTP response from a GetContactGetWithResponse call
func ParseGetContactGetResponse(rsp *http.Response) (*GetContactGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Contact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateContactPatchResponse parses an HTTP response from a UpdateContactPatchWithResponse call
func ParseUpdateContactPatchResponse(rsp *http.Response) (*UpdateContactPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateContactPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Contact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseArchiveContactPostResponse parses an HTTP response from a ArchiveContactPostWithResponse call
func ParseArchiveContactPostResponse(rsp *http.Response) (*ArchiveContactPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveContactPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListDailyAvailabilitiesGetResponse parses an HTTP response from a ListDailyAvailabilitiesGetWithResponse call
func ParseListDailyAvailabilitiesGetResponse(rsp *http.Response) (*ListDailyAvailabilitiesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDailyAvailabilitiesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DailyAvailabilities *[]DailyAvailability `json:"daily_availabilities,omitempty"`
			Links               *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDailyAvailabilityGetResponse parses an HTTP response from a GetDailyAvailabilityGetWithResponse call
func ParseGetDailyAvailabilityGetResponse(rsp *http.Response) (*GetDailyAvailabilityGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDailyAvailabilityGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DailyAvailability
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListGroupAppointmentsGetResponse parses an HTTP response from a ListGroupAppointmentsGetWithResponse call
func ParseListGroupAppointmentsGetResponse(rsp *http.Response) (*ListGroupAppointmentsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListGroupAppointmentsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			GroupAppointments *[]GroupAppointment `json:"group_appointments,omitempty"`
			Links             *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateGroupAppointmentPostResponse parses an HTTP response from a CreateGroupAppointmentPostWithResponse call
func ParseCreateGroupAppointmentPostResponse(rsp *http.Response) (*CreateGroupAppointmentPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGroupAppointmentPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GroupAppointment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListAttendeesForGroupAppointmentGetResponse parses an HTTP response from a ListAttendeesForGroupAppointmentGetWithResponse call
func ParseListAttendeesForGroupAppointmentGetResponse(rsp *http.Response) (*ListAttendeesForGroupAppointmentGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAttendeesForGroupAppointmentGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Attendees *[]Attendee `json:"attendees,omitempty"`
			Links     *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteGroupAppointmentDeleteResponse parses an HTTP response from a DeleteGroupAppointmentDeleteWithResponse call
func ParseDeleteGroupAppointmentDeleteResponse(rsp *http.Response) (*DeleteGroupAppointmentDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGroupAppointmentDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGroupAppointmentGetResponse parses an HTTP response from a GetGroupAppointmentGetWithResponse call
func ParseGetGroupAppointmentGetResponse(rsp *http.Response) (*GetGroupAppointmentGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupAppointmentGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupAppointment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateGroupAppointmentPatchResponse parses an HTTP response from a UpdateGroupAppointmentPatchWithResponse call
func ParseUpdateGroupAppointmentPatchResponse(rsp *http.Response) (*UpdateGroupAppointmentPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateGroupAppointmentPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupAppointment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseArchiveGroupAppointmentPostResponse parses an HTTP response from a ArchiveGroupAppointmentPostWithResponse call
func ParseArchiveGroupAppointmentPostResponse(rsp *http.Response) (*ArchiveGroupAppointmentPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveGroupAppointmentPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGroupAppointmentConflictsGetResponse parses an HTTP response from a GetGroupAppointmentConflictsGetWithResponse call
func ParseGetGroupAppointmentConflictsGetResponse(rsp *http.Response) (*GetGroupAppointmentConflictsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupAppointmentConflictsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Conflicts *struct {
				Exist *bool `json:"exist,omitempty"`
			} `json:"conflicts,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListIndividualAppointmentsGetResponse parses an HTTP response from a ListIndividualAppointmentsGetWithResponse call
func ParseListIndividualAppointmentsGetResponse(rsp *http.Response) (*ListIndividualAppointmentsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIndividualAppointmentsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			IndividualAppointments *[]IndividualAppointment `json:"individual_appointments,omitempty"`
			Links                  *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateIndividualAppointmentPostResponse parses an HTTP response from a CreateIndividualAppointmentPostWithResponse call
func ParseCreateIndividualAppointmentPostResponse(rsp *http.Response) (*CreateIndividualAppointmentPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIndividualAppointmentPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IndividualAppointment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteIndividualAppointmentDeleteResponse parses an HTTP response from a DeleteIndividualAppointmentDeleteWithResponse call
func ParseDeleteIndividualAppointmentDeleteResponse(rsp *http.Response) (*DeleteIndividualAppointmentDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualAppointmentDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIndividualAppointmentGetResponse parses an HTTP response from a GetIndividualAppointmentGetWithResponse call
func ParseGetIndividualAppointmentGetResponse(rsp *http.Response) (*GetIndividualAppointmentGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndividualAppointmentGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndividualAppointment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateIndividualAppointmentPatchResponse parses an HTTP response from a UpdateIndividualAppointmentPatchWithResponse call
func ParseUpdateIndividualAppointmentPatchResponse(rsp *http.Response) (*UpdateIndividualAppointmentPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIndividualAppointmentPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndividualAppointment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseArchiveIndividualAppointmentPostResponse parses an HTTP response from a ArchiveIndividualAppointmentPostWithResponse call
func ParseArchiveIndividualAppointmentPostResponse(rsp *http.Response) (*ArchiveIndividualAppointmentPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveIndividualAppointmentPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCancelIndividualAppointmentPatchResponse parses an HTTP response from a CancelIndividualAppointmentPatchWithResponse call
func ParseCancelIndividualAppointmentPatchResponse(rsp *http.Response) (*CancelIndividualAppointmentPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelIndividualAppointmentPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIndividualAppointmentConflictsGetResponse parses an HTTP response from a GetIndividualAppointmentConflictsGetWithResponse call
func ParseGetIndividualAppointmentConflictsGetResponse(rsp *http.Response) (*GetIndividualAppointmentConflictsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndividualAppointmentConflictsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Conflicts *struct {
				Exist *bool `json:"exist,omitempty"`
			} `json:"conflicts,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAttendeesForIndividualAppointmentGetResponse parses an HTTP response from a ListAttendeesForIndividualAppointmentGetWithResponse call
func ParseListAttendeesForIndividualAppointmentGetResponse(rsp *http.Response) (*ListAttendeesForIndividualAppointmentGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAttendeesForIndividualAppointmentGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Attendees *[]Attendee `json:"attendees,omitempty"`
			Links     *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListInvoiceItemsGetResponse parses an HTTP response from a ListInvoiceItemsGetWithResponse call
func ParseListInvoiceItemsGetResponse(rsp *http.Response) (*ListInvoiceItemsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInvoiceItemsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			InvoiceItems *[]InvoiceItem `json:"invoice_items,omitempty"`
			Links        *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInvoiceItemGetResponse parses an HTTP response from a GetInvoiceItemGetWithResponse call
func ParseGetInvoiceItemGetResponse(rsp *http.Response) (*GetInvoiceItemGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvoiceItemGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvoiceItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListInvoicesGetResponse parses an HTTP response from a ListInvoicesGetWithResponse call
func ParseListInvoicesGetResponse(rsp *http.Response) (*ListInvoicesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInvoicesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Invoices *[]Invoice `json:"invoices,omitempty"`
			Links    *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInvoiceGetResponse parses an HTTP response from a GetInvoiceGetWithResponse call
func ParseGetInvoiceGetResponse(rsp *http.Response) (*GetInvoiceGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvoiceGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListInvoiceItemsForInvoiceGetResponse parses an HTTP response from a ListInvoiceItemsForInvoiceGetWithResponse call
func ParseListInvoiceItemsForInvoiceGetResponse(rsp *http.Response) (*ListInvoiceItemsForInvoiceGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInvoiceItemsForInvoiceGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			InvoiceItems *[]InvoiceItem `json:"invoice_items,omitempty"`
			Links        *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListMedicalAlertsGetResponse parses an HTTP response from a ListMedicalAlertsGetWithResponse call
func ParseListMedicalAlertsGetResponse(rsp *http.Response) (*ListMedicalAlertsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMedicalAlertsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			MedicalAlerts *[]MedicalAlert `json:"medical_alerts,omitempty"`
			TotalEntries  *int            `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateMedicalAlertPostResponse parses an HTTP response from a CreateMedicalAlertPostWithResponse call
func ParseCreateMedicalAlertPostResponse(rsp *http.Response) (*CreateMedicalAlertPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMedicalAlertPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MedicalAlert
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteMedicalAlertDeleteResponse parses an HTTP response from a DeleteMedicalAlertDeleteWithResponse call
func ParseDeleteMedicalAlertDeleteResponse(rsp *http.Response) (*DeleteMedicalAlertDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMedicalAlertDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMedicalAlertGetResponse parses an HTTP response from a GetMedicalAlertGetWithResponse call
func ParseGetMedicalAlertGetResponse(rsp *http.Response) (*GetMedicalAlertGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMedicalAlertGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MedicalAlert
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateMedicalAlertPatchResponse parses an HTTP response from a UpdateMedicalAlertPatchWithResponse call
func ParseUpdateMedicalAlertPatchResponse(rsp *http.Response) (*UpdateMedicalAlertPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMedicalAlertPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MedicalAlert
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseArchiveMedicalAlertPostResponse parses an HTTP response from a ArchiveMedicalAlertPostWithResponse call
func ParseArchiveMedicalAlertPostResponse(rsp *http.Response) (*ArchiveMedicalAlertPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveMedicalAlertPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPatientAttachmentsGetResponse parses an HTTP response from a ListPatientAttachmentsGetWithResponse call
func ParseListPatientAttachmentsGetResponse(rsp *http.Response) (*ListPatientAttachmentsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPatientAttachmentsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			PatientAttachments *[]PatientAttachment `json:"patient_attachments,omitempty"`
			TotalEntries       *int                 `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUploadedPatientAttachmentPostResponse parses an HTTP response from a CreateUploadedPatientAttachmentPostWithResponse call
func ParseCreateUploadedPatientAttachmentPostResponse(rsp *http.Response) (*CreateUploadedPatientAttachmentPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUploadedPatientAttachmentPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UploadedPatientAttachment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeletePatientAttachmentDeleteResponse parses an HTTP response from a DeletePatientAttachmentDeleteWithResponse call
func ParseDeletePatientAttachmentDeleteResponse(rsp *http.Response) (*DeletePatientAttachmentDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePatientAttachmentDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPatientAttachmentGetResponse parses an HTTP response from a GetPatientAttachmentGetWithResponse call
func ParseGetPatientAttachmentGetResponse(rsp *http.Response) (*GetPatientAttachmentGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatientAttachmentGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatientAttachment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseArchivePatientAttachmentPostResponse parses an HTTP response from a ArchivePatientAttachmentPostWithResponse call
func ParseArchivePatientAttachmentPostResponse(rsp *http.Response) (*ArchivePatientAttachmentPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchivePatientAttachmentPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPatientCasesGetResponse parses an HTTP response from a ListPatientCasesGetWithResponse call
func ParseListPatientCasesGetResponse(rsp *http.Response) (*ListPatientCasesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPatientCasesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			PatientCases *[]PatientCase `json:"patient_cases,omitempty"`
			TotalEntries *int           `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePatientCasePostResponse parses an HTTP response from a CreatePatientCasePostWithResponse call
func ParseCreatePatientCasePostResponse(rsp *http.Response) (*CreatePatientCasePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePatientCasePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PatientCase
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListActivePatientCasesGetResponse parses an HTTP response from a ListActivePatientCasesGetWithResponse call
func ParseListActivePatientCasesGetResponse(rsp *http.Response) (*ListActivePatientCasesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListActivePatientCasesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			PatientCases *[]PatientCase `json:"patient_cases,omitempty"`
			TotalEntries *int           `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPatientCaseGetResponse parses an HTTP response from a GetPatientCaseGetWithResponse call
func ParseGetPatientCaseGetResponse(rsp *http.Response) (*GetPatientCaseGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatientCaseGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatientCase
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatePatientCasePatchResponse parses an HTTP response from a UpdatePatientCasePatchWithResponse call
func ParseUpdatePatientCasePatchResponse(rsp *http.Response) (*UpdatePatientCasePatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePatientCasePatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatientCase
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseArchivePatientCasePostResponse parses an HTTP response from a ArchivePatientCasePostWithResponse call
func ParseArchivePatientCasePostResponse(rsp *http.Response) (*ArchivePatientCasePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchivePatientCasePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListAttendeesForPatientCaseGetResponse parses an HTTP response from a ListAttendeesForPatientCaseGetWithResponse call
func ParseListAttendeesForPatientCaseGetResponse(rsp *http.Response) (*ListAttendeesForPatientCaseGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAttendeesForPatientCaseGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Attendees *[]Attendee `json:"attendees,omitempty"`
			Links     *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListBookingsForPatientCaseGetResponse parses an HTTP response from a ListBookingsForPatientCaseGetWithResponse call
func ParseListBookingsForPatientCaseGetResponse(rsp *http.Response) (*ListBookingsForPatientCaseGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBookingsForPatientCaseGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Bookings *[]Booking `json:"bookings,omitempty"`
			Links    *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListInvoicesForPatientCaseGetResponse parses an HTTP response from a ListInvoicesForPatientCaseGetWithResponse call
func ParseListInvoicesForPatientCaseGetResponse(rsp *http.Response) (*ListInvoicesForPatientCaseGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInvoicesForPatientCaseGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Invoices *[]Invoice `json:"invoices,omitempty"`
			Links    *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListPatientAttachmentsForPatientCaseGetResponse parses an HTTP response from a ListPatientAttachmentsForPatientCaseGetWithResponse call
func ParseListPatientAttachmentsForPatientCaseGetResponse(rsp *http.Response) (*ListPatientAttachmentsForPatientCaseGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPatientAttachmentsForPatientCaseGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			PatientAttachments *[]PatientAttachment `json:"patient_attachments,omitempty"`
			TotalEntries       *int                 `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListPatientFormTemplatesGetResponse parses an HTTP response from a ListPatientFormTemplatesGetWithResponse call
func ParseListPatientFormTemplatesGetResponse(rsp *http.Response) (*ListPatientFormTemplatesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPatientFormTemplatesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			PatientFormTemplates *[]PatientFormTemplate `json:"patient_form_templates,omitempty"`
			TotalEntries         *int                   `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePatientFormTemplatePostResponse parses an HTTP response from a CreatePatientFormTemplatePostWithResponse call
func ParseCreatePatientFormTemplatePostResponse(rsp *http.Response) (*CreatePatientFormTemplatePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePatientFormTemplatePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PatientFormTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetPatientFormTemplateGetResponse parses an HTTP response from a GetPatientFormTemplateGetWithResponse call
func ParseGetPatientFormTemplateGetResponse(rsp *http.Response) (*GetPatientFormTemplateGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatientFormTemplateGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatientFormTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatePatientFormTemplatePatchResponse parses an HTTP response from a UpdatePatientFormTemplatePatchWithResponse call
func ParseUpdatePatientFormTemplatePatchResponse(rsp *http.Response) (*UpdatePatientFormTemplatePatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePatientFormTemplatePatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatientFormTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseArchivePatientFormTemplatePostResponse parses an HTTP response from a ArchivePatientFormTemplatePostWithResponse call
func ParseArchivePatientFormTemplatePostResponse(rsp *http.Response) (*ArchivePatientFormTemplatePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchivePatientFormTemplatePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPatientFormsGetResponse parses an HTTP response from a ListPatientFormsGetWithResponse call
func ParseListPatientFormsGetResponse(rsp *http.Response) (*ListPatientFormsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPatientFormsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			PatientForms *[]PatientForm `json:"patient_forms,omitempty"`
			TotalEntries *int           `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePatientFormPostResponse parses an HTTP response from a CreatePatientFormPostWithResponse call
func ParseCreatePatientFormPostResponse(rsp *http.Response) (*CreatePatientFormPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePatientFormPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PatientForm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetPatientFormGetResponse parses an HTTP response from a GetPatientFormGetWithResponse call
func ParseGetPatientFormGetResponse(rsp *http.Response) (*GetPatientFormGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatientFormGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatientForm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatePatientFormPatchResponse parses an HTTP response from a UpdatePatientFormPatchWithResponse call
func ParseUpdatePatientFormPatchResponse(rsp *http.Response) (*UpdatePatientFormPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePatientFormPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatientForm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseArchivePatientFormPostResponse parses an HTTP response from a ArchivePatientFormPostWithResponse call
func ParseArchivePatientFormPostResponse(rsp *http.Response) (*ArchivePatientFormPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchivePatientFormPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSignatureGetResponse parses an HTTP response from a GetSignatureGetWithResponse call
func ParseGetSignatureGetResponse(rsp *http.Response) (*GetSignatureGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSignatureGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Signature
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListPatientsGetResponse parses an HTTP response from a ListPatientsGetWithResponse call
func ParseListPatientsGetResponse(rsp *http.Response) (*ListPatientsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPatientsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			Patients     *[]Patient `json:"patients,omitempty"`
			TotalEntries *int       `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePatientPostResponse parses an HTTP response from a CreatePatientPostWithResponse call
func ParseCreatePatientPostResponse(rsp *http.Response) (*CreatePatientPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePatientPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Patient
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseArchivePatientDeleteResponse parses an HTTP response from a ArchivePatientDeleteWithResponse call
func ParseArchivePatientDeleteResponse(rsp *http.Response) (*ArchivePatientDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchivePatientDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPatientGetResponse parses an HTTP response from a GetPatientGetWithResponse call
func ParseGetPatientGetResponse(rsp *http.Response) (*GetPatientGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatientGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Patient
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatePatientPatchResponse parses an HTTP response from a UpdatePatientPatchWithResponse call
func ParseUpdatePatientPatchResponse(rsp *http.Response) (*UpdatePatientPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePatientPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Patient
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseArchivePatientPostResponse parses an HTTP response from a ArchivePatientPostWithResponse call
func ParseArchivePatientPostResponse(rsp *http.Response) (*ArchivePatientPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchivePatientPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUnarchivePatientPostResponse parses an HTTP response from a UnarchivePatientPostWithResponse call
func ParseUnarchivePatientPostResponse(rsp *http.Response) (*UnarchivePatientPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnarchivePatientPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Patient
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePresignedPostGetResponse parses an HTTP response from a PresignedPostGetWithResponse call
func ParsePresignedPostGetResponse(rsp *http.Response) (*PresignedPostGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PresignedPostGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttachmentPresignedPost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListInvoicesForPatientGetResponse parses an HTTP response from a ListInvoicesForPatientGetWithResponse call
func ParseListInvoicesForPatientGetResponse(rsp *http.Response) (*ListInvoicesForPatientGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInvoicesForPatientGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Invoices *[]Invoice `json:"invoices,omitempty"`
			Links    *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListMedicalAlertsForPatientGetResponse parses an HTTP response from a ListMedicalAlertsForPatientGetWithResponse call
func ParseListMedicalAlertsForPatientGetResponse(rsp *http.Response) (*ListMedicalAlertsForPatientGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMedicalAlertsForPatientGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			MedicalAlerts *[]MedicalAlert `json:"medical_alerts,omitempty"`
			TotalEntries  *int            `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListPatientAttachmentsForPatientGetResponse parses an HTTP response from a ListPatientAttachmentsForPatientGetWithResponse call
func ParseListPatientAttachmentsForPatientGetResponse(rsp *http.Response) (*ListPatientAttachmentsForPatientGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPatientAttachmentsForPatientGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			PatientAttachments *[]PatientAttachment `json:"patient_attachments,omitempty"`
			TotalEntries       *int                 `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReferralSourceGetResponse parses an HTTP response from a GetReferralSourceGetWithResponse call
func ParseGetReferralSourceGetResponse(rsp *http.Response) (*GetReferralSourceGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReferralSourceGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReferralSource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateReferralSourcePatchResponse parses an HTTP response from a UpdateReferralSourcePatchWithResponse call
func ParseUpdateReferralSourcePatchResponse(rsp *http.Response) (*UpdateReferralSourcePatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateReferralSourcePatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReferralSource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListTreatmentNotesForPatientGetResponse parses an HTTP response from a ListTreatmentNotesForPatientGetWithResponse call
func ParseListTreatmentNotesForPatientGetResponse(rsp *http.Response) (*ListTreatmentNotesForPatientGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTreatmentNotesForPatientGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries   *int             `json:"total_entries,omitempty"`
			TreatmentNotes *[]TreatmentNote `json:"treatment_notes,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListPractitionerReferenceNumbersGetResponse parses an HTTP response from a ListPractitionerReferenceNumbersGetWithResponse call
func ParseListPractitionerReferenceNumbersGetResponse(rsp *http.Response) (*ListPractitionerReferenceNumbersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPractitionerReferenceNumbersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			PractitionerReferenceNumbers *[]PractitionerReferenceNumber `json:"practitioner_reference_numbers,omitempty"`
			TotalEntries                 *int                           `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePractitionerReferenceNumberPostResponse parses an HTTP response from a CreatePractitionerReferenceNumberPostWithResponse call
func ParseCreatePractitionerReferenceNumberPostResponse(rsp *http.Response) (*CreatePractitionerReferenceNumberPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePractitionerReferenceNumberPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PractitionerReferenceNumber
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeletePractitionerReferenceNumberDeleteResponse parses an HTTP response from a DeletePractitionerReferenceNumberDeleteWithResponse call
func ParseDeletePractitionerReferenceNumberDeleteResponse(rsp *http.Response) (*DeletePractitionerReferenceNumberDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePractitionerReferenceNumberDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPractitionerReferenceNumberGetResponse parses an HTTP response from a GetPractitionerReferenceNumberGetWithResponse call
func ParseGetPractitionerReferenceNumberGetResponse(rsp *http.Response) (*GetPractitionerReferenceNumberGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPractitionerReferenceNumberGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PractitionerReferenceNumber
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatePractitionerReferenceNumberPatchResponse parses an HTTP response from a UpdatePractitionerReferenceNumberPatchWithResponse call
func ParseUpdatePractitionerReferenceNumberPatchResponse(rsp *http.Response) (*UpdatePractitionerReferenceNumberPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePractitionerReferenceNumberPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PractitionerReferenceNumber
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListPractitionersGetResponse parses an HTTP response from a ListPractitionersGetWithResponse call
func ParseListPractitionersGetResponse(rsp *http.Response) (*ListPractitionersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPractitionersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			Practitioners *[]Practitioner `json:"practitioners,omitempty"`
			TotalEntries  *int            `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListInactivePractitionersGetResponse parses an HTTP response from a ListInactivePractitionersGetWithResponse call
func ParseListInactivePractitionersGetResponse(rsp *http.Response) (*ListInactivePractitionersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInactivePractitionersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			Practitioners *[]Practitioner `json:"practitioners,omitempty"`
			TotalEntries  *int            `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPractitionerGetResponse parses an HTTP response from a GetPractitionerGetWithResponse call
func ParseGetPractitionerGetResponse(rsp *http.Response) (*GetPractitionerGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPractitionerGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Practitioner
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAppointmentTypesForPractitionerGetResponse parses an HTTP response from a ListAppointmentTypesForPractitionerGetWithResponse call
func ParseListAppointmentTypesForPractitionerGetResponse(rsp *http.Response) (*ListAppointmentTypesForPractitionerGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAppointmentTypesForPractitionerGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AppointmentTypes *[]AppointmentType `json:"appointment_types,omitempty"`
			Links            *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListDailyAvailabilitiesForPractitionerGetResponse parses an HTTP response from a ListDailyAvailabilitiesForPractitionerGetWithResponse call
func ParseListDailyAvailabilitiesForPractitionerGetResponse(rsp *http.Response) (*ListDailyAvailabilitiesForPractitionerGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDailyAvailabilitiesForPractitionerGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DailyAvailabilities *[]DailyAvailability `json:"daily_availabilities,omitempty"`
			Links               *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListInvoicesForPractitionerGetResponse parses an HTTP response from a ListInvoicesForPractitionerGetWithResponse call
func ParseListInvoicesForPractitionerGetResponse(rsp *http.Response) (*ListInvoicesForPractitionerGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInvoicesForPractitionerGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Invoices *[]Invoice `json:"invoices,omitempty"`
			Links    *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListPractitionerReferenceNumbersForPractitionerGetResponse parses an HTTP response from a ListPractitionerReferenceNumbersForPractitionerGetWithResponse call
func ParseListPractitionerReferenceNumbersForPractitionerGetResponse(rsp *http.Response) (*ListPractitionerReferenceNumbersForPractitionerGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPractitionerReferenceNumbersForPractitionerGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			PractitionerReferenceNumbers *[]PractitionerReferenceNumber `json:"practitioner_reference_numbers,omitempty"`
			TotalEntries                 *int                           `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListProductSuppliersGetResponse parses an HTTP response from a ListProductSuppliersGetWithResponse call
func ParseListProductSuppliersGetResponse(rsp *http.Response) (*ListProductSuppliersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListProductSuppliersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			ProductSuppliers *[]ProductSupplier `json:"product_suppliers,omitempty"`
			TotalEntries     *int               `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateProductSupplierPostResponse parses an HTTP response from a CreateProductSupplierPostWithResponse call
func ParseCreateProductSupplierPostResponse(rsp *http.Response) (*CreateProductSupplierPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProductSupplierPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProductSupplier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteProductSupplierDeleteResponse parses an HTTP response from a DeleteProductSupplierDeleteWithResponse call
func ParseDeleteProductSupplierDeleteResponse(rsp *http.Response) (*DeleteProductSupplierDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProductSupplierDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProductSupplierGetResponse parses an HTTP response from a GetProductSupplierGetWithResponse call
func ParseGetProductSupplierGetResponse(rsp *http.Response) (*GetProductSupplierGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductSupplierGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductSupplier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateProductSupplierPatchResponse parses an HTTP response from a UpdateProductSupplierPatchWithResponse call
func ParseUpdateProductSupplierPatchResponse(rsp *http.Response) (*UpdateProductSupplierPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateProductSupplierPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductSupplier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseArchiveProductSupplierPostResponse parses an HTTP response from a ArchiveProductSupplierPostWithResponse call
func ParseArchiveProductSupplierPostResponse(rsp *http.Response) (*ArchiveProductSupplierPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveProductSupplierPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListProductsGetResponse parses an HTTP response from a ListProductsGetWithResponse call
func ParseListProductsGetResponse(rsp *http.Response) (*ListProductsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListProductsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			Products     *[]Product `json:"products,omitempty"`
			TotalEntries *int       `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateProductPostResponse parses an HTTP response from a CreateProductPostWithResponse call
func ParseCreateProductPostResponse(rsp *http.Response) (*CreateProductPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProductPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteProductDeleteResponse parses an HTTP response from a DeleteProductDeleteWithResponse call
func ParseDeleteProductDeleteResponse(rsp *http.Response) (*DeleteProductDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProductDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProductGetResponse parses an HTTP response from a GetProductGetWithResponse call
func ParseGetProductGetResponse(rsp *http.Response) (*GetProductGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateProductPatchResponse parses an HTTP response from a UpdateProductPatchWithResponse call
func ParseUpdateProductPatchResponse(rsp *http.Response) (*UpdateProductPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateProductPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseArchiveProductPostResponse parses an HTTP response from a ArchiveProductPostWithResponse call
func ParseArchiveProductPostResponse(rsp *http.Response) (*ArchiveProductPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveProductPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListReferralSourceTypesGetResponse parses an HTTP response from a ListReferralSourceTypesGetWithResponse call
func ParseListReferralSourceTypesGetResponse(rsp *http.Response) (*ListReferralSourceTypesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListReferralSourceTypesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			ReferralSourceTypes *[]ReferralSourceType `json:"referral_source_types,omitempty"`
			TotalEntries        *int                  `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReferralSourceTypeGetResponse parses an HTTP response from a GetReferralSourceTypeGetWithResponse call
func ParseGetReferralSourceTypeGetResponse(rsp *http.Response) (*GetReferralSourceTypeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReferralSourceTypeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReferralSourceType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListReferralSourcesGetResponse parses an HTTP response from a ListReferralSourcesGetWithResponse call
func ParseListReferralSourcesGetResponse(rsp *http.Response) (*ListReferralSourcesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListReferralSourcesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			ReferralSources *[]ReferralSource `json:"referral_sources,omitempty"`
			TotalEntries    *int              `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListServicesGetResponse parses an HTTP response from a ListServicesGetWithResponse call
func ParseListServicesGetResponse(rsp *http.Response) (*ListServicesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListServicesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			Services     *[]Service `json:"services,omitempty"`
			TotalEntries *int       `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSettingsGetResponse parses an HTTP response from a GetSettingsGetWithResponse call
func ParseGetSettingsGetResponse(rsp *http.Response) (*GetSettingsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Settings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicSettingsGetResponse parses an HTTP response from a GetPublicSettingsGetWithResponse call
func ParseGetPublicSettingsGetResponse(rsp *http.Response) (*GetPublicSettingsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicSettingsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListStockAdjustmentsGetResponse parses an HTTP response from a ListStockAdjustmentsGetWithResponse call
func ParseListStockAdjustmentsGetResponse(rsp *http.Response) (*ListStockAdjustmentsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListStockAdjustmentsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			StockAdjustments *[]StockAdjustment `json:"stock_adjustments,omitempty"`
			TotalEntries     *int               `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateStockAdjustmentPostResponse parses an HTTP response from a CreateStockAdjustmentPostWithResponse call
func ParseCreateStockAdjustmentPostResponse(rsp *http.Response) (*CreateStockAdjustmentPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStockAdjustmentPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest StockAdjustment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetStockAdjustmentGetResponse parses an HTTP response from a GetStockAdjustmentGetWithResponse call
func ParseGetStockAdjustmentGetResponse(rsp *http.Response) (*GetStockAdjustmentGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStockAdjustmentGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StockAdjustment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListTaxesGetResponse parses an HTTP response from a ListTaxesGetWithResponse call
func ParseListTaxesGetResponse(rsp *http.Response) (*ListTaxesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTaxesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			Taxes        *[]Tax `json:"taxes,omitempty"`
			TotalEntries *int   `json:"total_entries,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateTaxPostResponse parses an HTTP response from a CreateTaxPostWithResponse call
func ParseCreateTaxPostResponse(rsp *http.Response) (*CreateTaxPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTaxPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Tax
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteTaxDeleteResponse parses an HTTP response from a DeleteTaxDeleteWithResponse call
func ParseDeleteTaxDeleteResponse(rsp *http.Response) (*DeleteTaxDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTaxDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTaxGetResponse parses an HTTP response from a GetTaxGetWithResponse call
func ParseGetTaxGetResponse(rsp *http.Response) (*GetTaxGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tax
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateTaxPatchResponse parses an HTTP response from a UpdateTaxPatchWithResponse call
func ParseUpdateTaxPatchResponse(rsp *http.Response) (*UpdateTaxPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTaxPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tax
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListTreatmentNoteTemplatesGetResponse parses an HTTP response from a ListTreatmentNoteTemplatesGetWithResponse call
func ParseListTreatmentNoteTemplatesGetResponse(rsp *http.Response) (*ListTreatmentNoteTemplatesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTreatmentNoteTemplatesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries           *int                     `json:"total_entries,omitempty"`
			TreatmentNoteTemplates *[]TreatmentNoteTemplate `json:"treatment_note_templates,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateTreatmentNoteTemplatePostResponse parses an HTTP response from a CreateTreatmentNoteTemplatePostWithResponse call
func ParseCreateTreatmentNoteTemplatePostResponse(rsp *http.Response) (*CreateTreatmentNoteTemplatePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTreatmentNoteTemplatePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TreatmentNoteTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteTreatmentNoteTemplateDeleteResponse parses an HTTP response from a DeleteTreatmentNoteTemplateDeleteWithResponse call
func ParseDeleteTreatmentNoteTemplateDeleteResponse(rsp *http.Response) (*DeleteTreatmentNoteTemplateDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTreatmentNoteTemplateDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTreatmentNoteTemplateGetResponse parses an HTTP response from a GetTreatmentNoteTemplateGetWithResponse call
func ParseGetTreatmentNoteTemplateGetResponse(rsp *http.Response) (*GetTreatmentNoteTemplateGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTreatmentNoteTemplateGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TreatmentNoteTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateTreatmentNoteTemplatePatchResponse parses an HTTP response from a UpdateTreatmentNoteTemplatePatchWithResponse call
func ParseUpdateTreatmentNoteTemplatePatchResponse(rsp *http.Response) (*UpdateTreatmentNoteTemplatePatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTreatmentNoteTemplatePatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TreatmentNoteTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseArchiveTreatmentNoteTemplatePostResponse parses an HTTP response from a ArchiveTreatmentNoteTemplatePostWithResponse call
func ParseArchiveTreatmentNoteTemplatePostResponse(rsp *http.Response) (*ArchiveTreatmentNoteTemplatePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveTreatmentNoteTemplatePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListTreatmentNotesGetResponse parses an HTTP response from a ListTreatmentNotesGetWithResponse call
func ParseListTreatmentNotesGetResponse(rsp *http.Response) (*ListTreatmentNotesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTreatmentNotesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries   *int             `json:"total_entries,omitempty"`
			TreatmentNotes *[]TreatmentNote `json:"treatment_notes,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateTreatmentNotePostResponse parses an HTTP response from a CreateTreatmentNotePostWithResponse call
func ParseCreateTreatmentNotePostResponse(rsp *http.Response) (*CreateTreatmentNotePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTreatmentNotePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TreatmentNote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteTreatmentNoteDeleteResponse parses an HTTP response from a DeleteTreatmentNoteDeleteWithResponse call
func ParseDeleteTreatmentNoteDeleteResponse(rsp *http.Response) (*DeleteTreatmentNoteDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTreatmentNoteDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTreatmentNoteGetResponse parses an HTTP response from a GetTreatmentNoteGetWithResponse call
func ParseGetTreatmentNoteGetResponse(rsp *http.Response) (*GetTreatmentNoteGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTreatmentNoteGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TreatmentNote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateTreatmentNotePatchResponse parses an HTTP response from a UpdateTreatmentNotePatchWithResponse call
func ParseUpdateTreatmentNotePatchResponse(rsp *http.Response) (*UpdateTreatmentNotePatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTreatmentNotePatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TreatmentNote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseArchiveTreatmentNotePostResponse parses an HTTP response from a ArchiveTreatmentNotePostWithResponse call
func ParseArchiveTreatmentNotePostResponse(rsp *http.Response) (*ArchiveTreatmentNotePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveTreatmentNotePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListUnavailableBlocksGetResponse parses an HTTP response from a ListUnavailableBlocksGetWithResponse call
func ParseListUnavailableBlocksGetResponse(rsp *http.Response) (*ListUnavailableBlocksGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUnavailableBlocksGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries      *int                `json:"total_entries,omitempty"`
			UnavailableBlocks *[]UnavailableBlock `json:"unavailable_blocks,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUnavailableBlockPostResponse parses an HTTP response from a CreateUnavailableBlockPostWithResponse call
func ParseCreateUnavailableBlockPostResponse(rsp *http.Response) (*CreateUnavailableBlockPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUnavailableBlockPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UnavailableBlock
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteUnavailableBlockDeleteResponse parses an HTTP response from a DeleteUnavailableBlockDeleteWithResponse call
func ParseDeleteUnavailableBlockDeleteResponse(rsp *http.Response) (*DeleteUnavailableBlockDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUnavailableBlockDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUnavailableBlockGetResponse parses an HTTP response from a GetUnavailableBlockGetWithResponse call
func ParseGetUnavailableBlockGetResponse(rsp *http.Response) (*GetUnavailableBlockGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUnavailableBlockGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UnavailableBlock
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateUnavailableBlockPatchResponse parses an HTTP response from a UpdateUnavailableBlockPatchWithResponse call
func ParseUpdateUnavailableBlockPatchResponse(rsp *http.Response) (*UpdateUnavailableBlockPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUnavailableBlockPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UnavailableBlock
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseArchiveUnavailableBlockPostResponse parses an HTTP response from a ArchiveUnavailableBlockPostWithResponse call
func ParseArchiveUnavailableBlockPostResponse(rsp *http.Response) (*ArchiveUnavailableBlockPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveUnavailableBlockPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUnavailableBlockConflictsGetResponse parses an HTTP response from a GetUnavailableBlockConflictsGetWithResponse call
func ParseGetUnavailableBlockConflictsGetResponse(rsp *http.Response) (*GetUnavailableBlockConflictsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUnavailableBlockConflictsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Conflicts *struct {
				Exist *bool `json:"exist,omitempty"`
			} `json:"conflicts,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAuthenticatedUserGetResponse parses an HTTP response from a GetAuthenticatedUserGetWithResponse call
func ParseGetAuthenticatedUserGetResponse(rsp *http.Response) (*GetAuthenticatedUserGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthenticatedUserGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListUsersGetResponse parses an HTTP response from a ListUsersGetWithResponse call
func ParseListUsersGetResponse(rsp *http.Response) (*ListUsersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				Next     *string `json:"next,omitempty"`
				Previous *string `json:"previous,omitempty"`
				Self     *string `json:"self,omitempty"`
			} `json:"links,omitempty"`
			TotalEntries *int    `json:"total_entries,omitempty"`
			Users        *[]User `json:"users,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserGetResponse parses an HTTP response from a GetUserGetWithResponse call
func ParseGetUserGetResponse(rsp *http.Response) (*GetUserGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
